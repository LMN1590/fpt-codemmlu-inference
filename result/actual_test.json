[
    {
        "question": "Question: Consider a two dimensional array A[20][10]. Assume 4 words per memory cell, the base address of array A is 100, elements are stored in row-major order and first element is A[0][0]. What is the address of A[11][5] ?",
        "choices": [
            "560",
            "460",
            "570",
            "575"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "009a19f0-bbf3-49ea-9372-63cfc00714b2"
    },
    {
        "question": "Question: Which among the following is correct for the code given below?\nclass student\n{  \n\tprivate: student()\n\t{  \n\t}\n\tpublic : student( int x) \n\t{ \n\t\tmarks =x; \n\t}\n};",
        "choices": [
            "The object can never be created",
            "The object can be created without parameters",
            "Only the object with only 1 parameter can be created",
            "Only the object with some parameters can be created"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "ae2d2ee2-bcd9-48b0-94b1-312685c9762b"
    },
    {
        "question": "Question: How much memory will be allocated for an object of class given below?\nclass Test{\nint mark1;\nint mark2;\nfloat avg;\nchar name[10];\n};",
        "choices": [
            "22 Bytes",
            "24 Bytes",
            "20 Bytes",
            "18 Bytes"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "1acdc1c7-7377-4bb4-b03e-ce499b2bfe26"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    void main()    {        int k = 5;        int *p = &k;        int **m  = &p;        printf(\"%d%d%d\\n\", k, *p, **p);    }",
        "choices": [
            "5 5 5",
            "5 5 junk value",
            "5 junk junk",
            "Compile time error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "51759b82-c703-49b9-b62f-6be085141d2b"
    },
    {
        "question": "Question: What will be the output of the following C code?\n#include <assert. h> \n#include <stdio . h>\n #include <stdlib.h> \nvoid -Assert (char *mesg) \n{\n   fputs (mesg, stderr); \n   fputs (\" -- assertion failed\\n\" , stderr); \n   abort () ; \n}",
        "choices": [
            "prints only assertion message",
            "program is just aborted",
            "prints assertion message and aborts",
            "no action takes place"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "4e072969-979a-44d5-baa3-92015967d852"
    },
    {
        "question": "Question: Which one of the following is not true about this program?\n   #include<stdio.h>   #include<signal.h>\u00a0   void response (int);   void response (int signo)   {       printf(\"%s\\n\",sys_siglist[signo]);       signal(SIGSEGV,SIG_IGN);   }   int main()   {       signal (SIGSEGV,response);       char *str;       *str = 10;               return 0;   }",
        "choices": [
            "kernel sends SIGSEGV signal to a process as segmentation fault occurs",
            "in this process signal handler will execute only one time of recieving the signal SIGSEGV",
            "all of the mentioned",
            "none of the mentioned"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "7c290b3e-d984-4fba-90a8-59042c06223e"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    int main()    {        srand(time(NULL));        printf(\"%d\\n\", rand());        return 0;    }",
        "choices": [
            "Compile time error",
            "An integer in the range 0 to RAND_MAX",
            "A double in the range 0 to 1",
            "A float in the range 0 to 1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "25f2fa29-8987-4dec-b51a-968a41c32953"
    },
    {
        "question": "Question: What is the output of this program?\n   #include<stdio.h>   #include<stdlib.h>\u00a0   int main()   {       int *ptr;       ptr = (int *)malloc(sizeof(int));       printf(\"%d\\n\",*ptr);       return 0;   }",
        "choices": [
            "4",
            "-1",
            "undefined",
            "none of the mentioned"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "257f7b84-3ee9-4a45-b666-8d48ac6176fa"
    },
    {
        "question": "Question: What is the output of this program?\n    #include<stdio.h>    #include<sys/types.h>    #include<netinet/in.h>    #include<sys/socket.h>    #include<errno.h>\u00a0    int main()    {        struct sockaddr_in addr;        int fd;        fd = socket(AF_UNIX,SOCK_STREAM,0);        if (fd == -1)            perror(\"socket\");        addr.sun_family = AF_UNIX;        strcpy(addr.sun_path,\"san_sock\");        if (bind(4,(struct sockaddr*)&addr,sizeof(addr)) == -1)            printf(\"Sanfoudnry\\n\");        return 0;    }",
        "choices": [
            "error",
            "\u201cSanfoundry\u201d",
            "segmentation fault",
            "none of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "d367740f-fbff-4f62-a817-928a1e39e4f7"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include  <stdio.h>    int main()    {        char c;        int i = 0;        FILE *file;        file = fopen(\"test.txt\", \"w+\");        fprintf(file, \"%c\", 'a');        fprintf(file, \"%c\", -1);        fprintf(file, \"%c\", 'b');        fclose(file);        file = fopen(\"test.txt\", \"r\");        while ((c = fgetc(file)) !=  -1)            printf(\"%c\", c);        return 0;    }",
        "choices": [
            "a",
            "Infinite loop",
            "Depends on what fgetc returns",
            "Depends on the compiler"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "3d94cac7-e4b6-46c5-a00e-5c268627b2e3"
    },
    {
        "question": "Question: What will be the output of the following program?\u00a0 \u00a0\u00a0int a=5, b=2;\nprint ( a+++b);",
        "choices": [
            "Results in compilation error",
            "Prints 7",
            "Prints 8",
            "None of above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "8db65fda-a388-439a-9e9c-7aa80f0ec8de"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    main()    {        int a = 1;        printf(\"size of a is %d, \", sizeof(++a));        printf(\"value of a is %d\", a);    };",
        "choices": [
            "size of a is 4, value of a is 1",
            "size of a is 4, value of a is 2",
            "size of a is 2, value of a is 2",
            "size of a is 2, value of a is 2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "e5c856dd-1315-4e8f-bd28-f4b800aff243"
    },
    {
        "question": "Question: What will be the output of the following C code on a 32-bit machine?\n    #include <stdio.h>    int main()    {        int x = 10000;        double y = 56;        int *p = &x;        double *q = &y;        printf(\"p and q are %d and %d\", sizeof(p), sizeof(q));        return 0;    }",
        "choices": [
            "p and q are 4 and 4",
            "p and q are 4 and 8",
            "compiler error",
            "p and q are 2 and 8"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "b6dda214-a786-4a20-81d4-9b64d595757d"
    },
    {
        "question": "Question: What is the postfix expression for the corresponding infix expression?\na+b*c+(d*e)",
        "choices": [
            "abc*+de*+",
            "abc+*de*+",
            "a+bc*de+*",
            "abc*+(de)*+"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Compiler Design",
        "task_id": "2df750c8-a112-457b-bed7-ae3f767baf0c"
    },
    {
        "question": "Question: What will be the output of the following C# code?\nstatic void Main(string[] args){    int i = 1, j = 5;    do    {        Console.WriteLine(i = i++ * j);    }while (i <= 10);    Console.ReadLine();}",
        "choices": [
            "5 10 15 20 25 30 35 40 45 50",
            "5 25",
            "5 11 16 21 26 31 36 41 46 51",
            "5 30"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C# Programming",
        "task_id": "d6595b71-7690-455e-9ac9-dd35ca0b03c1"
    },
    {
        "question": "Question: Which keyword is used to select only unique values from the table?",
        "choices": [
            "Unique",
            "Distinct",
            "Different",
            "NotRepeated."
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "0da32f42-02cc-43cc-b00d-23d30ea20b73"
    },
    {
        "question": "Question: Which SQL statement is used to update data in a database?",
        "choices": [
            "MODIFY",
            "UPDATE",
            "ALTER",
            "CHANGE"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "7e67f4cc-8d6a-4180-8cac-c05b31b9f1f6"
    },
    {
        "question": "Question: Write an SQL query to retrieve the names of employees whose salary is greater than 50000.",
        "choices": [
            "SELECT name FROM employees HAVING salary > 50000;",
            "SELECT name FROM employees WHERE salary > 50000;",
            "SELECT name FROM employees WHERE salary > '50000';",
            "SELECT name FROM employees GROUP BY salary HAVING salary > 50000;"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "36edb4b1-1b71-431c-9f8e-7a36e2c73072"
    },
    {
        "question": "Question: With MySQL, how do you select all the records from a table named \"Persons\" where the \"LastName\" is alphabetically between (and including) \"Hansen\" and \"Pettersen\"?",
        "choices": [
            "SELECT LastName>'Hansen' AND LastName<'Pettersen' FROM Persons",
            "SELECT * FROM Persons WHERE LastName>'Hansen' AND LastName<'Pettersen'",
            "SELECT * FROM Persons WHERE LastName BETWEEN 'Hansen' AND 'Pettersen'"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "SQL Commands",
        "task_id": "40b664d6-d47f-484a-9ef9-6e451e9d6d35"
    },
    {
        "question": "Question: With SQL, how do you select all the columns from a table named \"Persons\"?",
        "choices": [
            "SELECT *.Persons",
            "SELECT Persons",
            "SELECT [all] FROM Persons",
            "SELECT * FROM Persons"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "2ec571f5-2011-4907-baee-4045e1b04ab0"
    },
    {
        "question": "Question: Write an SQL query to retrieve all columns from the \"employees\" table.",
        "choices": [
            "SELECT * FROM employees;",
            "SELECT ALL employees;",
            "SELECT COLUMN employees;",
            "SELECT employees;"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "0726e890-dd3d-4e1a-a99f-034a0730fc67"
    },
    {
        "question": "Question: One of the best practices for securing serverless architecture is to secure data at transit and the rest.",
        "choices": [
            "False",
            "True"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1
        ],
        "label": "AWS",
        "task_id": "13c42c06-3045-4ef0-abf2-c4a4fdd5a6ef"
    },
    {
        "question": "Question: Traceroute reports a possible route that is taken by packets moving from some host A to some other host B. Which of the following options represents the technique used by traceroute to identify these hosts",
        "choices": [
            "By progressively querying routers about the next router on the path to B using ICMP packets, starting with the first router",
            "By requiring each router to append the address to the ICMP packet as it is forwarded to B. The list of all routers en-route to B is returned by B in an ICMP reply packet",
            "By ensuring that an ICMP reply packet is returned to A by each router en-route to B, in the ascending order of their hop distance from A",
            "By locally computing the shortest path from A to B"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "e5dd45fa-7e44-44bf-818d-51e1825c8c99"
    },
    {
        "question": "Question: If block contains 32 IP address which of the following is first address of the block ?",
        "choices": [
            "10.0.0.5",
            "10.0.0.16",
            "10.0.0.68",
            "10.0.0.160"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "b44fed2c-8c6c-4246-829f-3830410a167d"
    },
    {
        "question": "Question: For a host machine that uses the token bucket algorithm for congestion control, the token bucket has a capacity of 1 megabyte and the maximum output rate is 20 megabytes per second.  Tokens arrive at a rate to sustain output at a rate of 10 megabytes per second. The token bucket is currently full and the machine needs to send 12 megabytes of data. The minimum time required to transmit the data is _________________ seconds.",
        "choices": [
            "1.1",
            "0.1",
            "2.1",
            "2.0"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "8fa4d9d6-ec14-4f05-9b65-344a81eb1786"
    },
    {
        "question": "Question: How many bytes of data can be sent in 15 seconds over a serial link with baud rate of 9600 in asynchronous mode with odd parity and two stop bits in the frame?",
        "choices": [
            "10,000 bytes",
            "12,000 bytes",
            "15,000 bytes",
            "27,000 bytes"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "e42040ca-0b6f-44c3-8b5c-4fcbfc1993e1"
    },
    {
        "question": "Question: Suppose the round trip propagation delay for a 10 Mbps Ethernet having 48-bit jamming signal is 46.4 ms. The minimum frame size is",
        "choices": [
            "94",
            "416",
            "464",
            "512"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "3ff0d825-6977-4511-ad4c-bae493ab5c5d"
    },
    {
        "question": "Question: In networking, UTP stands for",
        "choices": [
            "Unshielded T-connector port",
            "Unshielded twisted pair",
            "Unshielded terminating pair",
            "Unshielded transmission process"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "a4b33e4c-24f4-47b3-ae7f-43ac803c863c"
    },
    {
        "question": "Question: Anarkali digitally signs a message and sends it to Salim. Verification of the signature by Salim requires",
        "choices": [
            "Anarkali\u2019s public key.",
            "Salim\u2019s public key.",
            "Salim\u2019s private key.",
            "Anarkali\u2019s private key."
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cryptography",
        "task_id": "82249cd4-ffb5-44bd-9151-d6fd0563a285"
    },
    {
        "question": "Question: The lower degree of cohesion is kind of",
        "choices": [
            "Logical Cohesion",
            "Coincidental Cohesion",
            "Procedural Cohesion",
            "Communicational Cohesion"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "337006b7-a5f7-4ba6-9067-1dd31032bbb7"
    },
    {
        "question": "Question: A software project was estimated at 352 Function Points (FP). A four person team will be assigned to this project consisting of an architect, two programmers, and a tester. The salary of the architect is ` 80,000 per month, the programmer \u20b9 60,000 per month and the tester \u20b9 50,000 per month. The average productivity for the team is 8 FP per person month. Which of the following represents the projected cost of the project ?",
        "choices": [
            "\u20b9 28,16,000",
            "\u20b9 20,90,000",
            "\u20b9 26,95,000",
            "\u20b9 27,50,000"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "ed85c375-0b0c-465d-a901-443f120240d5"
    },
    {
        "question": "Question: A software project involves execution of 5 tasks T1, T2, T3, T4 and T5 of duration 10, 15, 18, 30 and 40 days, respectively. T2 and T4 can start only after T1 completes. T3 can start after T2 completes. T5 can start only after both T3 and T4 complete. What is the slack time of the task T3 in days?",
        "choices": [
            "0",
            "3",
            "18",
            "30"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "203846a2-739e-4d3a-8776-a5b5ba9e12aa"
    },
    {
        "question": "Question: Which of the following is false regarding the evaluation of computer programming languages ?",
        "choices": [
            "Application oriented features",
            "Efficiency and Readability",
            "Software development",
            "Hardware maintenance cost"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "f47fe54a-b6de-44de-b3b3-ebe5651eebcd"
    },
    {
        "question": "Question: Which of the following attributes is used to open an hyperlink in new tab?",
        "choices": [
            "tab",
            "href",
            "target",
            "ref"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "7de61815-48c0-4c94-8872-8a02e9929f9b"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
        "choices": [
            "    for operation in operations:\n        if operation < 0:\n            return True\n    return False",
            "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
            "    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n    return current_balance < 0",
            "    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return False\n    return True"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "0c77841e-16a8-4b9a-acd9-1328f785d0d0"
    },
    {
        "question": "Question: What will be the output of the following code:\u00a0let geeks = {\u00a0\u00a0 \u00a0name : \"ABC\",\u00a0\u00a0 \u00a0printFunc: function() {\u00a0\u00a0 \u00a0 \u00a0 \u00a0console.log(this.name);\u00a0 \u00a0}\u00a0}let printFunc2 = geeks.printFunc;printFunc2();",
        "choices": [
            "No output",
            "ABC",
            "Can\u2019t say",
            "None of the above"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "4fc5d3b2-c19e-4374-bf37-f1d4357997dc"
    },
    {
        "question": "Question: Which CSS property will we use to wrap a block of text with an image ?",
        "choices": [
            "Wrap",
            "Push",
            "Float",
            "Align"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML",
        "task_id": "0f77e53c-0b06-4add-97a4-36e21ec12781"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom math import gcd\n\nn = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\n\nclass Seg_min():\n    def __init__(self,x):\n        #####\u5358\u4f4d\u5143######\n        self.ide_ele_min = 10**10\n        self.func = min\n\n        self.n = len(x)\n\n        #num_max:n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\n        self.num_max =2**(self.n-1).bit_length()\n        self.x = [self.ide_ele_min]*2*self.num_max\n\n        for i,num in enumerate(x, self.num_max):\n            self.x[i] = num\n        for i in range(self.num_max-1,0,-1):\n            self.x[i] = self.func(self.x[i<<1],self.x[(i<<1) + 1])\n\n    def update(self,i,x):\n        i += self.num_max\n        self.x[i] = x\n        while(i>0):\n            i = i//2\n            self.x[i] = self.func(self.x[i<<1],self.x[(i<<1) + 1])\n\n    def query(self,i,j):\n        res = self.ide_ele_min\n        if i>=j:\n            return res\n        i += self.num_max\n        j += self.num_max -1\n        while(i<=j):\n            if(i==j):\n                res = self.func(res,self.x[i])\n                break\n            if(i&1):\n                res = self.func(res,self.x[i])\n                i += 1\n            if(not j&1):\n                res = self.func(res,self.x[j])\n                j -= 1\n            i = i>>1\n            j = j>>1\n        return res\n\n\nclass Seg_max():\n    def __init__(self,x):\n        #####\u5358\u4f4d\u5143######\n        self.ide_ele_min = 10**10 * -1\n        self.func = max\n\n        self.n = len(x)\n\n        #num_max:n\u4ee5\u4e0a\u306e\u6700\u5c0f\u306e2\u306e\u3079\u304d\u4e57\n        self.num_max =2**(self.n-1).bit_length()\n        self.x = [self.ide_ele_min]*2*self.num_max\n\n        for i,num in enumerate(x, self.num_max):\n            self.x[i] = num\n        for i in range(self.num_max-1,0,-1):\n            self.x[i] = self.func(self.x[i<<1],self.x[(i<<1) + 1])\n\n    def update(self,i,x):\n        i += self.num_max\n        self.x[i] = x\n        while(i>0):\n            i = i//2\n            self.x[i] = self.func(self.x[i<<1],self.x[(i<<1) + 1])\n\n    def query(self,i,j):\n        res = self.ide_ele_min\n        if i>=j:\n            return res\n        i += self.num_max\n        j += self.num_max -1\n        while(i<=j):\n            if(i==j):\n                res = self.func(res,self.x[i])\n                break\n            if(i&1):\n                res = self.func(res,self.x[i])\n                i += 1\n            if(not j&1):\n                res = self.func(res,self.x[j])\n                j -= 1\n            i = i>>1\n            j = j>>1\n        return res\n\n# a\u306e\u6700\u5927\u5024\u306eindex\u3092\u53d6\u5f97\nmax_ind = 0\nmax_num = -1\nfor ind,i in enumerate(a):\n    if(i > max_num):\n        max_ind = ind\n        max_num = i\n\n# max_ind \u304c\u5148\u982d\u306b\u306a\u308b\u3088\u3046\u306b\u9806\u756a\u3092\u5909\u66f4\na = a[max_ind:] + a[:max_ind]\nb = b[max_ind:] + b[:max_ind]\n\n# Ai\u304c\u5c0f\u3055\u3044\u9806\u306b\u63a2\u7d22\u3059\u308b\u3002\u305d\u306e\u9806\u756a\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\u3002\norder = [(i,ind) for ind,i in enumerate(a)]\norder.sort()\n\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308b\u3002\n# cs1\u306f\u666e\u901a\u306eBi\u306e\u7d2f\u7a4d\u548c\n# cs2\u306fi*Bi\u306e\u7d2f\u7a4d\u548c\ncs1_l = [0] * (n)\ncs2_l = [0] * (n)\ncs1_r = [0] * (n+1)\ncs2_r = [0] * (n+1)\n\nfor i in range(1,n):\n    cs1_l[i] = cs1_l[i-1] + b[i]\n    cs2_l[i] = cs2_l[i-1] + b[i]*i\n\nfor i in range(1,n):\n    cs1_r[-(i+1)] = cs1_r[-i] + b[-i]\n    cs2_r[-(i+1)] = cs2_r[-i] + b[-i]*i\n\n# 1\u9031\u3057\u3066\u623b\u3063\u3066\u304f\u308b\u70b9\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304f\na.append(a[0])\nb.append(b[0])\n\n# \u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3059\u308b\u4f4d\u7f6e\u3092\u8a18\u9332\u30fb\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u30bb\u30b0\u6728\u3092\u4f7f\u3046\nseg_left = Seg_max( list(range(n+1)) )\nseg_right = Seg_min( list(range(n+1)) )\n\n# \u3059\u3079\u3066\u306e\u70b9\u306b\u3064\u3044\u3066\u3001\u7d42\u4e86\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3002\nend = [1] * (n+1)\n# end[0] = 1\n# end[-1] = 1\n\n# \u7d42\u4e86\u3057\u306a\u3044\u5834\u5408\u306e\u671f\u5f85\u5024\u8a08\u7b97\u306e\u95a2\u6570\ndef calc_ex(ind):\n    left = seg_left.query(0,ind)\n    right = seg_right.query(ind+1,n+1)\n\n    div = right - left\n    wid_l = ind-left\n    wid_r = right-ind\n    # left-ind\n    base = cs2_l[ind] - cs2_l[left] - (cs1_l[ind] - cs1_l[left])*left\n    ex_l = base*2 * wid_r\n\n    # ind-right\n    base = cs2_r[ind] - cs2_r[right] - (cs1_r[ind] - cs1_r[right])*(n-right)\n    ex_r = base*2 * wid_l\n\n    ex = -ex_l - ex_r + b[ind]*wid_l*wid_r*2 + a[left]*wid_r + a[right]*wid_l\n\n    return ex,div\n\n\n# Ai\u304c\u5927\u304d\u3044\u9806\u306b\u671f\u5f85\u5024\u8a08\u7b97\u3092\u3057\u3066\u3001\u7d42\u4e86\u3059\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3002\n# A0\u306f\u7d76\u5bfe\u306b\u7d42\u4e86\u3059\u3079\u304d\u306a\u306e\u3067skip\norder = [j for i,j in order]\nflag = True\nwhile(flag):\n    flag = False\n    next = []\n    for ind in order:\n        if(ind==0):\n            continue\n\n        ex,div = calc_ex(ind)\n        if(a[ind]*div < ex):\n            end[ind] = 0\n            seg_left.update(ind,0)\n            seg_right.update(ind,n)\n            flag = True\n        else:\n            next.append(ind)\n    order = next[::]\n\n\n# \u7d42\u4e86\u3059\u3079\u304d\u30dd\u30a4\u30f3\u30c8\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u671f\u5f85\u5024\u5408\u8a08\u3092\u8a08\u7b97\nans = [0] * (n)\nfor ind,flag in enumerate(end[:-1]):\n    if(flag==1):\n        ans[ind] = (a[ind],1)\n    else:\n        ex,div = calc_ex(ind)\n        ans[ind] = (ex,div)\n\nlcm = 1\nfor ex,div in ans:\n    lcm = (lcm*div)//gcd(lcm,div)\n\nans_num = 0\nfor ex,div in ans:\n    ans_num += ex*(lcm//div)\n\nprint(ans_num/(lcm*n))",
        "choices": [
            "Time Limit Exceeded",
            "Compile Error",
            "Memory Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ddd84f6f-9efe-43ab-a513-6edc73a3633e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order. Return the intersection of these two interval lists. A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b. The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\n\nIncomplete Solution:\nclass Solution:\n  def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\n    ans = []\n    i = 0\n    j = 0\n\n    _______________\n    while i < len(firstList) and j < len(secondList):\n      lo = max(firstList[i][0], secondList[j][0])\n      hi = min(firstList[i][1], secondList[j][1])\n      if lo <= hi:\n        ans.append([lo, hi])\n      if firstList[i][1] < secondList[j][1]:\n        i += 1\n      else:\n        j += 1\n\n    return ans",
        "choices": [
            "    while i < len(firstList) and j < len(secondList) - 1:",
            "    while i < len(firstList) and j < len(secondList):",
            "    while i < len(firstList) and j <= len(secondList) - 1:",
            "    while i <= len(firstList) - 1 and j < len(secondList):"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "dd558001-cbdb-4ece-ab68-3935175c5525"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
        "choices": [
            "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))  \n    return (max(smallest) if smallest else None, min(largest) if largest else None)",
            "    smallest = list(filter(lambda x: x <= 0, lst)) \n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)",
            "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (min(smallest) if smallest else None, max(largest) if largest else None) ",
            "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "32ec1984-5532-4157-9a28-d00c0111b2c7"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\ninput = sys.stdin.readline\n\nfrom bisect import bisect_left, bisect_right\n\nINF = 10**18 + 100\nN,A,B = map(int,input().split())\nS = [-INF] + [int(x) for x in sys.stdin.read().split()]\n\nMOD = 10**9 + 7\n\ndpX = [0] * (N+1) # \u6700\u5f8c\u306bY\u3092\u9078\u3093\u3060\u3068\u3057\u3066\u3001\u76f4\u524d\u306b\u9078\u3093\u3060X\u304c\u3069\u3053\u306b\u3042\u308b\u304b\ndpY = [0] * (N+1) # \u6700\u5f8c\u306bX\u3092\u9078\u3093\u3060\u3068\u3057\u3066\u3001\u76f4\u524d\u306b\u9078\u3093\u3060Y\u304c\u3069\u3053\u306b\u3042\u308b\u304b\ndpX[0] = 1\ndpY[0] = 1\ndpX_cum = [1] * (N+1) + [0]\ndpY_cum = [1] * (N+1) + [0]\ndpX_left = 0\ndpY_left = 0\nfor n,x in enumerate(S[2:],2):\n    iA = bisect_right(S,x-A)\n    iB = bisect_right(S,x-B)\n    # ....XY\n    xy = dpY_cum[iB-1] - dpY_cum[dpY_left-1]\n    # ....YX\n    yx = dpX_cum[iA-1] - dpX_cum[dpX_left-1]\n    # ....XX \u304c\u4e0d\u53ef\u80fd\u306a\u3089\u6368\u3066\u308b\u3002\u660e\u793a\u7684\u306b\u6368\u3066\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u751f\u304d\u3066\u3044\u308b\u756a\u53f7\u3060\u3051\u6301\u3064\n    if iA != n:\n        dpY_left = n-1\n    if iB != n:\n        dpX_left = n-1\n    dpX[n-1] = xy\n    dpX_cum[n-1] = (dpX_cum[n-2] + xy) % MOD\n    dpX_cum[n] = dpX_cum[n-1]\n    dpY[n-1] = yx\n    dpY_cum[n-1] = (dpY_cum[n-2] + yx) % MOD\n    dpY_cum[n] = dpY_cum[n-1]\n\nanswer = dpX_cum[n] - dpX_cum[dpX_left-1]\nanswer += dpY_cum[n] - dpY_cum[dpY_left-1]\nanswer %= MOD\nprint(answer)\n\ndpX\n\n",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Internal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "6efbd625-8141-4230-9f33-8f88ac20db52"
    },
    {
        "question": "Question: What will be the output of the following Python code?\ns=set()\ntype(s)",
        "choices": [
            "<\u2019set\u2019>",
            "<class \u2018set\u2019>",
            "set",
            "class set"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "3cff3c80-7220-4c9c-8dc1-cdf89b6497c7"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
        "choices": [
            "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = a + b + c \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
            "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 3  \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)",
            "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
            "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area) \n"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ca221f89-fcba-44e6-904b-aacd657c0cee"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. Given an integer n, return true if n is an ugly number.\n\nIncomplete Solution:\nclass Solution:\n  def isUgly(self, n: int) -> bool:\n    if n == 0:\n      return False\n\n    for prime in 2, 3, 5:\n      while n % prime == 0:\n        _______________\n        n //= prime\n\n    return n == 1",
        "choices": [
            "        n //= prime",
            "        n = n // prime",
            "        n = int(n / prime)",
            "        n /= prime"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "77c4e4f1-e4eb-4905-9b3b-119ae888bd8c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n flights that are labeled from 1 to n. You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range. Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.\n\nIncomplete Solution:\nclass Solution:\n  def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:\n    ans = [0] * n\n\n    for booking in bookings:\n      _______________\n      ans[booking[0] - 1] += booking[2]\n      if booking[1] < n:\n        ans[booking[1]] -= booking[2]\n\n    for i in range(1, n):\n      ans[i] += ans[i - 1]\n\n    return ans",
        "choices": [
            "      ans[booking[0]-1] = booking[2]",
            "      ans[booking[0] - 1] += booking[2]",
            "      ans[booking[0] - 1] = ans[booking[0] - 1] + booking[2]",
            "      ans[booking[0]-1] += 1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "23e69f79-57e9-4258-aedc-57549794850c"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
        "choices": [
            "    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    return arr[1:] + arr[:1] == sorted_array",
            "    if len(arr) == 0:\n        return True\n    min_value = min(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i][0] == min_value:\n            return True\n    return False",
            "    if len(arr) == 0:\n        return True\n    reversed_array = arr[::-1]\n    return reversed_array == sorted(reversed_array)",
            "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "6e5814fe-94ef-4159-9b1f-5a678ce8f2a9"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n 1-indexed robots, each having a position on a line, health, and movement direction. You are given 0-indexed integer arrays positions, healths, and a string directions (directions[i] is either 'L' for left or 'R' for right). All integers in positions are unique. All robots start moving on the line simultaneously at the same speed in their given directions. If two robots ever share the same position while moving, they will collide. If two robots collide, the robot with lower health is removed from the line, and the health of the other robot decreases by one. The surviving robot continues in the same direction it was going. If both robots have the same health, they are both removed from the line. Your task is to determine the health of the robots that survive the collisions, in the same order that the robots were given, i.e. final heath of robot 1 (if survived), final health of robot 2 (if survived), and so on. If there are no survivors, return an empty array. Return an array containing the health of the remaining robots (in the order they were given in the input), after no further collisions can occur. Note: The positions may be unsorted.\n\nIncomplete Solution:\n@dataclass\nclass Robot:\n  index: int\n  position: int\n  health: int\n  direction: str\n\n\nclass Solution:\n  def survivedRobotsHealths(self, positions: List[int], healths: List[int], directions: str) -> List[int]:\n    robots = sorted([Robot(index, position, health, direction)\n                     for index, (position, health, direction) in\n                     enumerate(zip(positions, healths, directions))],\n                    key=lambda robot: robot.position)\n    stack: List[Robot] = []  \n\n    for robot in robots:\n      if robot.direction == 'R':\n        stack.append(robot)\n        continue\n      _______________\n      while stack and stack[-1].direction == 'R' and robot.health > 0:\n        if stack[-1].health == robot.health:\n          stack.pop()\n          robot.health = 0\n        elif stack[-1].health < robot.health:\n          stack.pop()\n          robot.health -= 1\n        else:  \n          stack[-1].health -= 1\n          robot.health = 0\n      if robot.health > 0:\n        stack.append(robot)\n\n    stack.sort(key=lambda robot: robot.index)\n    return [robot.health for robot in stack]",
        "choices": [
            "      while stack and stack[-1].position < robot.position and robot.health > 0:",
            "      while stack and stack[-1].health < robot.health and robot.health > 0:",
            "      while stack and stack[-1].direction == 'R' and robot.health > 0:",
            "      while stack and stack[-1].direction != 'L' and robot.health > 0:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "cdfeca17-603d-47cc-b10f-5ffdd7b0a097"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom fractions import gcd\nN=int(input())\nA=list(map(int,input().split()))\ng=gcd(A[0],A[1])\nfor i in range(2,N):\n        g=gcd(g,A[i])\nprint(g)",
        "choices": [
            "Memory Limit Exceeded",
            "Compile Error",
            "Time Limit Exceeded",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "53ab2861-9cb7-4d28-827a-8ac2d203620e"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef solve(m, prefers):\n    if m == 1:\n        return 1\n\n    items = [True] * (m + 1)\n    competes = {i: 0 for i in range(1, m + 1)}\n    persons = [set() for _ in range(m + 1)]\n\n    for i, ps in enumerate(prefers):\n        item = ps[-1]\n        competes[item] += 1\n        persons[item].add(i)\n\n    ans = m\n    remain = m\n    while ans > m // remain:\n        mx = max(competes.values())\n        ans = min(ans, mx)\n        del_items = [a for a, k in competes.items() if k == mx]\n        for a in del_items:\n            items[a] = False\n            del competes[a]\n        for a in del_items:\n            pa = persons[a]\n            for p in pa:\n                pf = prefers[p]\n                while not items[pf[-1]]:\n                    pf.pop()\n                item = pf[-1]\n                persons[item].add(p)\n                competes[item] += 1\n        remain -= 1\n\n    return ans\n\n\nn, m = map(int, input().split())\nprefers = [list(reversed(list(map(int, input().split())))) for _ in range(n)]\n\nprint(solve(m, prefers))\n",
        "choices": [
            "Compile Error",
            "Runtime Error",
            "Time Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "05791a1d-5c3b-4046-97e4-777ac8213a4a"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
        "choices": [
            "    return sum([x for idx, x in enumerate(lst) if idx%2==0])",
            "    return sum([x for idx, x in enumerate(lst) if idx%2==1])",
            "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
            "    return sum([x for x in lst if x%2==1])"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e181128f-e744-4dae-8667-5658a513d05e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags. Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.\n\nIncomplete Solution:\nclass Solution:\n  def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:\n    for i, d in enumerate(sorted([c - r for c, r in zip(capacity, rocks)])):\n      _______________\n      if d > additionalRocks:\n        return i\n      additionalRocks -= d\n    return len(capacity)",
        "choices": [
            "      if d >= additionalRocks:",
            "      if not additionalRocks >= d:",
            "      if additionalRocks < d:",
            "      if d > additionalRocks:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e4a5a39e-4081-4bde-be72-97eb7fa71a7e"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
        "choices": [
            "    A = [i*i - i + 1 for i in range(1, n+1)]\n    ans = []\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n-1):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    ans.append((A[i], A[j], A[k]))\n    return len(ans)",
            "    A = [i*i - i + 1 for i in range(1, n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k]) % 2 == 0:\n                    ans.append((A[i], A[j], A[k]))\n    return len(ans)",
            "    A = [i*i + i + 1 for i in range(1, n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    ans.append((A[i], A[j], A[k]))\n    return len(ans)",
            "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "dadbfc12-2f8f-4af0-9b31-7d2ddee506ae"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a collection of numbered balls\u00a0and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow: \u200bReturn the fewest number of boxes to sort these balls following these rules.\n\nIncomplete Solution:\nclass Solution:\n  def minGroupsForValidAssignment(self, nums: List[int]) -> int:\n    count = collections.Counter(nums)\n    minFreq = min(count.values())\n\n    for groupSize in range(minFreq, 0, -1):\n      numGroups = self.getNumGroups(count, groupSize)\n      if numGroups > 0:\n        return numGroups\n\n    raise ValueError(\"Invalid argument\")\n\n  def getNumGroups(self, count: Dict[int, int], groupSize: int) -> int:\n    \"\"\"Returns the number of groups if each group's size is `groupSize` or `groupSize + 1`.\"\"\"\n    numGroups = 0\n    for freq in count.values():\n      _______________\n      a = freq // (groupSize + 1)\n      b = freq % (groupSize + 1)\n      if b == 0:\n        numGroups += a\n      elif groupSize - b <= a:\n        numGroups += a + 1\n      else:\n        return 0\n    return numGroups",
        "choices": [
            "      a = (freq - 1) // (groupSize + 1)",
            "      a = freq // groupSize",
            "      a = freq // (groupSize - 1)",
            "      a = freq // (groupSize + 1)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "633d7884-8462-4e42-9f96-3cde295bfb93"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi]. We define the right direction as positive x-axis (increasing x-coordinate) and the left direction as negative x-axis (decreasing x-coordinate). Similarly, we define the up direction as positive y-axis (increasing y-coordinate) and the down direction as negative y-axis (decreasing y-coordinate) You have to place n people, including Alice and Bob, at these points such that there is exactly one person at every point. Alice wants to be alone with Bob, so Alice will build a rectangular fence with Alice's position as the upper left corner and Bob's position as the lower right corner of the fence (Note that the fence might not enclose any area, i.e. it can be a line). If any person other than Alice and Bob is either inside the fence or on the fence, Alice will be sad. Return the number of pairs of points where you can place Alice and Bob, such that Alice does not become sad on building the fence. Note that Alice can only build a fence with Alice's position as the upper left corner, and Bob's position as the lower right corner. For example, Alice cannot build either of the fences in the picture below with four corners (1, 1), (1, 3), (3, 1), and (3, 3), because:\n\nIncomplete Solution:\nclass Solution:\n  def numberOfPairs(self, points: List[List[int]]) -> int:\n    ans = 0\n\n    points.sort(key=lambda x: (x[0], -x[1]))\n\n    for i, (_, yi) in enumerate(points):\n      maxY = -math.inf\n      for j in range(i + 1, len(points)):\n        _, yj = points[j]\n        _______________\n        if yi >= yj > maxY:\n          ans += 1\n          maxY = yj\n\n    return ans",
        "choices": [
            "        if yi >= yj > maxY:",
            "        if yj <= yi and yj > maxY:",
            "        if yi >= yj and yj > maxY:",
            "        if yi >= maxY and yi >= yj:"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "75388e1e-cee2-406d-8270-8dcfab11d29c"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nA = int(input())\nB = int(input())\n\nrist = [ A+B , A-B , A*B]\n\nrist.sort()\n\nprint(rist[3])",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "Time Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "90e1c3c7-ee82-4694-85b2-a165a7ce2862"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def subsequences(a, b, k):\n2     if k == 0:\n3         return []\n4     ret = []\n5     for i in range(a, b + 1 - k):\n6         ret.extend(\n7             [i] + rest for rest in subsequences(i + 1, b, k - 1)\n8         )\n9     return ret",
        "choices": [
            "Modify line 2:\n```return [[]]```",
            "Modify line 3:\n```ret = [[]] if k == 1 else []```",
            "Modify line 2:\n```       return [[]]```\n",
            "Modify line 1:\n```if k == 0 or b < a:```"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f5271c2b-978f-4918-a353-1778b27611a7"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array. Return the minimum size of the set so that at least half of the integers of the array are removed.\n\nIncomplete Solution:\nclass Solution:\n  def minSetSize(self, arr: List[int]) -> int:\n    n = len(arr)\n\n    count = collections.Counter(arr).most_common()\n    count.sort(key=lambda c: -c[1])\n\n    summ = 0\n    for i, c in enumerate(count):\n      summ += c[1]\n      _______________\n      if summ >= n // 2:\n        return i + 1",
        "choices": [
            "      if summ >= n / 2:",
            "      if summ >= n / 2.0:",
            "      if summ >= len(arr) // 2:",
            "      if summ >= n // 2:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a913f5e0-2ea1-4ee2-81d1-0d2b9fb6203c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree. Note:\n\nIncomplete Solution:\nclass Solution:\n  def averageOfSubtree(self, root: Optional[TreeNode]) -> int:\n    ans = 0\n\n    def dfs(root: Optional[TreeNode]) -> Tuple[int, int]:\n      nonlocal ans\n      if not root:\n        return (0, 0)\n      leftSum, leftCount = dfs(root.left)\n      rightSum, rightCount = dfs(root.right)\n      _______________\n      summ = root.val + leftSum + rightSum\n      count = 1 + leftCount + rightCount\n      if summ // count == root.val:\n        ans += 1\n      return (summ, count)\n\n    dfs(root)\n    return ans",
        "choices": [
            "      summ = root.val * leftSum * rightSum",
            "      summ = (root.val + leftSum) * rightSum",
            "      summ = root.val + leftSum + rightSum",
            "      summ = root.val + leftSum + rightSum + 1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a56a6679-d027-4755-be39-7769d4e991cc"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order. A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word. Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\n\nIncomplete Solution:\nclass Solution:\n  def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:\n    def isIsomorphic(w: str, p: str) -> bool:\n      _______________\n      return [*map(w.index, w)] == [*map(p.index, p)]\n    return [word for word in words if isIsomorphic(word, pattern)]",
        "choices": [
            "      return list(map(lambda c: w.index(c), w)) == list(map(lambda c: p.index(c), p))",
            "      return [*map(w.index, w)] == [*map(p.index, p)]",
            "      return [w.index(c) for c in w] == [p.index(c) for c in p]",
            "      return [w.find(c) for c in w] == [p.find(c) for c in p]"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "725893ea-0711-44b5-bfbb-cf2b960b6fff"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport copy\n\ndef main():\n  n,k=map(int,input().split())\n  s=input()\n  # maked group\n  t=[]\n  t.append(s[0])\n  x=s[0]\n  for i in range(1,n):\n    if x!=s[i]:\n      t.append(s[i])\n      x=s[i]\n  #print(t)\n  \n  j=0\n  while j<k:\n    if len(t)<=2:\n      print(n-1)\n      exit(0)\n    t=copy.copy(t[2:])\n    j+=1\n    \n  print(n-1-(len(t)-1))\n\n  \nif __name__=='__main__':\n  main()",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c69ba34d-01fe-4afb-bbcd-673a0977c5c5"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport collections\nimport sys\ninput=sys.stdin.readline\n\nclass BIT:\n  def __init__(self,n):\n    self.n=n+1\n    self.BIT=[0]*self.n\n  def add(self,i,x):\n    idx=i\n    while idx<self.n:\n      self.BIT[idx]+=x\n      idx+=(idx&-idx)\n  def _sum(self,i):\n    ret=0\n    idx=i\n    while idx>0:\n      ret+=self.BIT[idx]\n      idx-=(idx&-idx)\n    return ret\n  def sum(self,l,r):\n    return self._sum(r)-self._sum(l-1)\n  def value(self,i):\n    return self._sum(i)-self._sum(i-1)\n\nn,q=map(int,input().split())\narr=list(map(int,input().split()))\nquery=[]\nfor i in range(q):\n  l,r=map(int,input().split())\n  query.append((l,r,i))\nquery=sorted(query,key=lambda x:x[0])\nans=[0]*q\nbit=BIT(n)\npos_now=[-1]*(n+1)\npos_all=[[] for _ in range(n+1)]\nfor i in range(n):\n  val=arr[i]\n  if pos_now[val]==-1:\n    bit.add(i+1,1)\n    pos_now[val]=0\n  pos_all[val].append(i+1)\nfor i in range(n+1):\n  pos_all[i].append(-1)\ncnt=collections.Counter(arr)\nprev=1\nfor l,r,id in query:\n  while prev<l:\n    val=arr[prev-1]\n    if cnt[val]!=1:\n      bit.add(pos_all[val][pos_now[val]],-1)\n      if pos_all[val][pos_now[val]+1]!=-1:\n        pos_now[val]+=1\n        bit.add(pos_all[val][pos_now[val]],1)\n    prev+=1\n  ans[id]=bit.sum(l,r)\nfor val in ans:\n  print(val)",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a581eeae-592a-42ff-aca3-6892f2d25351"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nX,K,D = map(int,input().split())\nX = abs(X)\nX_div_D = X//D\n\nans_min = X % D\n\nif K <= X_div_D:\n  print(X - K * D)\nelse:\n  if (K % 2) ^ (X_div_D % 2) == 0:\n    print(ans_min)\n  else:\n    print(abs(ans_min - D))",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "640463b7-4103-4de3-aa50-0f3b820e9dde"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\nIncomplete Solution:\nclass Solution:\n  def threeSumClosest(self, nums: List[int], target: int) -> int:\n    ans = nums[0] + nums[1] + nums[2]\n\n    nums.sort()\n\n    for i in range(len(nums) - 2):\n      if i > 0 and nums[i] == nums[i - 1]:\n        continue\n      l = i + 1\n      r = len(nums) - 1\n      while l < r:\n        summ = nums[i] + nums[l] + nums[r]\n        if summ == target:\n          return summ\n        _______________\n        if abs(summ - target) < abs(ans - target):\n          ans = summ\n        if summ < target:\n          l += 1\n        else:\n          r -= 1\n\n    return ans",
        "choices": [
            "        if (summ > target) == (ans > target) and abs(summ - target) < abs(ans - target):",
            "        if math.fabs(summ - target) < math.fabs(ans - target):",
            "        if summ - target < ans - target:",
            "        if abs(summ - target) < abs(ans - target):"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "8864564f-26d2-44b5-8e60-11696053b602"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn = int(input())\nx = list(reversed(sorted(map(int,input().split()))))\na = 0\nb = 0\nfor i in range(n):\n    if i%2==0:\n        a+=x[i]\n    else:\n        b+=x[i]\nprint(a-b)",
        "choices": [
            "Internal error",
            "Compile Error",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e52c40bc-944f-4eec-9b84-23afd2b5b87f"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly. Given an integer n, return true if n is a perfect number, otherwise return false.\n\nIncomplete Solution:\nclass Solution:\n  def checkPerfectNumber(self, num: int) -> bool:\n    _______________\n    return num in {6, 28, 496, 8128, 33550336}",
        "choices": [
            "    return num in (6, 28, 496, 8128, 33550336)",
            "    return num in set([6, 28, 496, 8128, 33550336])",
            "    return num in {6, 28, 496, 8128, 33550336}"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "2d8f66c2-2c14-4307-9f05-36880bb30231"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where: Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.\n\nIncomplete Solution:\nclass Solution:\n  def canChange(self, start: str, target: str) -> bool:\n    n = len(start)\n    i = 0  \n    j = 0  \n\n    _______________\n    while i <= n and j <= n:\n      while i < n and start[i] == '_':\n        i += 1\n      while j < n and target[j] == '_':\n        j += 1\n      if i == n or j == n:\n        return i == n and j == n\n      if start[i] != target[j]:\n        return False\n      if start[i] == 'R' and i > j:\n        return False\n      if start[i] == 'L' and i < j:\n        return False\n      i += 1\n      j += 1\n\n    return True",
        "choices": [
            "    while i <= n and j <= n:",
            "    while i < n and j < n:",
            "    while i < n - 1 and j < n - 1:",
            "    while i < len(start) and j < len(target):"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1b3cf229-c441-4fb9-9797-2bbfd0f08525"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be: Notice that there could be some signs on the cells of the grid that point outside the grid. You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest. You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only. Return the minimum cost to make the grid have at least one valid path.\n\nIncomplete Solution:\nclass Solution:\n  def minCost(self, grid: List[List[int]]) -> int:\n    m = len(grid)\n    n = len(grid[0])\n    _______________\n    dirs = ((0, 1), (0, -1), (1, 0), (-1, 0))\n    dp = [[-1] * n for _ in range(m)]\n    q = collections.deque()\n\n    def dfs(i: int, j: int, cost: int) -> None:\n      if i < 0 or i == m or j < 0 or j == n:\n        return\n      if dp[i][j] != -1:\n        return\n\n      dp[i][j] = cost\n      q.append((i, j))\n      dx, dy = dirs[grid[i][j] - 1]\n      dfs(i + dx, j + dy, cost)\n\n    dfs(0, 0, 0)\n\n    cost = 0\n    while q:\n      cost += 1\n      for _ in range(len(q)):\n        i, j = q.popleft()\n        for dx, dy in dirs:\n          dfs(i + dx, j + dy, cost)\n\n    return dp[-1][-1]",
        "choices": [
            "    dirs = ((-1, 0), (0, -1), (0, 1), (1, 0))",
            "    dirs = ((0, 1), (0, -1), (1, 0), (-1, 0))",
            "    dirs = ((0, 1), (-1, 0), (0, -1), (1, 0))",
            "    dirs = ((1, 0), (0, 1), (-1, 0), (0, -1))"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "eb1c65cd-c0d7-463c-9e47-42c1b6fd96f2"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom collections import defaultdict\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nM = 998244353\nB = pow(10, 18, M)\nN = int(input())\n\ndef ext_euc(a, b):\n  x1, y1, z1 = 1, 0, a\n  x2, y2, z2 = 0, 1, b\n  while z1 != 1:\n    d, m = divmod(z2,z1)\n    x1, x2 = x2-d*x1, x1\n    y1, y2 = y2-d*y1, y1\n    z1, z2 = m, z1\n  return x1, y1\n\ndef inv_mod(a, b, m):\n  x, y = ext_euc(a, m)\n  return (x * b % m)\n\ndef mex(s):\n  for i in range(N+1):\n    if i not in s:\n      return i\n\ndef calc_grundy(e):\n  g = {}\n  sum_g = defaultdict(int)\n  sum_g[0] = inv_mod(B-1, pow(B, N+1, M)-B, M)\n  for i in range(N, 0, -1):\n    if i not in e:\n      continue\n    m = mex({g.get(j, 0) for j in e[i]})\n    if m:\n      g[i] = m\n  prev_i = 1\n  prev_W = B\n  for i in range(1, N+1):\n    if i in g:\n      W = (B * pow(B, prev_i-i, M)) % M\n      sum_g[g[i]] = (sum_g[g[i]] + W) % M\n      sum_g[0]  = (sum_g[0] - W) % M\n      prev_i, prev_W = i, W\n  \n  return sum_g\n\ndef read_edge():\n  M = int(input())\n  e = defaultdict(list)\n  for i in range(M):\n    a, b = sorted(map(int, input().split()))\n    e[a].append(b)\n  return e\n\ndef solve(N, edge):\n  sum_g = list(map(calc_grundy, edge))\n  ret = 0\n  for gx, sx in sum_g[0].items():\n    for gy, sy in sum_g[1].items():\n      gz = gx^gy\n      sz = sum_g[2][gz]\n      if sz:\n        ret = (ret + sx*sy*sz) % M\n  return ret\n\nedge = [read_edge() for i in range(3)]\n\nprint(solve(N, edge))",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "da09abde-387b-49b1-812f-6ccce509954b"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
        "choices": [
            "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
            "    dict1 = {}\n    list1 = test.split(\" \")\n    t = float('inf')\n    for i in list1:\n        if list1.count(i) < t and i != '':\n            t = list1.count(i)\n    for i in list1:\n        if list1.count(i) == t and i != '':\n            dict1[i] = t\n    return dict1",
            "    dict1 = {}\n    list1 = test.split(\" \")\n    for i in list1:\n        if i != '':\n            dict1[i] = list1.count(i)\n    return dict1",
            "    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if list1.count(i) > t and i != '':\n            t = list1.count(i)\n            dict1 = {i: t}\n    return dict1\n"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "56a4b59d-0e4b-4618-80df-829797eeecf1"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nN = int(input())\nret = 0\na = ['3','5','7']\nfor i in range(357, N+1):\n    t = list(set(str(i)))\n    t.sort()\n    if t == a:\n        ret += 1\nprint(ret)",
        "choices": [
            "Memory Limit Exceeded",
            "Compile Error",
            "Internal error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c24a74c2-88fc-4217-9e0a-f819e38d6a73"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer array nums of size n and a positive integer k. Divide the array into one or more arrays of size 3 satisfying the following conditions: Return a 2D array containing all the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.\n\nIncomplete Solution:\nclass Solution:\n  def divideArray(self, nums: List[int], k: int) -> List[List[int]]:\n    ans = []\n\n    nums.sort()\n\n    for i in range(2, len(nums), 3):\n      _______________\n      if nums[i] - nums[i - 2] > k:\n        return []\n      ans.append([nums[i - 2], nums[i - 1], nums[i]])\n\n    return ans",
        "choices": [
            "      if nums[i - 1] - nums[i - 2] > k:",
            "      if nums[i] - nums[i - 2] > k:",
            "      if nums[i] - nums[i - 1] > k:",
            "      if nums[i] + nums[i - 2] > 2 * k:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "6f3ca85e-bb47-4f67-9ff6-e69923c1e939"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nx = ['ab', 'cd']\nprint(list(map(upper, x)))",
        "choices": [
            "[\u2018AB\u2019, \u2018CD\u2019]",
            "[\u2018ab\u2019, \u2018cd\u2019]",
            "error",
            "none of the mentioned"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "78712baf-68a8-46cc-9b62-0439107b4a99"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
        "choices": [
            "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 1:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)",
            "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n    return (even_count, odd_count)",
            "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)",
            "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "cd2e2fa9-21ea-4fe6-b983-e02a89dfedb1"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person. A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true: Otherwise, x will send a friend request to y. Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself. Return the total number of friend requests made.\n\nIncomplete Solution:\nclass Solution:\n  def numFriendRequests(self, ages: List[int]) -> int:\n    ans = 0\n    count = [0] * 121\n\n    for age in ages:\n      count[age] += 1\n\n    for i in range(15, 121):\n      _______________\n      ans += count[i] * (count[i] - 1)\n\n    for i in range(15, 121):\n      for j in range(i // 2 + 8, i):\n        ans += count[i] * count[j]\n\n    return ans",
        "choices": [
            "      ans += math.comb(count[i], 2)",
            "      ans += count[i] * (count[i] - 1) // 2",
            "      ans += count[i] * (count[i] - 1)",
            "      ans += count[i] * count[i]"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c174e930-89e6-4708-8d4a-41b698c925ef"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free. The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought. Given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.\n\nIncomplete Solution:\nclass Solution:\n  def minimumCost(self, cost: List[int]) -> int:\n    _______________\n    return sum(cost) - sum(sorted(cost)[-3::-3])",
        "choices": [
            "    return sum(cost) - sum(sorted(cost)[::-3][2:])",
            "    return sum(cost) - sum(sorted(cost)[2::3])",
            "    return sum(cost) - sum(sorted(cost)[-3::-3])",
            "    return sum(cost) - sum(sorted(cost)[::3][2:])"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "db62936e-f728-4b84-a436-05ede56e9754"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. Return the array in the form [x1,y1,x2,y2,...,xn,yn].\n\nIncomplete Solution:\nclass Solution:\n  def shuffle(self, nums: List[int], n: int) -> List[int]:\n    ans = []\n    for a, b in zip(nums[:n], nums[n:]):\n      _______________\n      ans.append(a)\n      ans.append(b)\n    return ans",
        "choices": [
            "      ans.append(a)",
            "      ans.insert(len(ans), a)",
            "      ans += [a]",
            "      ans.extend([a])"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "49574e03-beb0-4de9-a50d-ad43613b58d4"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\n\nIncomplete Solution:\nclass Solution:\n  def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n    summ = sum(nums)\n    if summ % k != 0:\n      return False\n\n    target = summ // k  \n    if any(num > target for num in nums):\n      return False\n\n    def dfs(s: int, remainingGroups: int, currSum: int, used: int) -> bool:\n      if remainingGroups == 0:\n        return True\n      if currSum > target:\n        return False\n      if currSum == target:  \n        return dfs(0, remainingGroups - 1, 0, used)\n\n      for i in range(s, len(nums)):\n        if used >> i & 1:\n          continue\n        _______________\n        if dfs(i + 1, remainingGroups, currSum + nums[i], used | 1 << i):\n          return True\n\n      return False\n\n    nums.sort(reverse=True)\n    return dfs(0, k, 0, 0)",
        "choices": [
            "        if dfs(i, remainingGroups - 1, currSum + nums[i], used | 1 << i):",
            "        if dfs(i, remainingGroups, currSum + nums[i], used | 1 << i):",
            "        if dfs(i + 1, remainingGroups, currSum + nums[i], used | 1 << i):",
            "        if dfs(i - 1, remainingGroups, currSum + nums[i], used | 1 << i):"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "0731cb97-c4e4-4ab0-9eb3-8224d986bc04"
    },
    {
        "question": "Question: What will be the output of the following Python code?\n>>> import collections\n>>> a=dict()\n>>> a=collections.defaultdict(str)\n>>> a['A']",
        "choices": [
            "An exception is thrown since the dictionary is empty",
            "\u2018 \u2018",
            "\u2018A\u2019",
            "0"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "fe4d0faf-2d0f-4ecc-9e75-9ce1264781fd"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn, a, b = map(int, input().split())\nmod = int(1e+9) + 7\ndef extgcd(a, b):\n  if b == 0:\n    return 1, 0\n  else:\n    x, y, u, v, k, l = 1, 0, 0, 1, a, b\n    while l != 0:\n      x, y, u, v = u, v, x - u * (k // l), y - v * (k // l)\n      k, l = l, k % l\n    return x\ndef inved(x):\n  y = 1\n  p = mod - 2\n  base = x\n  while p != 0:\n    if p % 2 == 1:\n      y *= base\n      y %= mod\n    base *= base\n    base %= mod\n    p //= 2\n  return y\ndef doubling(N, M):\n  y = 1\n  base = N\n  while M != 0:\n    if M % 2 == 1:\n      y *= base\n      y %= mod\n    base *= base\n    base %= mod\n    M //= 2\n  return y\nS = [inved(i+1) for i in range(b)]\nA = doubling(2, n)\nA = (A - 1) % mod\nproda, prodb = 1, 1\nfor i in range(a):\n  proda *= ((n - i) * S[i]) % mod\n  proda %= mod\nfor i in range(b):\n  prodb *= ((n - i) * S[i]) % mod\n  prodb %= mod\nprint((A - proda - prodb) % mod)\n",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "92e57489-2488-41fe-8506-a1d024a9783f"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nl1=[10, 20, 30]\nl2=[-10, -20, -30]\nl3=[x+y for x, y in zip(l1, l2)]\nl3",
        "choices": [
            "Error",
            "0",
            "[-20, -60, -80]",
            "[0, 0, 0]"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "444f689d-9e9d-4438-ab76-677c659d44c6"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone. A number is valid if each digit remains a digit after rotation. For example: Given an integer n, return the number of good integers in the range [1, n].\n\nIncomplete Solution:\nclass Solution:\n  def rotatedDigits(self, n: int) -> int:\n    def isGoodNumber(i: int) -> bool:\n      isRotated = False\n\n      for c in str(i):\n        if c == '0' or c == '1' or c == '8':\n          continue\n        _______________\n        if c == '2' or c == '5' or c == '6' or c == '9':\n          isRotated = True\n        else:\n          return False\n\n      return isRotated\n\n    return sum(isGoodNumber(i) for i in range(1, n + 1))",
        "choices": [
            "        if c in '2569':",
            "        if c in {'2', '5', '6', '9'}:",
            "        if c == '2' or c == '5' or c == '6' or c == '9':",
            "        if c in ['2', '5', '6', '9']:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f8b08a25-2ed4-4dc7-b5ac-783309a33174"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nx = [[0], [1]]\nprint((' '.join(list(map(str, x))),))",
        "choices": [
            "(\u2018[0] [1]\u2019,)",
            "(\u201901\u2019)",
            "[0] [1]",
            "01"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1077c221-bd0e-4e85-8abe-d3462b81f2c0"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
        "choices": [
            "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort(reverse=True)  \n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        if i < len(odds):\n            ans.append(odds[i])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    return ans",
            "    odds = l[1::2]\n    odds.sort()\n    ans = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            ans.append(l[i])\n        else:\n            ans.append(odds.pop(0))\n    return ans"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e4dc4135-739e-4c2d-8a54-75075838f292"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn,m = map(int,input().split())\na = [list(map(int,input().split())) for i in range(n)]\ncount = [0]*(m+1)\nfor i in a:\n    count[i[0]] += 1\nl = [0]*n\nans = max(count)\ns = set()\nfor i in range(n-1):\n    M = max(count)\n    ind = count.index(M)\n    s.add(ind)\n\n    for j in range(n):\n        if a[j][l[j]] == ind:\n\n            count[ind] -= 1\n            while a[j][l[j]] in s:\n                l[j] += 1\n            count[a[j][l[j]]] += 1\n    ans = min(ans,max(count))\n\nprint(ans)",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f453785d-4527-407a-b5c1-a1773a591f81"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn=int(input())\ns=input()\ni=0\nans=0\nwhile i<len(s):\n  for j in range(i+1,len(s)):\n    k=0\n    while i+k<j and j+k<len(s):\n      if s[i+k]==s[j+k]:\n        k+=1\n      else:\n        break\n    if ans<k:\n      ans=k\n  i+=1\nprint(ans)",
        "choices": [
            "Internal error",
            "Runtime Error",
            "Time Limit Exceeded",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9de99d8f-8ae2-46cb-ad00-df9fe100b359"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string word containing distinct lowercase English letters. Telephone keypads have keys mapped with distinct collections of lowercase English letters, which can be used to form words by pushing them. For example, the key 2 is mapped with [\"a\",\"b\",\"c\"], we need to push the key one time to type \"a\", two times to type \"b\", and three times to type \"c\" . It is allowed to remap the keys numbered 2 to 9 to distinct collections of letters. The keys can be remapped to any amount of letters, but each letter must be mapped to exactly one key. You need to find the minimum number of times the keys will be pushed to type the string word. Return the minimum number of pushes needed to type word after remapping the keys. An example mapping of letters to keys on a telephone keypad is given below. Note that 1, *, #, and 0 do not map to any letters.\n\nIncomplete Solution:\nclass Solution:\n  def minimumPushes(self, word: str) -> int:\n    _______________\n    freqs = sorted(collections.Counter(word).values(), reverse=True)\n    return sum(freq * (i // 8 + 1) for i, freq in enumerate(freqs))",
        "choices": [
            "    freqs = sorted(collections.Counter(word).values(), reverse=True)",
            "    freqs = sorted((x for x in collections.Counter(word).values()), reverse=True)",
            "    freqs = sorted(list(collections.Counter(word).values()), reverse=True)",
            "    freqs = sorted(dict(collections.Counter(word)).values(), reverse=True)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d3f71790-9580-4ac0-b437-932a80864ebb"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens. You are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial. A garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following: Return the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.\n\nIncomplete Solution:\nclass Solution:\n  def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:\n    n = len(flowers)\n\n    flowers = [min(flower, target) for flower in flowers]\n    flowers.sort()\n\n    if flowers[0] == target:\n      return n * full\n\n    if newFlowers >= n * target - sum(flowers):\n      _______________\n      return max(n * full, (n - 1) * full + (target - 1) * partial)\n\n    ans = 0\n    leftFlowers = newFlowers\n    cost = [0] * n\n\n    for i in range(1, n):\n      cost[i] = cost[i - 1] + i * (flowers[i] - flowers[i - 1])\n\n    i = n - 1  \n    while flowers[i] == target:\n      i -= 1\n\n    while leftFlowers >= 0:\n      j = min(i + 1, bisect_right(cost, leftFlowers))\n      minIncomplete = flowers[j - 1] + (leftFlowers - cost[j - 1]) // j\n      ans = max(ans, (n - 1 - i) * full + minIncomplete * partial)\n      leftFlowers -= max(0, target - flowers[i])\n      i -= 1\n\n    return ans",
        "choices": [
            "      return max((n - 1) * full + target * partial, n * full)",
            "      return max(n * full, (n - 1) * full + (target - 1) * partial)",
            "      return max(n * partial, (n - 1) * full + target * partial)",
            "      return max(n * full, n * full - (target - 1) * partial)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "230e2bd9-9a04-44be-8cfc-09ec488c643e"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        List<Long> list = new ArrayList<>();\n        for(long i=0; i<n; i++) {\n            list.add(sc.nextLong());\n        }\n        if(n <= k) {\n            System.out.println(0);\n            return;\n        }\n        Collections.sort(list);\n        long total = 0;\n        for(int i = n; i >= 0; i--, k--) {\n            if(k >= 0) continue;\n            total += list.get(i);\n        }\n        System.out.println(total);\n    }\n}",
        "choices": [
            "Runtime Error",
            "No abnormally found",
            "Internal error",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "5ee9354f-f5ff-4621-9015-809fcdade096"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n// The following implementation assumes that the activities \n// are already sorted according to their finish time \nimport java.util.*; \nimport java.lang.*; \nimport java.io.*; \n  \nclass ActivitySelection \n{ \n    // Prints a maximum set of activities that can be done by a single \n    // person, one at a time. \n    //  n   -->  Total number of activities \n    //  s[] -->  An array that contains start time of all activities \n    //  f[] -->  An array that contains finish time of all activities \n    public static void printMaxActivities(int s[], int f[], int n) \n    { \n    int i, j; \n       \n    System.out.print(\"Following activities are selected : n\"); \n       \n    // The first activity always gets selected \n    i = 0; \n    System.out.print(i+\" \"); \n       \n    // Consider rest of the activities \n    for (j = 1; j < n; j++) \n    { \n         // If this activity has start time greater than or \n         // equal to the finish time of previously selected \n         // activity, then select it \n         if (s[j] >= f[i]) \n         { \n              System.out.print(j+\" \"); \n              i = j; \n          } \n     } \n    } \n       \n    // driver program to test above function \n    public static void main(String[] args) \n    { \n    int s[] =  {1, 3, 0, 5, 8, 5}; \n    int f[] =  {2, 4, 6, 7, 9, 9}; \n    int n = s.length; \n         \n    printMaxActivities(s, f, n); \n    } \n      \n} ",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "3269da3a-1278-4133-b18d-3c4141f70c39"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n \n        int N = sc.nextInt();\n        int T = sc.nextInt();\n        int result = 1001;\n        for (int i=0;i<n;i++){\n            int c = sc.nextInt();\n            if (sc.nextInt()<=T){\n                result = Math.min(c,result);\n        }\n        if (result==1001){\n            System.out.println(\"TLE\");\n        }else{ \n            System.out.println(result);\n    }\n}",
        "choices": [
            "No abnormally found",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "63377179-d4e8-42e0-a000-329c2da68522"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 import java.util.function.BinaryOperator;\n3 public class RPN_EVAL {\n4     public static Double rpn_eval(ArrayList tokens) {\n5         Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n6         op.put(\"+\", (a, b) -> a + b);\n7         op.put(\"-\", (a, b) -> a - b);\n8         op.put(\"*\", (a, b) -> a * b);\n9         op.put(\"/\", (a, b) -> a / b);\n10         Stack stack = new Stack();\n11         for (Object token : tokens) {\n12             if (Double.class.isInstance(token)) {\n13                 stack.push((Double) token);\n14             } else {\n15                 token = (String) token;\n16                 Double a = (Double) stack.pop();\n17                 Double b = (Double) stack.pop();\n18                 Double c = 0.0;\n19                 BinaryOperator<Double> bin_op = op.get(token);\n20                 c = bin_op.apply(a,b);\n21                 stack.push(c);\n22             }\n23         }\n24         return (Double) stack.pop();\n25     }\n26 }",
        "choices": [
            "Modify line 8:\n```op.put(\"*\", (a, b) -> a * b);```",
            "Modify line 9:\n```    op.put(\"/\", (a, b) -> b != 0 ? a / b : Double.NaN);```",
            "Modify line 6:\n```op.put(\"+\", (Double a, Double b) -> a + b);```",
            "Modify line 19:\n```               c = bin_op.apply(b,a);```\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "c671624f-259d-4d5e-823d-8255b3777015"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\nclass Main{\n\tpublic static void main(String[] args){\n    \tScanner sc = new Scanner(System.in);\n      \tint[] hoge = sc.nextLine(\"\");\n      \tint temp = 0;\n      \tString str = \"Good\";\n      \tfor(int i = 0; i < 4; i++){\n        \tif(temp==hoge[i]){\n            \tstr = \"Bad\";\n            }\n          \ttemp = hoge[i];\n        }\n      \n      \tSystem.out.println(str);\n    }\n}",
        "choices": [
            "No abnormally found",
            "Compile Error",
            "Memory Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "c9f3b8b9-6314-4648-879b-dd78838f4bdc"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int Q = sc.nextInt();\n    int H = sc.nextInt();\n    int S = sc.nextInt();\n    int D = sc.nextInt();\n    int N = sc.nextInt();\n    int Sl = Math.min(Math.min(4*Q, 2*H), S);\n    if (2*Sl > D) {\n      System.out.println((long)N/2*D + (N%2 == 1 ? Sl : 0));\n    } else {\n      System.out.println((long)N*Sl);\n    }\n  }\n}",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "3edd2ae9-b8f3-4a60-8776-13a426906d47"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\npublic class Main {\n    public static void main() {\n        Scanner sc = new Scanner(System.in);\n        int R = sc.nextInt();\n    \n        double circumference;\n        double PI = 3.14159265;\n        circumference = 2 * PI * R;\n        System.out.println(circumference);\n    }\n}",
        "choices": [
            "Runtime Error",
            "Compile Error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "56e6f196-b2ed-4931-afeb-2f591f6a0197"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int n = scan.nextInt();scan.nextLine();\n        String[] str = new String[n];\n        for(i = 0; i < n; i++) {\n            str[i] = scan.nextLine();\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if (i != j && str[i].equals(str[j])) {\n                    System.out.println(\"No\");\n                    return;\n                }\n            }\n        }\n        for(int i = 0; i < n-1; i++) {\n            if (str[i].charAt(str[i].length()-1) != str[i+1].charAt(0)) {\n                System.out.println(\"No\");\n                return;\n            }\n        }\n        System.out.println(\"Yes\");\n    }\n}",
        "choices": [
            "Internal error",
            "Compile Error",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "33856202-f359-4593-8bb2-6ee825f0a428"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long a = sc.nextLong();\n        long b = sc.nextLong();\n\n        int K_MAX = (int) (Math.log(b) / Math.log(2)) + 1;\n        long[] digits = new long[K_MAX];\n        for (int k = 0; k < K_MAX; k++) {\n            if (k == 0) {\n                digits[k] = calcDigitFor0(a, b, k);\n            } else {\n                digits[k] = calcDigit(a, b, k);\n            }\n        }\n\n        long ans = 0;\n        for (int k = 0; k < K_MAX; k++) {\n            ans += Math.pow(2, k) * digits[k];\n        }\n        System.out.println(ans);\n    }\n\n    static long calcDigit(long a, long b, int k) {\n        long target = (long) Math.pow(2, k + 1);\n        long center = (long) Math.pow(2, k);\n        long restA = a % target;\n        long restB = b % target;\n        if (restA < restB) {\n            if (restB < center) {\n                return 0;\n            } else if (restA < center && restB >= center) {\n                return (restB - center + 1) % 2;\n            } else {\n                return (restB - restA + 1) % 2;\n            }\n        } else if (restA == restB) {\n            if (restA >= center) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else {\n            if (restA < center) {\n                return 0;\n            } else if (restB < center && restA >= center) {\n                return (target - restA) % 2;\n            } else {\n                return ((target - restA) + restB - center + 1) % 2;\n            }\n        }\n    }\n\n\n    static long calcDigitFor0(long a, long b, int k) {\n        long target = (long) Math.pow(2, 2);\n        long restA = a % target;\n        long restB = b % target;\n        if (restA == restB) {\n            if (restA == 1 || restA == 3) {\n                return 1;\n            } else {\n                return 0;\n            }\n        } else if (restA < restB) {\n            if (restA == 0) {\n                if (restB == 1) {\n                    return 1;\n                } else if (restB == 2) {\n                    return 1;\n                } else if (restB == 3) {\n                    return 0;\n                }\n            } else if (restA == 1) {\n                if (restB == 2) {\n                    return 1;\n                } else if (restB == 3) {\n                    return 0;\n                }\n            } else if (restA == 2) {\n                return 1;\n            }\n        } else {\n            if (restA == 3) {\n                if (restB == 2) {\n                    return 0;\n                } else if (restB == 1) {\n                    return 0;\n                } else if (restB == 0) {\n                    return 1;\n                }\n            } else if (restA == 2) {\n                if (restB == 1) {\n                    return 0;\n                } else if (restB == 0) {\n                    return 1;\n                }\n            } else if (restA == 1) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n}\n",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "eca252a7-f226-4cd8-ac4e-a5ff33fa3856"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int N = sc.nextInt();\n    int M = sc.nextInt();\n    int[] v = new int[N];\n    for (int i = 0; i < M; i++) {\n      v[sc.nextInt()-1]++;\n      v[sc.nextInt()-1]++;\n    }\n    boolean ans = true;\n    for (int i = 0; i < N; i++) {\n      if (v[i]%2 != 0) {\n        ans = false;\n        break;\n      }\n    }\n    System.out.println(ans ? \"YES\" : \"NO\");\n  }\n}",
        "choices": [
            "No abnormally found",
            "Internal error",
            "Compile Error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "8973ac2a-4531-4d97-a35d-1fdec5061fc2"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.*;\nimport java.util.*;\n \npublic class Main {\n    static final long MOD = 1000000007L;\n    //static final long MOD = 998244353L;\n    static final int INF = 50000000;\n    static final int NINF = -500000000;\n\n    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        PrintWriter pw = new PrintWriter(System.out);\n        \n        int N = sc.ni();\n        long[][] nums = new long[N][2];\n        TreeSet<Long> Ys = new TreeSet<Long>();\n        for (int i = 0; i < N; i++) {\n        \tnums[i] = new long[] {sc.nl(),sc.nl()};\n        \tYs.add(nums[i][1]);\n        }\n        sort(nums);\n        HashMap<Long,Integer> hm = new HashMap<Long,Integer>();\n        int T = 0;\n        for (long y: Ys) {\n        \thm.put(y,T);\n        \tT++;\n        }\n        \n        SegmentTree st1 = new SegmentTree(T);\n        SegmentTree st2 = new SegmentTree(T);\n        for (int i = 0; i < T; i++) {\n        \tst1.update(i, -100000000000L);\n        \tst2.update(i, -100000000000L);\n        }\n        long ans = 0;\n        for (long[] p: nums) {\n        \tint index = hm.get(p[1]);\n        \tlong v1 = p[1]-p[0];\n        \tlong v2 = 0-p[0]-p[1];\n        \tlong val = Math.max(st1.query(index,T-1)-v1,st2.query(0, index)-v2);\n        \tans = Math.max(ans, val);\n        \tif (v1 > st1.arr[index])\n        \t\tst1.update(index, v1);\n        \tif (v2 > st2.arr[index])\n        \t\tst2.update(index, v2);\n        }\n        pw.println(ans);\n        pw.close();\n    }\n    \n    //No lazy propagation. 0 indexed. Very fast.\n    static class SegmentTree {\n    \tpublic long[] tree;\n    \tpublic long[] arr;\n    \tpublic long NONE;\n    \tpublic int N;\n\n    \t//Zero initialization\n    \tpublic SegmentTree(int n) {\n    \t\tN = n;\n    \t\ttree = new long[4*N+1];\n    \t\tarr = new long[N];\n    \t\tNONE = Long.MIN_VALUE; //set this manually (Long.MIN_VALUE for max-st, Long.MAX_VALUE for min-st, 0 for sum,xor-st, etc.)\n    \t}\n\n    \tpublic long merge(long a, long b) {\n    \t\treturn Math.max(a, b); //set this manually\n    \t}\n\n    \tpublic long query(int i, int j) {\n    \t\treturn query(0,0,N-1,i,j);\n    \t}\n\n    \tpublic void update(int arrIndex, long val) {\n    \t\tarr[arrIndex] = val;\n    \t\tupdate(0,0,N-1,arrIndex,val);\n    \t}\n\n    \tprivate long query(int treeIndex, int lo, int hi, int i, int j) {\n    \t\t// query for arr[i..j]\n    \t\tif (lo > j || hi < i)\n    \t\t\treturn NONE;\n    \t\tif (i <= lo && j >= hi)\n    \t\t\treturn tree[treeIndex];\n    \t\tint mid = lo + (hi - lo) / 2;\n\n    \t\tif (i > mid)\n    \t\t\treturn query(2 * treeIndex + 2, mid + 1, hi, i, j);\n    \t\telse if (j <= mid)\n    \t\t\treturn query(2 * treeIndex + 1, lo, mid, i, j);\n\n    \t\tlong leftQuery = query(2 * treeIndex + 1, lo, mid, i, mid);\n    \t\tlong rightQuery = query(2 * treeIndex + 2, mid + 1, hi, mid + 1, j);\n\n    \t\t// merge query results\n    \t\treturn merge(leftQuery, rightQuery);\n    \t}\n\n    \tprivate void update(int treeIndex, int lo, int hi, int arrIndex, long val) {\n    \t\tif (lo == hi) {\n    \t\t\ttree[treeIndex] = val;\n    \t\t\treturn;\n    \t\t}\n\n    \t\tint mid = lo + (hi - lo) / 2;\n\n    \t\tif (arrIndex > mid)\n    \t\t\tupdate(2 * treeIndex + 2, mid + 1, hi, arrIndex, val);\n    \t\telse if (arrIndex <= mid)\n    \t\t\tupdate(2 * treeIndex + 1, lo, mid, arrIndex, val);\n\n    \t\t// merge updates\n    \t\ttree[treeIndex] = merge(tree[2 * treeIndex + 1], tree[2 * treeIndex + 2]);\n    \t}\n    }\n    \n    public static void sort(long[][] arr) {\n    \t//Sort an array (immune to quicksort TLE)\n    \tRandom rgen = new Random();\n    \tfor (int i = 0; i < arr.length; i++) {\n    \t\tint randomPosition = rgen.nextInt(arr.length);\n    \t\tlong[] temp = arr[i];\n    \t\tarr[i] = arr[randomPosition];\n    \t\tarr[randomPosition] = temp;\n    \t}\n    \tArrays.sort(arr, new Comparator<long[]>() {\n    \t\t@Override\n    \t\tpublic int compare(long[] arr1, long[] arr2) {\n    \t\t\tif (arr1[0] > arr2[0])\n    \t\t\t\treturn 1;\n    \t\t\telse\n    \t\t\t\treturn -1;\n    \t\t\t//Ascending order.\n    \t\t}\n    \t});\n    }\n    \n    static class FastScanner {\n        BufferedReader br;\n        StringTokenizer st;\n \n        public FastScanner() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n \n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n \n        int ni() {\n            return Integer.parseInt(next());\n        }\n \n        long nl() {\n            return Long.parseLong(next());\n        }\n \n        double nd() {\n            return Double.parseDouble(next());\n        }\n \n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n}",
        "choices": [
            "Runtime Error",
            "Memory Limit Exceeded",
            "Internal error",
            "Compile Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "1c1b39eb-f737-425a-8c3c-1c370822e08e"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong n = scan.nextLong();\n\t\tString[] list = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\n\t\t\t\t\t\t\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\n\t\t\t\t\t\t\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tint exp = 0;\n\t\tString name = \"\";\n\t\t\n\t\tlong pow = 0;\n\t\tfor(int i=1;i<=12;i++) {\n\t\t\tif(pow < n) {\n\t\t\t\tpow = (long) (pow + Math.pow(26, i));\n\t\t\t}else {\n\t\t\t\texp = i-1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong s = 0;\n\t\tString[] namelist = new String[exp];\n\t\tfor(int j=0;j<exp;j++) {\n\t\t\tif(n > 26) {\n\t\t\t\ts = n % 26;\n\t\t\t\tn = n / 26;\n\t\t\t\tif(s == 0) {\n\t\t\t\t\ts = 26;\n\t\t\t\t\tn = n - 1;\n\t\t\t\t}\n\t\t\t\tnamelist[j] = list[(int) (s-1)];\n\t\t\t}else {\n\t\t\t\tnamelist[j] = list[(int) (n-1)];\n\t\t\t}\n\t\t}\n\t\tfor(int k=exp-1;k>=0;k--) {\n\t\t\tname = name + namelist[k];\n\t\t}\n\t\tSystem.out.println(name);\n\t}\n\n}",
        "choices": [
            "Internal error",
            "Compile Error",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "3b318bcd-06ee-4433-9f64-7bf3a941b64e"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\npackage beginner137.E;\n\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tstatic final int INF_COIN = 100000001;\n\tstatic final long INF_DIST = 5000000000000000000L;\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\tString[] firstArr = sc.nextLine().split(\" \");\n\t\tint n = Integer.parseInt(firstArr[0]);\n\t\tint m = Integer.parseInt(firstArr[1]);\n\t\tint p = Integer.parseInt(firstArr[2]);\n\t\t\n\t\tint[][] edgeArr = new int[n][n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tfor(int j = 0; j < n;j++) {\n\t\t\t\tedgeArr[i][j] = INF_COIN;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++) {\n\t\t\tString[] edgeStrArr = sc.nextLine().split(\" \");\n\t\t\tint a = Integer.parseInt(edgeStrArr[0]);\n\t\t\tint b = Integer.parseInt(edgeStrArr[1]);\n\t\t\tint coin = (-1)* (Integer.parseInt(edgeStrArr[2]) - p);\n\t\t\tedgeArr[a-1][b-1] = coin;\n\t\t}\n\t\t\n\t\tsc.close();\n\t\t\n\t\t// 1\u304b\u3089\u5230\u9054\u3067\u304d\u306a\u3044\u70b9\u3092\u898b\u3064\u3051\u308b\n\t\tint[] arriveArr = new int[n];\n\t\tArrayDeque<Integer> queue = new ArrayDeque<>();\n\t\tqueue.push(new Integer(0));\n\t\tarriveArr[0] = 1;\n\t\twhile(!queue.isEmpty()) {\n\t\t\tint nodeNo = queue.pop();\n\t\t\tint[] nowEdgeArr = edgeArr[nodeNo];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tif(nowEdgeArr[i] < INF_COIN) {\n\t\t\t\t\tif(arriveArr[i] == 0) {\n\t\t\t\t\t\tqueue.push(new Integer(i));\n\t\t\t\t\t\tarriveArr[i] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// \u30b4\u30fc\u30eb\u306b\u305f\u3069\u308a\u7740\u3051\u306a\u3044\u70b9\u3092\u898b\u3064\u3051\u308b\n\t\tint[] reachableArr = new int[n];\n\t\tqueue = new ArrayDeque<>();\n\t\tqueue.push(new Integer(n - 1));\n\t\treachableArr[n - 1] = 1;\n\t\twhile(!queue.isEmpty()) {\n\t\t\tint endNodeNo = queue.pop();\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tif(edgeArr[i][endNodeNo] < INF_COIN) {\n\t\t\t\t\tif(reachableArr[i] == 0) {\n\t\t\t\t\t\tqueue.push(new Integer(i));\n\t\t\t\t\t\treachableArr[i] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tfor(int i = 0; i < n; i++) {\n//\t\t\tSystem.out.println(Arrays.toString(edgeArr[i]));\n//\t\t}\n\t\t\n\t\t\n\t\tArrayList<ArrayList<Integer>> edgeMtr = new ArrayList<>();\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tArrayList<Integer> edgeList = new ArrayList<>();\n\t\t\tedgeMtr.add(edgeList);\n\t\t\tif(arriveArr[i] == 0 || reachableArr[i] == 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(edgeArr[i][j] >= INF_COIN || arriveArr[j] == 0 || reachableArr[j] == 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tedgeList.add(j);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong[] distArr = new long[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tdistArr[i] = INF_DIST;\n\t\t}\n\t\tdistArr[0] = 0;\n\t\tfor(int i  = 0; i < n; i++) {\n\t\t\tfor(int k = 0 ; k < n;k++) {\n\t\t\t\tArrayList<Integer> edgeList = edgeMtr.get(k);\n\t\t\t\tfor(int j = 0; j < edgeList.size();j++) {\n\t\t\t\t\tint endEdge = edgeList.get(j);\n\t\t\t\t\tint edge = edgeArr[k][endEdge];\n\t\t\t\t\tif(distArr[k] != INF_DIST && distArr[endEdge] > distArr[k] + edge){\n\t\t\t\t\t\tif(i == n - 1) {\n\t\t\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdistArr[endEdge] = distArr[k] + edge;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong maxCoin = distArr[n - 1] * (-1);\n\t\tif(maxCoin < 0) {\n\t\t\tSystem.out.println(0);\n\t\t}else {\n\t\t\tSystem.out.println(maxCoin);\n\t\t}\n\t}\n}\n",
        "choices": [
            "Runtime Error",
            "Internal error",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "5f244f46-9433-4636-86a1-76d7732e22d2"
    },
    {
        "question": "Question: What will be the output of the following Java program?\n    class newthread implements Runnable     {\tThread t;        newthread()         {            t = new Thread(this,\"New Thread\");            t.start();\t}\tpublic void run()        {            t.setPriority(Thread.MAX_PRIORITY);\t            System.out.println(t);\t}    }    class multithreaded_programing     {        public static void main(String args[])         {            new newthread();                }    }",
        "choices": [
            "Thread[New Thread,0,main]",
            "Thread[New Thread,1,main]",
            "Thread[New Thread,5,main]",
            "Thread[New Thread,10,main]"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "9a36a616-b6ac-423c-bc57-b91fafa54b10"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 public class NEXT_PERMUTATION {\n3     public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n4         for (int i=perm.size()-2; i!=-1; i--) {\n5             if (perm.get(i) < perm.get(i+1)) {\n6                 for (int j=perm.size()-1; j!=i; j--) {\n7                     if (perm.get(j) < perm.get(i)) {\n8                         ArrayList<Integer> next_perm = perm;\n9                         int temp_j = perm.get(j);\n10                         int temp_i = perm.get(i);\n11                         next_perm.set(i,temp_j);\n12                         next_perm.set(j,temp_i);\n13                         ArrayList<Integer> reversed = new ArrayList<Integer>(100);\n14                         for (int k=next_perm.size()-1; k!=i; k--) {\n15                             reversed.add(next_perm.get(k));\n16                         }\n17                         int q = i + 1;\n18                         for (Integer replace : reversed) {\n19                             next_perm.set(q, replace);\n20                             q++;\n21                         }\n22                         return next_perm;\n23                     }\n24                 }\n25             }\n26         }\n27         return new ArrayList<Integer>();\n28     }\n29 }",
        "choices": [
            "Modify line 6:\n```for (int j = perm.size() - 1; j > i; j--) {```",
            "Modify line 4:\n```        for (int i=perm.size()-1; i>0; i--) {```",
            "Modify line 6:\n```                   if (perm.get(j) > perm.get(i)) {```\n",
            "Modify line 7:\n```if (perm.get(j) > perm.get(i)) {```"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "609983e8-9a1c-442f-915a-03591757d282"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\nclass A{\n\tpublic static void main(String[] args) {\n\t\tScanner fs = new Scanner(System.in);\n\t\tint n = fs.nextInt();\n\t\tif(n == 1)System.out.println(\"Hello World\");\n\t\telse {\n\t\t\tint a = fs.nextInt(),b = fs.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\tfs.close();\n\t}\n}",
        "choices": [
            "Runtime Error",
            "Compile Error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "43a74bcc-9acd-4189-a010-cf0eab326a8a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc= new Scanner(System.in);\n        String S = sc.nextLine();\n        long K = sc.nextLong();\n        int notone=-1;\n        int notoneindex=-1;\n        int[] arr=new int[100];\n        for(int i=0;i<S.length();i++){\n            arr[i]=S.charAt(i)-'0';\n        }\n        for(int i=0;i<S.length();i++){\n            if(arr[i]!=1){\n                notone=arr[i];\n                notoneindex=i;\n                break;\n            }\n        }\n        if(notone==-1){\n            System.out.println(\"1\");\n        }else if(K<=notoneindex){\n            System.out.println(\"1\");\n        }else{\n            System.out.println(notone);\n        }\n    }\n}\n",
        "choices": [
            "Memory Limit Exceeded",
            "Compile Error",
            "Internal error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "4fd9535d-af2b-4975-9619-9ca0e3420be2"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled: Return true if you can reach index s.length - 1 in s, or false otherwise.\n\nIncomplete Solution:\nclass Solution:\n  def canReach(self, s: str, minJump: int, maxJump: int) -> bool:\n    count = 0\n    _______________\n    dp = [True] + [False] * (len(s) - 1)\n\n    for i in range(minJump, len(s)):\n      count += dp[i - minJump]\n      if i - maxJump > 0:\n        count -= dp[i - maxJump - 1]\n      dp[i] = count and s[i] == '0'\n\n    return dp[-1]",
        "choices": [
            "    dp = [True] * 1 + [False] * (len(s) - 1)",
            "    dp = [True] + [False] * (len(s) - 1)\ndp[0] = True",
            "    dp = [True] + [False] * (len(s) - 1)",
            "    dp = [True for _ in range(1)] + [False] * (len(s) - 1)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "6916c34e-9a78-4077-b79a-b8bc4dd4c7ff"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day. Initially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n: Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 10**9 + 7.\n\nIncomplete Solution:\nclass Solution:\n  def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:\n    kMod = 1_000_000_007\n    n = len(nextVisit)\n    dp = [0] * n\n\n    for i in range(1, n):\n      _______________\n      dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2) % kMod\n\n    return dp[-1]",
        "choices": [
            "      dp[i] = (2 * dp[i - 1] - dp[nextVisit[i - 1]] + 2) % kMod",
            "      dp[i] = (dp[i - 1] * 2 - dp[nextVisit[i - 1]] + 1) % kMod",
            "      dp[i] = (dp[i - 1] + dp[nextVisit[i - 1]] + 1) % kMod"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Dynamic Programming",
        "task_id": "7bc8845b-0891-481f-800d-f7be37aa2efb"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums. A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n]. A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\n\nIncomplete Solution:\nclass Solution:\n  def maxSubarraySumCircular(self, nums: List[int]) -> int:\n    totalSum = 0\n    currMaxSum = 0\n    currMinSum = 0\n    maxSum = -math.inf\n    minSum = math.inf\n\n    for num in nums:\n      totalSum += num\n      currMaxSum = max(currMaxSum + num, num)\n      currMinSum = min(currMinSum + num, num)\n      maxSum = max(maxSum, currMaxSum)\n      minSum = min(minSum, currMinSum)\n\n    _______________\n    return maxSum if maxSum < 0 else max(maxSum, totalSum - minSum)",
        "choices": [
            "    return maxSum if maxSum < 1 else max(maxSum, totalSum - minSum)",
            "    return maxSum if maxSum < 0 else max(maxSum, totalSum - minSum)",
            "    return maxSum if maxSum == 0 else max(maxSum, totalSum - minSum)",
            "    return maxSum if maxSum <= 0 else max(maxSum, totalSum - minSum)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "f097e21c-c5e8-4aa6-af51-cec84193dcb3"
    },
    {
        "question": "Question: Two eight bit bytes 1100 0011 and 0100 1100 are added. What are the values of the overflow, carry and zero flags respectively, if the arithmetic unit of the CPU uses 2\\'s complement form?",
        "choices": [
            "0, 1, 1",
            "1, 1, 0",
            "1, 0, 1",
            "0, 1, 0"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "69bc1a47-eff4-412b-ae69-8ce5930d5270"
    },
    {
        "question": "Question: The device which is used to connect a peripheral to bus is known as",
        "choices": [
            "control register",
            "interface",
            "communication protocol",
            "none of these"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "e4786c8f-8ec5-4fb8-b6e6-68b87be7706d"
    },
    {
        "question": "Question: The microinstructions stored in the control memory of a processor have a width of 26 bits. Each microinstruction is divided into three fields. a micro operation field of 13 bits, a next address field (X), and a MUX select field (Y). There are 8 status bits in the inputs of the MUX. How many bits are there in the X and Y fields, and what is the size of the control memory in number of words",
        "choices": [
            "10, 3, 1024",
            "8, 5, 256",
            "5, 8, 2048",
            "10, 3, 512"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "f9b9b662-181a-4eda-bc51-80a79e34215c"
    },
    {
        "question": "Question: The address space of 8086 CPU is",
        "choices": [
            "One Megabyte",
            "256 Kilobytes",
            "1 K Megabytes",
            "64 Kilobytes"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "fed00252-1b27-44be-8420-31065c7a7594"
    },
    {
        "question": "Question: What is the purpose of smoke testing in Black Box Testing?",
        "choices": [
            "To test the user interface",
            "To ensure the system's main functionalities work after each build",
            "To identify security vulnerabilities",
            "To review the source code"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Design Principles",
        "task_id": "ac24a3a0-e905-43d2-93e2-ca45ee4f8416"
    },
    {
        "question": "Question: How does cache simulation impact Load Testing scenarios?",
        "choices": [
            "It accelerates test execution by skipping cache-related checks",
            "It has no impact on test scenarios",
            "It simulates real-world scenarios by considering cache-related factors",
            "It increases the number of virtual users"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Testing",
        "task_id": "ccb55af4-e393-45b3-912d-5130aa431fbd"
    },
    {
        "question": "Question: The time complexity of solving the 0-1 Knapsack Problem using dynamic programming with a bottom-up approach (tabulation) is:",
        "choices": [
            "O(n)",
            "O(n log n)",
            "O(n * capacity)",
            "O(n * capacity^2)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "ca05bbe7-9d06-42c3-8907-6876cc6217b8"
    },
    {
        "question": "Question: What is the space complexity of the following naive method used to find the maximum sub-array sum in an array containing n elements?\n#include<stdio.h>\nint main()\n{\n     int arr[1000]={2, -1, 3, -4, 1, -2, -1, 5, -4}, len=9;\n     int cur_max, tmp_max, strt_idx, sub_arr_idx;\n     cur_max = arr[0];\n     for(strt_idx = 0; strt_idx < len; strt_idx++)\n     {\n\t  tmp_max=0;\n\t  for(sub_arr_idx = strt_idx; sub_arr_idx < len; sub_arr_idx++)\n\t  {\n\t       tmp_max +=arr[sub_arr_idx];\n\t       if(tmp_max > cur_max)\n\t\t _____________;\n\t  }\n     }\n     printf(\"%d\",cur_max);\n     return 0;\n}",
        "choices": [
            "O(n2)",
            "O(1)",
            "O(n3)",
            "O(n)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "fd0d06a6-25c3-4d67-9fe1-fc67b10c5f80"
    },
    {
        "question": "Question: Consider a B+-tree in which the maximum number of keys in a node is 5. What is the minimum number of keys in any non-root node? (GATE CS 2010)",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Structures",
        "task_id": "f0fda61e-a799-4462-ba3b-1ea2eead2754"
    },
    {
        "question": "Question: Consider the following table\r\r\r\n       Algorithms                   Design Paradigms\r\n(P) Dijkastra\u2019s Algorithm              (i) Divide and Conquer\r\n(Q) Strassen\u2019s Matrix Multiplication   (ii) Greedy\r\n(R) Fibonacci numbers                  (iii) Dynamic Programming \r\n\n\rMatch the algorithm to design paradigms they are based on:",
        "choices": [
            "P-(ii), Q-(iii), R-(i)",
            "P-(iii), Q-(i), R-(ii)",
            "P-(ii), Q-(i), R-(iii)",
            "P-(i), Q-(ii), R-(iii)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "f4952e8e-c610-4d9b-8ef1-ecceb3c6f1b5"
    },
    {
        "question": "Question: Which of the following statements is correct with respect to insertion sort ? \r\n*Online - can sort a list at runtime\r\n*Stable - doesn\\'t change the relative \r\n          order of elements with equal keys.",
        "choices": [
            "Insertion sort is stable, online but not suited well for large number of elements.",
            "Insertion sort is unstable and online",
            "Insertion sort is online and can be applied to more than 100 elements",
            "Insertion sort is stable & online and can be applied to more than 100 elements"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "aab99e43-92be-4563-b646-4b5fe2a9319d"
    },
    {
        "question": "Question: The subset-sum problem is defined as follows. Given a set of n positive integers, S = {a1 ,a2 ,a3 ,\u2026,an} and positive integer W, is there a subset of S whose elements sum to W? A dynamic program for solving this problem uses a 2-dimensional Boolean array X, with n rows and W+1 columns. X[i, j],1 <= i <= n, 0 <= j <= W, is TRUE if and only if there is a subset of {a1 ,a2 ,...,ai} whose elements sum to j. Which of the following is valid for 2 <= i <= n and ai <= j <= W?",
        "choices": [
            "X[i, j] = X[i - 1, j] \u2228 X[i, j -ai]",
            "X[i, j] = X[i - 1, j] \u2228 X[i - 1, j - ai]",
            "X[i, j] = X[i - 1, j] \u2227 X[i, j - ai]",
            "X[i, j] = X[i - 1, j] \u2227 X[i -1, j - ai]"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "4a24d451-7f65-4106-abf8-71e09d822d70"
    },
    {
        "question": "Question: Integer x, y\u00a0\nSet x = 15, y = 12\u00a0\ny = x \u2013 1\u00a0\ndo{\u00a0\n  Print x\u00a0\n  x = y + (x \u2013 2)\u00a0\n}\u00a0\nwhile(x < 40)\u00a0\nend do while",
        "choices": [
            "14 26",
            "15 27 39",
            "27 39",
            "15"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "8224cddd-bfd8-4757-a074-0795e37f62e3"
    },
    {
        "question": "Question: Which is the correct order of the following algorithms with respect to their time Complexity in the best case ?",
        "choices": [
            "Merge sort > Quick sort >Insertion sort > selection sort",
            "insertion sort < Quick sort < Merge sort <  selection sort",
            "Merge sort > selection sort > quick sort > insertion sort",
            "Merge sort > Quick sort > selection sort > insertion sort"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "b1e580fa-808f-44fd-930a-d2c2b8b4eda0"
    },
    {
        "question": "Question: What is the time complexity for searching an element in the Trie?",
        "choices": [
            "O(1)",
            "O(LogN)",
            "O(N)",
            "O(N^2)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "4fb86646-d7c1-40cd-ac0c-f75010d019b3"
    },
    {
        "question": "Question: We have a binary heap on n elements and wish to insert n more elements (not necessarily one after another) into this heap. The total time required for this is (A) theta(logn) (B) theta(n) (C) theta(nlogn) (D) theta(n^2)",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "0699a62f-f1c5-4d13-b47d-68573acb1b84"
    },
    {
        "question": "Question: Which of the following sorting algorithms in its typical implementation gives best performance when applied on an array which is sorted or almost sorted (maximum 1 or two elements are misplaced).",
        "choices": [
            "Quick Sort",
            "Heap Sort",
            "Merge Sort",
            "Insertion Sort"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "12923da4-b401-473f-90ad-131161da5c9f"
    },
    {
        "question": "Question: Given the following statements: \r\n    S1: A foreign key declaration can always \r\n        be replaced by an equivalent check\r\n        assertion in SQL.\r\n    S2: Given the table R(a,b,c) where a and\r\n        b together form the primary key, the \r\n        following is a valid table definition.\r\n        CREATE TABLE S (\r\n            a INTEGER,\r\n            d INTEGER,\r\n            e INTEGER,\r\n            PRIMARY KEY (d),\r\n            FOREIGN KEY (a) references R) \r\nWhich one of the following statements is CORRECT?",
        "choices": [
            "S1 is TRUE and S2 is FALSE.",
            "Both S1 and S2 are TRUE.",
            "S1 is FALSE and S2 is TRUE.",
            "Both S1 and S2 are FALSE."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "66194f8e-e1ac-4076-8d7f-e79b8d115221"
    },
    {
        "question": "Question: Which SQL JOIN type returns all rows from the right table and matching rows from the left table?",
        "choices": [
            "INNER JOIN",
            "LEFT JOIN",
            "RIGHT JOIN",
            "FULL JOIN"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "6fa42feb-75b2-4436-8f69-12bf43c67fd2"
    },
    {
        "question": "Question: Which of the following is/are true with reference to \u2018view\u2019 in DBMS ?\r(a) A \u2018view\u2019 is a special stored procedure executed when certain event occurs.\r(b) A \u2018view\u2019 is a virtual table, which occurs after executing a pre-compiled query.\rcode:",
        "choices": [
            "Only (a) is true",
            "Only (b) is true",
            "Both (a) and (b) are true",
            "Neither (a) nor (b) are true"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "6577a270-933d-4a42-a7c7-ffa045388cd6"
    },
    {
        "question": "Question: Consider the following relational schema:\r\r\nEmployeeDetail (EmpId, FullName, ManagerID, DateOfJoining)\r\nEmployeeSalary (EmpID, Project, Salary)\r\n\r\n\r\nConsider the following relational query on the above database:\r\n\r\nSELECT Salary\r\nFROM EmployeeSalary Emp1\r\nWHERE 2 = (\r\n                SELECT COUNT( DISTINCT ( Emp2.Salary ) )\r\n                FROM EmployeeSalary Emp2\r\n                WHERE Emp2.Salary > Emp1.Salary\r\n            )\r\n\r\n\r\nAssume that relations corresponding to the above schema are not empty. Which one of the following is the correct interpretation of the above query?",
        "choices": [
            "find the highest salary from table",
            "find the 2nd highest salary from table",
            "find the 3rd highest salary from table",
            "None of above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "55204e83-3d7c-4441-892f-f150ca10dfb2"
    },
    {
        "question": "Question: Which SQL JOIN type returns all rows when there is a match in either the left or right table?",
        "choices": [
            "INNER JOIN",
            "LEFT JOIN",
            "RIGHT JOIN",
            "FULL JOIN"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "b7ce57ec-9fe3-477c-8f4b-50490aaeb7d1"
    },
    {
        "question": "Question: Which of the following RAID level provides the highest Data Transfer Rate (Read/Write)",
        "choices": [
            "RAID 1",
            "RAID 3",
            "RAID 4",
            "RAID 5"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "86e5e5da-5a85-43d2-8248-9ac37d2345ad"
    },
    {
        "question": "Question: Consider the following database table: \rCreate table test( \r                  one integer, \r                  two integer, \r                  primary key(one), \r                  unique(two), \r                  check(one >= 1 and <= 10), \r                  check(two >= 1 and <= 5) \r                  );\t\t\t\t\t\rHow many data records/tuples atmost can this table containt?",
        "choices": [
            "5",
            "10",
            "15",
            "50"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "6a3e3223-5743-4b10-8e3b-e6f7b950f864"
    },
    {
        "question": "Question: Let R = ABCDE is a relational scheme with functional dependency set F = {A \u2192 B, B \u2192 C, AC \u2192 D}. The attribute closures of A and E are",
        "choices": [
            "ABCD, \u03c6",
            "ABCD, E",
            "\u03a6, \u03c6",
            "ABC, E"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "ae53ede7-33e3-47f2-a82f-509620fcd7d6"
    },
    {
        "question": "Question: In the index allocation scheme of blocks to a file, the maximum possible size of the file depends on :",
        "choices": [
            "the size of the blocks, and the size of the ad\u00address of the blocks.",
            "the number of blocks used for the index, and the size of the blocks.",
            "the size of the blocks, the number of blocks used for the index, and the size of the address of the blocks.",
            "None of these"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "3bddb436-f534-4b54-8170-9640e165a8eb"
    },
    {
        "question": "Question: Consider a B+-tree in which the maximum number of keys in a node is 5. What is the minimum number of keys in any non-root node?",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "3f065591-2e05-4696-94fb-362f4121ad31"
    },
    {
        "question": "Question: Consider the following four relational schemas. For each schema, all non-trivial functional dependencies are listed, The underlined attributes are the respective primary keys.\r\r Schema I: Registration(rollno, courses)\rField \u2018courses\u2019 is a set-valued attribute containing the set of courses a student has registered for.\rNon-trivial functional dependency\rrollno \u2192 courses Schema II: Registration (rollno, coursid, email)\rNon-trivial functional dependencies:\rrollno, courseid \u2192 email email \u2192 rollno Schema III: Registration (rollno, courseid, marks, grade)\rNon-trivial functional dependencies:\rrollno, courseid, \u2192 marks, grade marks \u2192 grade Schema IV: Registration (rollno, courseid, credit)\rNon-trivial functional dependencies:\rrollno, courseid \u2192 credit courseid \u2192 credit \r\rWhich one of the relational schemas above is in 3NF but not in BCNF?",
        "choices": [
            "Schema I",
            "Schema II",
            "Schema III",
            "Schema IV"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "18cb1ea2-cbee-48e4-9825-6fbda5f7e1ba"
    },
    {
        "question": "Question: Which SQL operator is used to combine two or more conditions in a WHERE clause?",
        "choices": [
            "AND",
            "OR",
            "NOT",
            "LIKE"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "f4c4d9e7-729a-42d7-b98d-8b7ec74498ea"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>\n#include <string>\n#include <tuple>\nusing namespace std;\nint main()\n{\n\ttuple <int, string> tp1;\n\ttuple <int, string> tp2;\n\ttp1 = make_tuple(0, \"Hello\");\n\ttp2 = make_tuple(1, \"World\");\n\tauto tp3 = tuple_cat(tp1, tp2);\n\tcout<<\"(\"<<get<0>(tp3)<<\", \"<<get<1>(tp3)<<\", \"<<get<2>(tp3)<<\", \n        \"<<get<3>(tp3)<<\")\"<<endl;\n\treturn 0;\n}",
        "choices": [
            "(0, Hello, 1, World)",
            "()",
            "(0, 1)",
            "(Hello, World)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C++ Programming",
        "task_id": "3c6d27c9-fe86-42ba-99d2-b19d4da01164"
    },
    {
        "question": "Question: What is the output of the following code?\nstem([0:1:1],zero(1,2))",
        "choices": [
            "An empty graph extending from 0 to 1 unit in x axis and 0 to 2 in the y axis",
            "An empty graph extending from 0 to 1 unit in y axis and 0 to 2 in the x axis",
            "Syntactical Error",
            "Error in zero command"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Matlab",
        "task_id": "d690fb13-db2a-4f59-bcf0-03c38d5eaf50"
    },
    {
        "question": "Question: What will be the output of the following PHP code?\n    <?php    $fruits = array (\"apple\", \"orange\", \"banana\");    echo (next($fruits));\t    echo (next($fruits));    ?>",
        "choices": [
            "orangebanana",
            "appleorange",
            "orangeorange",
            "appleapple"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "PHP",
        "task_id": "ca48e6a2-f761-4145-8316-dd2ee35b8276"
    },
    {
        "question": "Question: What would be the current working directory at the end of the following command sequence?\n $ pwd\n /home/user1/proj\n $ cd  src\n $ cd  generic\n $ cd  .\n $ pwd",
        "choices": [
            "/home/user1/proj",
            "/home/user1/proj/src",
            "/home/user1",
            "/home/user1/proj/src/generic"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Linux Kernel Command",
        "task_id": "c038a43c-aa4c-4f59-a102-15e52a7d9908"
    },
    {
        "question": "Question: The following commands gives the output like this\n    #cat file1 file2\n    #cat: file1: No such file or directory\n    hello\n    If we execute the command \u201ccat file1 file2  1>2  2>&1\u201d the output would be",
        "choices": [
            "cat: file1: No such file or directory hello",
            "No output is displayed",
            "Cat: 1>2: No such file or directory",
            "hello"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Linux Kernel Command",
        "task_id": "4254fcd6-97e1-4602-bf4a-c5ff05b1df38"
    },
    {
        "question": "Question: What is the output of this program?\n   #!/bin/sh\t   var=\"Hello World\"   san_function() {       var=\"Linux\"       echo $var   }   san_function   exit 0",
        "choices": [
            "Sanfoundry",
            "Linux",
            "Command not found",
            "None of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "5ff3cdd8-597e-4aae-b5e1-51aa01fa044e"
    },
    {
        "question": "Question: What is the output of this program?\n   #!/bin/bash   san_var=hello   readonly san_var   san_var=hi   echo $san_var   exit 0",
        "choices": [
            "hello",
            "hi",
            "nothing will print",
            "none of the mentioned"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "9ada0445-2232-40d9-9297-e5ab5f0a1883"
    },
    {
        "question": "Question: What is the output of this program?\n    #!/bin/bash    san_var=10    echo \"the value of \\\"san_var\\\" is $san_var\"      exit 0",
        "choices": [
            "the value of \u201csan_var\u201d is 10",
            "the value of is 10",
            "the value of san_var is $san_var",
            "the value of \u201csan_var\u201d is $san_var"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "dea4b27a-d5f8-4440-bb1e-204f4131bc34"
    },
    {
        "question": "Question: What is the output of this program?\n   #!/bin/bash   a=10   b=$(( $a<0&&$a<100 ))   echo $b   exit 0",
        "choices": [
            "10",
            "0",
            "1",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "b00ac9e9-ba7c-4ed3-883d-f7c2220de379"
    },
    {
        "question": "Question: After running this program, as your press 4, what will be the output of the program?\n   #!/bin/bash   echo \"How many times you want to print 'Hello World'\"   read value   for ((i=0;i<$value;i++))   do   echo \"Hello World\";   done   exit 0",
        "choices": [
            "\u2018Sanfoudry\u2019 will print 4 times",
            "\u2018Sanfoudry\u2019 will print 3 times",
            "\u2018Sanfoudry\u2019 will print 5 times",
            "Program will generate an error message"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "ec289d68-fc98-4c43-8bd2-29c6ef7813a6"
    },
    {
        "question": "Question: What is the output of this program?\n   #!/bin/bash   for i in 2 3 7   do   echo \"Hello World\"   done   exit 0",
        "choices": [
            "\u2018Sanfoundry\u2019 will print 3 times",
            "Nothing will print",
            "Program will generate an error message",
            "None of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "790d586b-ee70-4b4e-bad4-5827791db196"
    },
    {
        "question": "Question: How can you come out of the loop in this program?\n   #!/bin/bash   read x   while [ $x != \"hello\" ]   do    echo \"Try to come out of the loop\"   read x   done   echo \"Welcome\"   exit 0",
        "choices": [
            "by entering \u201chello\u201d",
            "by entering anything except \u201chello\u201d",
            "it is not possible",
            "none of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "86ecd381-13bc-43a3-a015-88f11aa2e142"
    },
    {
        "question": "Question: What is the output of this program?\n   #!/bin/bash   echo \"Which file do you want to check\"   read x   until [ -e $x ]   do    echo \"The file does not exist. Do you want to create? y/n\"   read a   if [ $a = y ]; then     touch $x   echo \"Your file has been created successfully.\"   fi   done   echo \"The file is present in this directory\"   exit 0",
        "choices": [
            "it checks the existance of your entered file in the present working directory",
            "it creates the file if file does not exists",
            "program runs untill you create the file",
            "all of the mentioned"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "4569b0ca-e9e9-42d5-9cc2-9341a3952fb9"
    },
    {
        "question": "Question: After running this program, if you enter 1000, then what will be the output of the program?\n\t#!/bin/bash\techo \"Please enter a number\"\tread a\tif [ $a -lt 100 ]; then\techo \"It is less than 100\"; \telif [ $a -lt 1000 ]; then\techo \"It is less than 1000\"\telse \techo \"It is greater than 1000\"\tfi\texit 0",
        "choices": [
            "It is greater than 1000",
            "It is less then 1000",
            "It is equal to 1000",
            "None of then mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "ecb1f7cc-a518-445a-bd40-1f8722e10018"
    },
    {
        "question": "Question: What is the output of this program?\n   #! /usr/bin/awk -f   BEGIN {       print log(1)   }",
        "choices": [
            "0",
            "syntax error",
            "fatal error",
            "segmentation fault"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "76183252-364a-47ac-8ac4-e46bee1e82f3"
    },
    {
        "question": "Question: What is the output of this program?\n   #! /usr/bin/awk -f   BEGIN {       print index(\"hello_world\",\"linux\")   }",
        "choices": [
            "sanfoundry linux",
            "sanfoundry",
            "0",
            "none of the mentioned"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "00beba5f-bda7-48f4-a3ad-cdeb2df0d17d"
    },
    {
        "question": "Question: What is the output of the program?\n   #! /usr/bin/awk -f   BEGIN {       a=int(2.5)       print (a*20)   }",
        "choices": [
            "50",
            "40",
            "a*20",
            "syntax error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "d11a0dda-3b59-4e50-84a6-c2ce23588924"
    },
    {
        "question": "Question: What is the output of the program?\n    #! /usr/bin/awk -f    BEGIN {       print toupper(\"sAnFoUnDrY_1_$\")    }",
        "choices": [
            "SANFOUNDRY_1_$",
            "sAnFoUnDrY 1 $",
            "SaNfOuNdRy_1_$",
            "SANFOUNDRY"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "8eccca3b-0788-4057-8d95-d6b5ac7c871f"
    },
    {
        "question": "Question: What is the output of the program?\n   #! /usr/bin/awk -f   #This filename is text.awk   BEGIN {       print FILENAME   }",
        "choices": [
            "test.awk",
            "program will print nothing",
            "syntax error",
            "fatal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Shell Scripting",
        "task_id": "8ee34d3c-42fd-4b0d-ad04-07e946f29f21"
    },
    {
        "question": "Question: When was version 1.0 of the Web Content Accessibility Guidelines (WCAG) released?",
        "choices": [
            "1995",
            "2005",
            "2008",
            "1999"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Accessibility",
        "task_id": "06f56276-d1ab-4feb-b790-9ea6252cd482"
    },
    {
        "question": "Question: What is Wave?",
        "choices": [
            "A screen reader",
            "An accessibility testing tool",
            "An initiative by W3C",
            "An organization of accessibility experts"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Accessibility",
        "task_id": "ad0307a5-2728-4547-a3f3-079fb078b806"
    },
    {
        "question": "Question: \nAt the top of the Lyft website, there is a logo, a search field, three navigation items and a profile icon. Which landmark should be used for this section?",
        "choices": [
            "<top>",
            "<nav>",
            "<head>",
            "<header>"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Accessibility",
        "task_id": "39a1376d-3a30-48eb-94cd-0d5bad836c1e"
    },
    {
        "question": "Question: \nUnder the top section is a banner about Covid. It is only visible on the front page of the site.Which landmark should be used on the banner?",
        "choices": [
            "It should be inside <header>",
            "<banner>",
            "It should be inside <main>",
            "No landmark needed. It is a temporary message that can be closed."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Accessibility",
        "task_id": "86dc6d59-217a-4b64-82b3-ed288fa54b2e"
    },
    {
        "question": "Question: You write this code for the button \"Sign up to ride\":<a href=\"https://account.lyft.com\" class=\"basebutton\">Sign up to ride</a>Is this code considered accessible?```\n<a href=\"https://account.lyft.com\" class=\"basebutton\">Sign up to ride</a>\n```",
        "choices": [
            "No, it looks like a button, so it should be coded as a <button>.",
            "No, the class name basebutton indicates that this sould be a <button>",
            "Yes, all good!"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Accessibility",
        "task_id": "fa9b3ce2-f6fd-4c4e-97aa-3f1eb7f34c57"
    },
    {
        "question": "Question: \nIn this example, we see white text on an image background.How should you measure this contrast?",
        "choices": [
            "Find the average color of the image, to measure against.",
            "Find the lightest part of the picture that might lie next to",
            "Not possible. Text on images is not accessible."
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Accessibility",
        "task_id": "41c7d9f1-fafd-49b8-b595-c4c13e47e48e"
    },
    {
        "question": "Question: \nIn this example from Booking, the link to Italy is focused. They have relied on the browser default styling. However, the outline is only on the left and right side of the linked section. What might be a reason that there is no outline at the top and bottom?",
        "choices": [
            "outline-top: 0; and outline-bottom: 0;",
            "overflow: hidden;"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1
        ],
        "label": "Accessibility",
        "task_id": "c87fc856-913a-4310-8956-c36b0cdecae7"
    },
    {
        "question": "Question: DNS stands for \"Data Name System\".",
        "choices": [
            "False",
            "True"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "Accessibility",
        "task_id": "0a936b98-43c7-4310-a21f-9f0dbcea9350"
    },
    {
        "question": "Question: What are WebSockets?",
        "choices": [
            "Automated responses that inform about possible security risks",
            "Methods for visualizing and coordinating your workflow",
            "An open standard for persistent client-server connections"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Web Development",
        "task_id": "fd910778-bb8b-4b98-8a36-3ffadbd3ca6a"
    },
    {
        "question": "Question: Which property can be used to find the length of a string?",
        "choices": [
            "getLength()",
            "length",
            "length()",
            "Length"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Web Development",
        "task_id": "052c631f-e940-47e1-87de-479dec42e502"
    },
    {
        "question": "Question: A cookie can not be used to control a users session/state",
        "choices": [
            "True, only supercookies have this feature",
            "False. Cookies are often used for tracking sessions"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1
        ],
        "label": "Web Development",
        "task_id": "f53dab4b-a635-4eeb-b821-117b66cd2977"
    },
    {
        "question": "Question: Which phase is the first phase of a CI/CD pipeline?",
        "choices": [
            "Test phase",
            "Source phase",
            "Production phase",
            "Build phase"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "CI/CD Pipelines",
        "task_id": "6e2622dd-08ba-4192-a23a-9787dea7e48f"
    },
    {
        "question": "Question: A CI/CD pipeline automates software deployment procedures and standardizes quality checks.",
        "choices": [
            "True",
            "False"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "CI/CD Pipelines",
        "task_id": "5a5eca51-211f-4a9c-92d5-0b6a0c7fc323"
    },
    {
        "question": "Question: SIEM is commonly used to",
        "choices": [
            "Do a real-time analysis of security alerts generated by applications, hosts and network hardware",
            "Secure the servers that are hosted in the cloud",
            "Preventively block attacks against networks"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "127b331b-10d2-4af3-b5d2-13c043bb157c"
    },
    {
        "question": "Question: A netmask can be represented by which two ways?",
        "choices": [
            "Decimal Numbers (Netmask: 255.255.255.0) and Slash Notation (80.212.212.50/32)",
            "Pound Notation (80.2012.212.50#24) and Decimal Numbers (Netmask: 255.255.255.0)",
            "Slash Notation (80.212.212.50/32) and Pound Notation (80.2012.212.50#24)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "44889cd3-6ab4-4db2-8cd0-40f12656d264"
    },
    {
        "question": "Question: You need an IDS (Intrusion Detection System) in addition to IPS (Intrusion Prevention System) to be able to both detect and prevent access",
        "choices": [
            "False. IPS is also able to detect if positioned correctly in the network",
            "True. IDS and IPS are two separate product or devices, with designed roles on different parts of the network. IDS tells the IPS to block/prevent.",
            "Neither of the other options are correct"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "ce4deb0b-78de-4c47-9303-ec40db358893"
    },
    {
        "question": "Question: To be able to detect and block specific file types/documents to be blocked from downloading from the internet, with a firewall, you need:",
        "choices": [
            "A Next-Generation Firewall with phaser features",
            "A Next-Generation Firewall with layer 6 features",
            "A Next-Generation Firewall with layer 7 features"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "9b83855d-d67a-4c18-af6e-215227b3f0fa"
    },
    {
        "question": "Question: What is best practice in defending against SQL injection?",
        "choices": [
            "Blocking specific ports that SQL injections are usually attacked via",
            "Programmers will not make web applications that allow user input",
            "Sanitizing users input in a web application"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "da85e0c7-1c7b-44e6-961b-d8e87aacf817"
    },
    {
        "question": "Question: Using the same strong password, with high entropy, on multiple sites is good practice",
        "choices": [
            "True. Storing passwords in clear text in database is no longer practiced and are now only using strong encryption",
            "False. If one site is breached/hacked and stores passwords in clear text, your password is now in hackers hands"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1
        ],
        "label": "Security",
        "task_id": "2142d322-656e-4935-8d7c-8da92ec8b091"
    },
    {
        "question": "Question: What is Zero-Trust architecture?",
        "choices": [
            "A network where only some resources/devices are trusted",
            "A network where all systems/resources need explicit access to be able to communicate",
            "A network where we do not trust public network(internet), but we trust local network"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Security",
        "task_id": "04717f95-a00a-4194-b995-2af0f675e1b5"
    },
    {
        "question": "Question: Which one of the following algorithm is not used in asymmetric key cryptography?",
        "choices": [
            "RSA Algorithm",
            "Diffie-Hellman Algorithm",
            "Electronic Code Book Algorithm",
            "None of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "0c54b235-8cc3-475a-b277-1031848c48f0"
    },
    {
        "question": "Question: Using p = 3, q = 13, d = 7 and e = 3 in the RSA algorithm, what is the value of ciphertext for a plain text 5 ?",
        "choices": [
            "8",
            "16",
            "26",
            "33"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "8aa08842-ef4b-4ba3-9b48-e7eae540c685"
    },
    {
        "question": "Question: Encrypt the plain text Message \u201cEXTRANET\u201d using Transposition cipher technique with the following key:\r\rUsing \u2018Z\u2019 as bogus character.",
        "choices": [
            "TAXERTZENZ",
            "EXTRANETZZ",
            "EZXZTRZANZET",
            "EXTZRANZETZ"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "11b60485-bae6-4c01-8a73-345fe20f12ed"
    },
    {
        "question": "Question: What is one advantage of setting up a DMZ(Demilitarized Zone) with two firewalls?",
        "choices": [
            "You can control where traffic goes in the three networks",
            "You can do stateful packet filtering",
            "You can do load balancing",
            "Improve network performance"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "5ffdb9e4-224e-43ca-8d26-bfed9d2e40b9"
    },
    {
        "question": "Question: Pretty Good Privacy (PGP) is used in",
        "choices": [
            "Browser security",
            "FTP security",
            "Email security",
            "None of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "1f0bad19-7ee3-4c0a-968d-7df58639dff4"
    },
    {
        "question": "Question: In a system an RSA algorithm with p=5 and q=11, is implemented for data security. What is the value of the decryption key if the value of the encryption key is 27?",
        "choices": [
            "3",
            "7",
            "27",
            "40"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Security",
        "task_id": "0e199614-ae99-4848-b74f-d971699b7b6e"
    },
    {
        "question": "Question: Which is the broadcast address in this network: 172.16.24.0/24",
        "choices": [
            "172.16.24.255",
            "172.16.24.0",
            "172.16.24.1"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Networking",
        "task_id": "2ab02316-3925-4919-b6a2-ce0d0c689543"
    },
    {
        "question": "Question: Which one of these is a RFC 1918 ip address?",
        "choices": [
            "172.17.1.30",
            "172.16.1.30",
            "9.0.0.1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Networking",
        "task_id": "5fbacf96-b075-4a7e-a1b6-ef8efddd9144"
    },
    {
        "question": "Question: Which types of packets can be used to determine if a system is alive on the network?",
        "choices": [
            "ICMP handshake Request, TCP ACK, NMAP",
            "ICMP Echo Request, ICMP Timestamp Request, TCP SYN, TCP ACK",
            "ICMP Echo Request, TCP SYN, SW-1TCH, ICMP Timestamp Request"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Networking",
        "task_id": "4f1ddd0c-22c5-457b-8f2d-0bbf310da385"
    },
    {
        "question": "Question: Every host in an IPv4 network has a 1-second resolution real-time clock with battery backup. Each host needs to generate up to 1000 unique identifiers per second. Assume that each host has a globally unique IPv4 address. Design a 50-bit globally unique ID for this purpose. After what period (in seconds) will the identifiers generated by a host wrap around?",
        "choices": [
            "128",
            "64",
            "256",
            "512"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "ff3dfb5c-6176-484c-b517-13473ea7d485"
    },
    {
        "question": "Question: In a packet switching network, packets are routed from source to destination along a single path having two intermediate nodes. If the message size is 24 bytes and each packet contains a header of 3 bytes, then the optimum packet size is:",
        "choices": [
            "4",
            "6",
            "7",
            "9"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "9fc27110-5ac8-4fab-bb50-02865fe8e2e9"
    },
    {
        "question": "Question: The routing table of a router is shown below: \r\n Destination     Sub net mask \t     Interface\r\n 128.75.43.0 \t 255.255.255.0 \t        Eth0\r\n 128.75.43.0 \t 255.255.255.128 \tEth1\r\n 192.12.17.5 \t 255.255.255.255 \tEth3\r\n default \t  \t                Eth2\r\nOn which interfaces will the router forward packets addressed to destinations 128.75.43.16 and 192.12.17.10 respectively?",
        "choices": [
            "Eth1 and Eth2",
            "Eth0 and Eth2",
            "Eth0 and Eth3",
            "Eth1 and Eth3"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "173a47a5-2eb0-4977-a534-f443225b3116"
    },
    {
        "question": "Question: Which of the following functionalities must be implemented by a transport protocol over and above the network protocol ?",
        "choices": [
            "Recovery from packet losses",
            "Detection of duplicate packets",
            "Packet delivery in the correct order",
            "End to end connectivity"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "d286fa44-6444-4619-808e-7d1a80ec4ebc"
    },
    {
        "question": "Question: Which of the following is NOT true about User Datagram Protocol in transport layer?",
        "choices": [
            "Works well in unidirectional communication, suitable for broadcast information.",
            "It does three way handshake before sending datagrams",
            "It provides datagrams, suitable for modeling other protocols such as in IP tunneling or Remote Procedure Call and the Network File System",
            "The lack of retransmission delays makes it suitable for real-time applications"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "16cab114-72d7-4425-b75d-135541d054d8"
    },
    {
        "question": "Question: Consider a network connecting two systems located 8000 kilometers apart. The bandwidth of the network is 500 \u00d7 106 bits per second. The propagation speed of the media is 4 \u00d7 106 meters per second. It is needed to design a Go-Back-N sliding window protocol for this network. The average packet size is 107 bits. The network is to be used to its full capacity. Assume that processing delays at nodes are negligible. Then, the minimum size in bits of he sequence number field has to be ________.",
        "choices": [
            "2",
            "4",
            "8",
            "16"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "ab0cf22d-ee80-4341-bdc1-662209e9ed08"
    },
    {
        "question": "Question: In networking terminology UTP means",
        "choices": [
            "Ubiquitous teflon port",
            "Uniformly terminating port",
            "Unshielded twisted pair",
            "Unshielded T-connector port"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "5103d057-e3f7-4fbe-98d2-4ad699d4fbc7"
    },
    {
        "question": "Question: The protocol data unit (PDU) for the application layer in the Internet stack is",
        "choices": [
            "Segment",
            "Datagram",
            "Message",
            "Frame"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "f652524d-1ae8-4245-beb2-e73d2fe3656e"
    },
    {
        "question": "Question: Bit stuffing refers to",
        "choices": [
            "inserting a \\'0\\' in user stream to differentiate it with a flag",
            "inserting a \\'0\\' in flag stream to avoid ambiguity",
            "appending a nibble to the flag sequence",
            "appending a nibble to the use data stream"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "0f6d6dd4-3ab3-43a5-a1e2-b4e2245d87ac"
    },
    {
        "question": "Question: Which of the following protocols is an application layer protocol that establishes, manages and terminates multimedia sessions ?",
        "choices": [
            "Session Maintenance Protocol",
            "Real - time Streaming Protocol",
            "Real - time Transport Control Protocol",
            "Session Initiation Protocol"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "6894db1c-1aea-4e9f-a266-401dd74ff9a3"
    },
    {
        "question": "Question: An Ethernet frame that is less than the IEEE 802.3 minimum length of 64 octets is called",
        "choices": [
            "Short frame",
            "Small frame",
            "Mini frame",
            "Runt frame"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "21890acd-6301-42c9-a835-552c59c736c3"
    },
    {
        "question": "Question: What frequency range is used for microwave communications, satellite and radar?",
        "choices": [
            "Low frequency: 30 kHz to 300 kHz",
            "Medium frequency: 300 kHz to 3 MHz",
            "Super high frequency: 3000 MHz to 30000 MHz",
            "Extremely high frequency: 30000 kHz"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking",
        "task_id": "a616062d-d55d-470b-b322-1fcc7dd5af5b"
    },
    {
        "question": "Question: What is compression ratio in a typical mp3 audio files?",
        "choices": [
            "4:1",
            "6:1",
            "8:1",
            "10:1"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Audio Compression",
        "task_id": "b18225d4-5ec9-4014-bc04-ecb0c50f0db7"
    },
    {
        "question": "Question: Which of the following objects can be used in expressions and scriplets in JSP (Java Server Pages) without explicitly declaring them?",
        "choices": [
            "session and request only",
            "request and response only",
            "response and session only",
            "session, request and response"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JSP",
        "task_id": "77336d7e-d968-4885-a89a-e46110220b52"
    },
    {
        "question": "Question: Which of the following is not provided as a service in cloud computing?",
        "choices": [
            "Infrastructure as a service",
            "Architecture as a service",
            "Software as a service",
            "Platform as a service"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cloud Computing",
        "task_id": "6a4d3b79-5e0c-4cea-a75a-d77eee38fae5"
    },
    {
        "question": "Question: A computing architecture, which allows the user to use computers from multiple administrative domains to reach a common goal is called as",
        "choices": [
            "Grid Computing",
            "Neutral Networks",
            "Parallel Processing",
            "Cluster Computing"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cloud Computing",
        "task_id": "89038041-8f02-483a-9e33-bd88649ca885"
    },
    {
        "question": "Question: What are some common instructions used in a Dockerfile",
        "choices": [
            "BUILD, RUN, COPY, and ENTRYPOINT.",
            "CREATE, START, COPY, and ENTRYPOINT",
            "FROM, RUN, COPY, and ENTRYPOINT",
            "INCLUDE, RUN, COPY, and ENTRYPOINT"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cloud Computing",
        "task_id": "1cad7e3a-5590-4abf-9e45-5cf05a57ee42"
    },
    {
        "question": "Question: What is the recommended way to configure Terraform?",
        "choices": [
            "By modifying the Terraform configuration files directly.",
            "By using the \"terraform\" command in the command line.",
            "By using environment variables.",
            "By using the Terraform CLI options."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cloud Computing",
        "task_id": "f8b6745c-899b-4a26-bbd1-92d8ccda4445"
    },
    {
        "question": "Question: Consider a unit square centred at origin. The coordinates of the square are translated by a factor (1 / 2, 1) and rotated by an angle of 90\u00b0.  What shall be the coordinates of the new square?",
        "choices": [
            "",
            "",
            "",
            ""
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "ee4d2dea-7609-45ee-96a8-a7f349af1d63"
    },
    {
        "question": "Question: Consider a triangle A(0,0), B(1,1) and C(5,2). The triangle has to be rotated by an angle of 458 about the point P(21, 21). What shall be the coordinates of the new triangle?",
        "choices": [
            "A'=(1,\u221a2-1) ,B'=(-1,2\u221a2-1),C'=(3\u221a2-1,(9/2)\u221a2-1)",
            "A'=(1,\u221a2-1) ,B'=(2\u221a2-1,-1),C'=(3\u221a2-1,(9/2)\u221a2-1)",
            "A'=(-1,\u221a2-1) ,B'=(-1,2\u221a2-1),C'=(3\u221a2-1,(9/2)\u221a2-1)",
            "A'=(\u221a2-1,-1) ,B'=(-1,2\u221a2-1),C'=(3\u221a2-1,(9/2)\u221a2-1)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "89800187-bdf6-4b36-935e-8e0072e7a080"
    },
    {
        "question": "Question: By using an eight bit optical encoder the degree of resolution that can be obtained is (approximately)",
        "choices": [
            "1.8o",
            "3.4o",
            "2.8o",
            "1.4o"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "ea4d802b-6972-4f8f-ae45-04e6d665169e"
    },
    {
        "question": "Question: A system is having 8 M bytes of video memory for bit-mapped graphics with 64-bit colour. What is the maximum resolution it can support?",
        "choices": [
            "800 x 600",
            "1024 x 768",
            "1280 x 1024",
            "1920 x 1440"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "f2f4064e-83fa-4bb2-b8c4-6c2ead27b468"
    },
    {
        "question": "Question: A frame buffer array is addressed in row major order for a monitor with pixel locations starting from (0,0) and ending with (100,100). What is address of the pixel(6,10)? Assume one bit storage per pixel and starting pixel location is at 0.",
        "choices": [
            "1016",
            "1006",
            "610",
            "616"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "34f4ae2d-47a8-49a2-abeb-26aad7770e65"
    },
    {
        "question": "Question: In graphics, the number of vanishing points depends on",
        "choices": [
            "the number of axes cut by the projection plane",
            "the centre of projection",
            "the number of axes which are parallel to the projection plane",
            "the perspective projections of any set of parallel lines that are not parallel to the projection plane"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "a741e41c-73ec-4b47-aee1-6777de993f91"
    },
    {
        "question": "Question: What is the result of the following matrix subtraction?let matrix1 = [[1, 2], [3, 4]];let matrix2 = [[4, 3], [2, 1]];matrix1 - matrix2",
        "choices": [
            "a) An error will be thrown",
            "b) [[-3, -1], [1, 3]]",
            "c) [[-3, -5], [1, 3]]"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Geometry",
        "task_id": "326f5a69-702d-496d-bb24-960680c0cbec"
    },
    {
        "question": "Question: Consider the following LPP :\rMax Z = 15x1 + 10x2\r\nSubject to the constraints\r\n4x1 + 6x2 \u2264 360\r\n3x1 + 0x2 \u2264 180\r\n0x1 + 5x2 \u2264 200\r\nx1, x2 / 0\r\nThe solution of the LPP using Graphical solution technique is :",
        "choices": [
            "x1=60, x2=0 and Z=900",
            "x1=60, x2=20 and Z=1100",
            "x1=60, x2=30 and Z=1200",
            "x1=50, x2=40 and Z=1150"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "ebb85738-d784-497b-9bcc-4909810175bf"
    },
    {
        "question": "Question: X, Y and Z are closed intervals of unit length on the real line. The overlap of X and Y is half a unit. The overlap of Y and Z is also half a unit. Let the overlap of X and Z be k units. Which of the following is true?",
        "choices": [
            "k must be 1",
            "k must be 0",
            "k can take any value between 0 and 1 (d) None\rof the above",
            "None of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Geometry",
        "task_id": "7e81ae73-dbaf-4f31-954b-c6cc9413ed95"
    },
    {
        "question": "Question: In a distributed computing environment, distributed shared memory is used which is",
        "choices": [
            "Logical combination of virtual memories on the nodes.",
            "Logical combination of physical memories on the nodes.",
            "Logical combination of the secondary memories on all the nodes.",
            "All of the above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Distributed Computing",
        "task_id": "06a33b6e-01eb-45e5-ba98-0178c27ba2f8"
    },
    {
        "question": "Question: Which of the following computing models is not an example of distributed computing environment ?",
        "choices": [
            "Cloud computing",
            "Parallel computing",
            "Cluster computing",
            "Peer-to-peer computing"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Distributed Computing",
        "task_id": "8b054ed2-d38d-425c-98a6-4e82526dbfbb"
    },
    {
        "question": "Question: RPC stands for what the context is of Operating System",
        "choices": [
            "Remote Procedure Calls",
            "Remote Process Calls",
            "Realtime Processing Calls",
            "Random Processing Calls"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Distributed Computing",
        "task_id": "42bf8d45-277d-4048-bafe-fc794a93ef06"
    },
    {
        "question": "Question: Which of the following is a type of Computer Architecture",
        "choices": [
            "Von-Neumann Architecture",
            "Harvard Architecture",
            "Microarchitecture",
            "All of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "88ffbb31-d21a-4a8c-8791-1d44fef70535"
    },
    {
        "question": "Question: Block-interleaved distributed parity is the characteristic of which of the following RAID levels",
        "choices": [
            "Raid Level 1",
            "Raid Level 2",
            "Raid Level 6",
            "Raid Level 5"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "ff5c7848-a6d8-4881-baa5-3127d6570e9b"
    },
    {
        "question": "Question: Which of the following is true about contiguous memory allocation",
        "choices": [
            "each process is contained in a single contiguous section of memory",
            "all processes are contained in a single contiguous section of memory",
            "the memory space is contiguous",
            "The memory space is allocated randomly"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "b449708f-2be0-4257-a23b-fc4e78540200"
    },
    {
        "question": "Question: In Paging mechanism the address of page table is referred by",
        "choices": [
            "Page Table Register",
            "Segment table Register",
            "Local Directory table Register",
            "Global Directory table Register"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "c4216874-ba54-4c4e-9962-2aaa54aea75a"
    },
    {
        "question": "Question: Which of the the following stores the result of Computation",
        "choices": [
            "Stack",
            "Heap",
            "Cache",
            "Accumulator"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "649818c8-1662-4acf-9b83-adbec7aec018"
    },
    {
        "question": "Question: Register renaming is done in pipelined processors",
        "choices": [
            "as an alternative to register allocation at compile time",
            "for accessing function parameters and local variables efficiently",
            "to avoid certain hazards",
            "for allocating new memory"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "f13a9c1e-b5f5-4c82-b099-9d655e4960f9"
    },
    {
        "question": "Question: Consider the following pseudo-code\rx:=1;\r\ni:=1;\r\nwhile (x <= 1000)\r\nbegin\r\n  x:=2^x;\r\n  i:=i+1;\r\nend;\r\n\r\nWhat is the value of i at the end of the pseudo-code?",
        "choices": [
            "4",
            "5",
            "6",
            "7"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Architecture",
        "task_id": "51f3d21f-0971-4452-b614-f691f4dbcce4"
    },
    {
        "question": "Question: Can we make a folder in Windows with the same name?",
        "choices": [
            "Yes",
            "No"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1
        ],
        "label": "Operating System",
        "task_id": "f361c26a-1af6-4535-9f0e-185d4f3c7a4d"
    },
    {
        "question": "Question: Which of the following are TRUE for direct communication?",
        "choices": [
            "A communication link can be connected to N processes (where N is the maximum number of processes that the system can support).",
            "A link to communication is connected to precisely two processes.",
            "Each pair of processes has exactly N/2 linkages (where N is the maximum number of processes the system can support).",
            "There are precisely two links between each set of processes."
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "c1bdd928-191b-4e72-8dec-fafd52860406"
    },
    {
        "question": "Question: Which of the following queues has the feature of the sender blocking until the message is received by the recipient?",
        "choices": [
            "Single Capacity Queue",
            "Single Capacity Bidirectional Queue",
            "Multi Capacity Queue",
            "Zero Capacity Queue."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "ee32e302-02ed-4445-a818-af786b0d864f"
    },
    {
        "question": "Question: For deadlock avoidance , we can use__ algorithm.",
        "choices": [
            "Banker\u2019s algorithm",
            "Round Robin algorithm",
            "Shortest Job First algorithm",
            "None of the above"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "e3941f9d-879d-4711-99ba-531721338876"
    },
    {
        "question": "Question: A semaphore has atomic operations that are known as \u2013",
        "choices": [
            "stop() and wait()",
            "wait() and signal()",
            "test() and set()",
            "None of the above"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "e37c075c-ecfa-4fc8-97f8-339a2a08720c"
    },
    {
        "question": "Question: Systems that only permit one process to run at a time are referred to as",
        "choices": [
            "uniprogramming systems",
            "uniprocessing systems",
            "unitasking systems",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "abc20ba1-ad13-47ff-a83b-f521bbccec79"
    },
    {
        "question": "Question: The Operating System of a computer may periodically collect all the free memory space to form contiguous block of free space. This is called:",
        "choices": [
            "Concatenation",
            "Garbage collection",
            "Collision",
            "Dynamic Memory Allocation"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "0d5b92cc-cec7-44c4-9268-61dedc93f0a3"
    },
    {
        "question": "Question: In a resident- OS computer, which of the following system software must reside in the main memory under all situations?",
        "choices": [
            "Assembler",
            "Linker",
            "Loader",
            "Compiler"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "10fd58eb-9496-479a-a304-c9ee6dd88964"
    },
    {
        "question": "Question: Which of the following statements about synchronous and asynchronous I/O is NOT true?",
        "choices": [
            "An ISR is invoked on completion of I/O in synchronous I/O but not in asynchronous I/O",
            "In both synchronous and asynchronous I/O, an ISR (Interrupt Service Routine) is invoked after completion of the I/O",
            "A process making a synchronous I/O call waits until I/O is complete, but a process making an asynchronous I/O call does not wait for completion of the I/O",
            "In the case of synchronous I/O, the process waiting for the completion of I/O is woken up by the ISR that is invoked after the completion of I/O"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Operating System",
        "task_id": "7467e52b-cdb3-4aa3-9141-ddfddfcfa9af"
    },
    {
        "question": "Question: In Data mining, classification rules are extracted from _______.",
        "choices": [
            "Data",
            "Information",
            "Decision Tree",
            "Database"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Mining",
        "task_id": "350de755-9884-4515-a5da-d65fb38be581"
    },
    {
        "question": "Question: Discovery of cross sales opportunities is called as _____.",
        "choices": [
            "Association",
            "Visualization",
            "Correlation",
            "Segmentation"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Mining",
        "task_id": "8df0edaf-193d-4c44-894d-bec13b87e992"
    },
    {
        "question": "Question: In Artificial Intelligence (AI), which agent deals with happy and unhappy state?",
        "choices": [
            "Simple reflex agent",
            "Model based agent",
            "Learning agent",
            "Utility based agent"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Artificial Intelligence",
        "task_id": "196d5dbd-a39a-4e17-82bd-e1d0566a0b32"
    },
    {
        "question": "Question: Consider the following LPP :\rMin Z = 2x1 + x2 + 3x3\r\nSubject to :\r\nx1 \u2212 2x2 + x3 \u2265 4\r\n2x1 + x2 + x3 \u2264 8\r\nx1 \u2212 x3 \u2265 0\r\nx1, x2, x3 \u2265 0\r\n\r\nThe solution of this LPP using Dual Simplex Method is :",
        "choices": [
            "x1=0, x2=0, x3=3 and Z=9",
            "x1=0, x2=6, x2=0 and Z=6",
            "x1=4, x2=0, x2=0 and Z=8",
            "x1=2, x2=0, x2=2 and Z=10"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Linear Programming",
        "task_id": "f4bc0e42-83b0-4e32-a3e2-7609a11e07d7"
    },
    {
        "question": "Question: Which of the following statements are true with reference to the way of describing XML data? \r(a)XML uses DTD to describe the data \r(b)XML uses XSL to describe the data \r(c)XML uses a description node to describe the data \rCodes:",
        "choices": [
            "(a) only",
            "(b) only",
            "(a) and (b)",
            "(a) and (c)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "XML",
        "task_id": "9283cfec-cb65-4a40-aa7f-69b9a778e513"
    },
    {
        "question": "Question: The behaviour of the document elements in XML can be defined by",
        "choices": [
            "Using document object",
            "Registering appropriate event handlers",
            "Using element object",
            "All of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "XML",
        "task_id": "ab023008-8cd8-401b-b3ff-4251b7076f93"
    },
    {
        "question": "Question: Which selector in CSS is used to select all elements that are given within a particular range value?",
        "choices": [
            ":invalid",
            ":long",
            ":in-range",
            ":last"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "CSS",
        "task_id": "bd20126b-94fa-4ddd-9032-f5f9f0337756"
    },
    {
        "question": "Question: Which of the below property in CSS is used to give a three diagonal sense of depth to an element ?",
        "choices": [
            "animation",
            "perspex",
            "sense",
            "perspective"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "CSS",
        "task_id": "c6372335-cca3-4bcd-a270-47549139041e"
    },
    {
        "question": "Question: Which below property of CSS is used to set the indentation of the first line in a block of text ?",
        "choices": [
            "text-indent property",
            "text-underlne-property",
            "text-decoration none",
            "text-overflow property"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "CSS",
        "task_id": "2c4203e1-52df-4a9b-9075-82c59b556b7c"
    },
    {
        "question": "Question: How do we set the default width of the font in CSS ?",
        "choices": [
            "font-stretch",
            "font-weight",
            "text-transform",
            "font-variant"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "CSS",
        "task_id": "360c6f0c-ffa3-4cbd-924a-cc79d10dce97"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfun main()\n{\n    val given = readLine()!!\n    println(if ( given.contains(\"AB\") || given.contains(\"BA\")) \"Yes\" else \"No\")\n}",
        "choices": [
            "Runtime Error",
            "Internal error",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Kotlin Programming",
        "task_id": "4357a034-b0f4-4c5a-94c7-cf58d40b368d"
    },
    {
        "question": "Question: Advantages of Non-Relational Databases are?",
        "choices": [
            "Massive dataset organization",
            "Flexible database expansion",
            "Multiple data structures",
            "All of these"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "891c1741-2723-462f-aeda-e8d28c53a1eb"
    },
    {
        "question": "Question: Non-Relational Databases are?",
        "choices": [
            "Non-Tabular based storage system",
            "No SQL",
            "More flexible than SQL based",
            "All of these"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "066decd9-77cc-4ffb-a48b-83221a7913ee"
    },
    {
        "question": "Question: For storing string we use which datatype?",
        "choices": [
            "Varchar",
            "String",
            "Text",
            "JSON"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "6f6f16e7-9828-4219-b2ab-88e3817a46f7"
    },
    {
        "question": "Question: Which of the following is not a valid use case for a document database?",
        "choices": [
            "a) Storing semi-structured data",
            "b) Providing flexible schema design",
            "c) Facilitating high-speed transactions",
            "d) Supporting distributed data management"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "675a37be-42fb-4715-9955-9d8d5e7604e2"
    },
    {
        "question": "Question: Which of the following is not a valid SQL join type?",
        "choices": [
            "a) Inner join",
            "b) Outer join",
            "c) Cross join",
            "d) Union join"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "f28fa0e1-9d1a-45a4-97fa-24ee04b98506"
    },
    {
        "question": "Question: Which of the following is not a common component of a database system?",
        "choices": [
            "a) Data dictionary",
            "b) Query language",
            "c) User interface",
            "d) File system"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "7d788aa0-33e5-4920-8ff6-106d6d8ba06a"
    },
    {
        "question": "Question: Which of the following is not a benefit of using a database management system (DBMS)?",
        "choices": [
            "a) Improved data sharing",
            "b) Reduced data redundancy",
            "c) Increased data security",
            "d) Decreased processing speed"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "83ddd118-4026-401a-805a-f5aa7e6b13c8"
    },
    {
        "question": "Question: Which of the following is a common advantage of relational databases over non-relational databases?",
        "choices": [
            "a) More flexible schema design",
            "b) Better scalability for large datasets",
            "c) Higher performance for analytical processing",
            "d) Strong data consistency and integrity"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "aa303b24-4b57-4478-9375-1d0df4b9c22e"
    },
    {
        "question": "Question: Which of the following is a key consideration when choosing between a relational and non-relational database?",
        "choices": [
            "a) The size of the dataset being managed",
            "b) The performance requirements of the application",
            "c) The complexity of the data relationships",
            "d) The need for high data consistency and integrity"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management",
        "task_id": "6595cebb-1d4e-4a49-8b60-3ab190cec7ab"
    },
    {
        "question": "Question: Which of the following principles of project management defines and controls the functions that are to be included in the system?",
        "choices": [
            "Project quality management",
            "Project time management",
            "Project cost management",
            "Project scope management"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Project Management",
        "task_id": "7f8eea9f-0985-46dd-8c01-26cd9f9822e3"
    },
    {
        "question": "Question: What must be the missing logic below so as to print mirror of a tree as below as an example?\n<img src=\"https://www.hello_world.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9.png\" alt=\"data-structure-questions-answers-binary-trees-linked-lists-q9\" width=\"394\" height=\"158\" class=\"aligncenter size-full wp-image-155640\" srcset=\"https://www.hello_world.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9.png 394w, https://www.hello_world.com/wp-content/uploads/2017/08/data-structure-questions-answers-binary-trees-linked-lists-q9-300x120.png 300w\" sizes=\"(max-width: 394px) 100vw, 394px\" />\nif(rootnode):\n  mirror(rootnode-->left)\n  mirror(rootnode-->right)\n\u00a0\n  //missing\n\u00a0\nend",
        "choices": [
            "swapping of left and right nodes is missing",
            "swapping of left with root nodes is missing",
            "swapping of right with root nodes is missing",
            "nothing is missing"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "27b4fdd4-8461-4661-b0d4-999d789bd762"
    },
    {
        "question": "Question: What is the code below trying to print?\nvoid print(tree *root,tree *node)\n{\n  if(root ==null) return 0\n  if(root-->left==node || root-->right==node) || print(root->left,node)\n  ||printf(root->right,node)\n  {\n     print(root->data)\n  }\n}",
        "choices": [
            "just printing all nodes",
            "not a valid logic to do any task",
            "printing ancestors of a node passed as argument",
            "printing nodes from leaf node to a node passed as argument"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "a68f748e-3205-4ccb-a37b-33bd31efa96e"
    },
    {
        "question": "Question: What does the following piece of code do?\npublic void func(Tree root)\n{\n\tSystem.out.println(root.data());\n\tfunc(root.left());\n\tfunc(root.right());\n}",
        "choices": [
            "Preorder traversal",
            "Inorder traversal",
            "Postorder traversal",
            "Level order traversal"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "7d2693ce-3ec9-484e-9365-daaabdd42e92"
    },
    {
        "question": "Question: The height of a tree is the length of the longest root-to-leaf path in it. The maximum and minimum number of nodes in a binary tree of height 5 are",
        "choices": [
            "63 and 6, respectively",
            "64 and 5, respectively",
            "32 and 6, respectively",
            "31 and 5, respectively"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "a126d20c-90d6-4e91-8beb-b94f5a4aca44"
    },
    {
        "question": "Question: A binary tree T has 20 leaves. The number of nodes in T having two children is",
        "choices": [
            "18",
            "19",
            "17",
            "Any number between 10 and 20"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "4cf1a5cb-9ff0-415d-a712-50a4b9132953"
    },
    {
        "question": "Question: In a binary tree, the number of internal nodes of degree 1 is 5, and the number of internal nodes of degree 2 is 10. The number of leaf nodes in the binary tree is",
        "choices": [
            "10",
            "11",
            "12",
            "15"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "45d98d97-1620-4887-9ea6-83dcb524e982"
    },
    {
        "question": "Question: Consider a segment tree built on an array of N elements. What is the minimum number of node updates required to rebuild the entire tree if the original array is reversed?",
        "choices": [
            "N",
            "N - 1",
            "2N - 1",
            "N log N"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "781e244d-a9ce-4052-893b-c8ef7e3edbd4"
    },
    {
        "question": "Question: Suppose the numbers 7, 5, 1, 8, 3, 6, 0, 9, 4, 2 are inserted in that order into an initially empty binary search tree. The binary search tree uses the usual ordering on natural numbers. What is the inorder traversal sequence of the resultant tree?",
        "choices": [
            "7 5 1 0 3 2 4 6 8 9",
            "0 2 4 3 1 6 5 9 8 7",
            "0 1 2 3 4 5 6 7 8 9",
            "9 8 6 4 2 3 0 1 5 7"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "7a202ff6-78aa-4b31-bfa7-2b9c562118a6"
    },
    {
        "question": "Question: The preorder traversal sequence of a binary search tree is 30, 20, 10, 15, 25, 23, 39, 35, 42. Which one of the following is the postorder traversal sequence of the same tree?",
        "choices": [
            "10, 20, 15, 23, 25, 35, 42, 39, 30",
            "15, 10, 25, 23, 20, 42, 35, 39, 30",
            "15, 20, 10, 23, 25, 42, 35, 39, 30",
            "15, 10, 23, 25, 20, 35, 42, 39, 30"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "421316b2-30f6-4d5b-8f6e-1352a337d191"
    },
    {
        "question": "Question: A 5-ary tree is tree in which every internal node has exactly 5 children. The number of left nodes in such a tree with 8 internal nodes will be:",
        "choices": [
            "30",
            "33",
            "45",
            "130"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "37b3e7dc-fef4-440a-aa22-f036077b07dd"
    },
    {
        "question": "Question: You are given the postorder traversal, P, of a binary search tree on the n elements 1, 2, ..., n. You have to determine the unique binary search tree that has P as its postorder traversal. What is the time complexity of the most efficient algorithm for doing this?",
        "choices": [
            "O(Logn)",
            "O(n)",
            "O(nLogn)",
            "none of the above, as the tree cannot be uniquely determined."
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "6756e4ec-cc8a-408e-afd3-1fc1025a98c1"
    },
    {
        "question": "Question: The number of leaf nodes in a rooted tree of n nodes, with each node having 0 or 3 children is:",
        "choices": [
            "n/2",
            "(n-1)/3",
            "(n-1)/2",
            "(2n+1)/3"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Tree Traversal",
        "task_id": "9531389a-7207-4fa6-88f6-78854c54880c"
    },
    {
        "question": "Question: Given the following adjacency matrix of a graph(G) determine the number of \tcomponents in the G.\n[0 1 1 0 0 0], \n[1 0 1 0 0 0],\n[1 1 0 0 0 0],\n[0 0 0 0 1 0],\n[0 0 0 1 0 0],\n[0 0 0 0 0 0].",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "be65af97-1d17-4eaf-a8b2-9980bdac937c"
    },
    {
        "question": "Question: Complete the program.\nn=rows[W]\nD(0)=W\nfor k=1 to n\n     do for i=1 to n\n          do for j=1 to n\n                 do ________________________________\nreturn D(n)",
        "choices": [
            "dij(k)=min(dij(k-1), dik(k-1) \u2013 dkj(k-1))",
            "dij(k)=max(dij(k-1), dik(k-1) \u2013 dkj(k-1))",
            "dij(k)=min(dij(k-1), dik(k-1) + dkj(k-1))",
            "dij(k)=max(dij(k-1), dik(k-1) + dkj(k-1))"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "d99675d7-b254-4688-a25b-e9cdd5be4a86"
    },
    {
        "question": "Question: What is the largest integer m such that every simple connected graph with n vertices and n edges contains at least m different spanning trees?",
        "choices": [
            "1",
            "2",
            "3",
            "n"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "377124e2-ffe8-4ceb-bc08-5e92b78a5bd8"
    },
    {
        "question": "Question: Consider the following undirected graph with edge weights as shown:\r\r \r\r\r\rThe number of minimum-weight spanning trees of the graph is ___________.",
        "choices": [
            "3",
            "4",
            "5",
            "2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "c30ac176-77f5-4c9f-b762-0cf9f3fcdd5d"
    },
    {
        "question": "Question: Which of the following statements about disjoint-set forests is false?",
        "choices": [
            "Disjoint-set forests can be used to efficiently detect cycles in a graph.",
            "Disjoint-set forests can handle disconnected components efficiently.",
            "The union operation in disjoint-set forests can be performed in constant time.",
            "Disjoint-set forests are commonly used in minimum spanning tree algorithms."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "53e4c8f8-d6ed-4cea-bb34-7607897c69c3"
    },
    {
        "question": "Question: If all the edge weights of an undirected graph are positive, then any subset of edges that connects all the vertices and has minimum total weight is a",
        "choices": [
            "Hamiltonian cycle",
            "grid",
            "hypercube",
            "tree"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "d59d1ae6-bb38-495b-bbb3-94f0467a3237"
    },
    {
        "question": "Question: Consider a directed graph with n vertices and m edges such that all edges have same edge weights. Find the complexity of the best known algorithm to compute the minimum spanning tree of the graph?",
        "choices": [
            "O(m+n)",
            "O(m logn)",
            "O(mn)",
            "O(n logm)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "4897006d-fdb6-405b-b47e-2d94c07761ce"
    },
    {
        "question": "Question: An A* algorithm is a heuristic search technique which",
        "choices": [
            "is like a depth-first search where most promising child is selected for expansion",
            "generates all successor nodes and computes an estimate of distance (cost) from start node to a goal node through each of the successors. It then chooses the successor with shortest cost",
            "saves all path lengths (costs) from start node to all generated nodes and chooses shortest path for further expansion.",
            "none of the above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "36e82e76-f3e9-4f75-89ba-91667fe0b973"
    },
    {
        "question": "Question: What is the size of the smallest MIS(Maximal Independent Set) of a chain of nine nodes?",
        "choices": [
            "5",
            "4",
            "3",
            "2"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "76b571cb-8f28-4931-8fe0-530dfe46bdb5"
    },
    {
        "question": "Question: Consider the following two problems of graph.  \r\r1)   Given a graph, find if the graph has a cycle that visits every vertex exactly once except the first visited vertex which must be visited again to complete the cycle.\r\r2)  Given a graph, find if the graph has a cycle that visits every edge exactly once.\r\rWhich of the following is true about above two problems.",
        "choices": [
            "Problem 1 belongs NP Complete set and 2 belongs to P",
            "Problem 1 belongs to P set  and 2 belongs to NP Complete set",
            "Both problems belong to P set",
            "Both problems belong to NP complete set"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "6afa1260-c1a5-4639-965a-05bb04f75b5c"
    },
    {
        "question": "Question: A min- Heap is a complete binary tree.",
        "choices": [
            "True",
            "False"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "Graph Theory",
        "task_id": "50458353-ecb0-4562-8f2a-1d4a899823ad"
    },
    {
        "question": "Question: In an unweighted, undirected connected graph, the shortest path from a node S to every other node is computed most efficiently, in terms of time complexity by",
        "choices": [
            "Dijkstra\u2019s algorithm starting from S.",
            "Warshall\u2019s algorithm",
            "Performing a DFS starting from S.",
            "Performing a BFS starting from S."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "4ecfab0d-3349-4b13-a3c1-c26572704a8d"
    },
    {
        "question": "Question: Consider the directed graph shown in the figure below. There are multiple shortest paths between vertices S and T. Which one will be reported by Dijstra?s shortest path algorithm? Assume that, in any iteration, the shortest path to a vertex v is updated only when a strictly shorter path to v is discovered.",
        "choices": [
            "SDT",
            "SBDT",
            "SACDT",
            "SACET"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "e902a49a-b675-4be1-b07e-8a11ffca966e"
    },
    {
        "question": "Question: Let G be a weighted graph with edge weights greater than one and G\\'be the graph constructed by squaring the weights of edges in G. Let T and T\\' be the minimum spanning trees of G and G\\', respectively, with total weights t and t\\'. Which of the following statements is TRUE?",
        "choices": [
            "T\\' = T with total weight t\\' = t2",
            "T\\' = T with total weight t\\' < t2",
            "T\\' != T but total weight t\\' = t2",
            "None of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "e6cc96a1-b011-47fd-bc6e-6b5f8a122b96"
    },
    {
        "question": "Question: The Breadth First Search algorithm has been implemented using the queue data structure. One possible order of visiting the nodes of the following graph is",
        "choices": [
            "MNOPQR",
            "NQMPOR",
            "QMNPRO",
            "QMNPOR"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "13ce7e6d-433e-4741-89fe-94d5f4a0f14f"
    },
    {
        "question": "Question: Which of the following is application of Breath First Search on the graph?",
        "choices": [
            "Finding diameter of the graph",
            "Finding bipartite graph",
            "Both (a) and (b)",
            "None of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "30c71b6d-5739-4de3-a857-73d93b66b66c"
    },
    {
        "question": "Question: Consider the weighted undirected graph with 4 vertices, where the weight of edge {i, j} g is given by the entry\rWij in the matrix W\r  \rThe largest possible integer value of x, for which at least one shortest path between some pair of vertices will contain the edge with weight x is ________\r\r\u00a0\rNote : This question was asked as Numerical Answer Type.",
        "choices": [
            "8",
            "12",
            "10",
            "11"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "1842559d-98d3-4e05-a08f-f085f24a67cb"
    },
    {
        "question": "Question: Consider the tree arcs of a BFS traversal from a source node W in an unweighted, connected, undirected graph. The tree T formed by the tree arcs is a data structure for computing.",
        "choices": [
            "the shortest path between every pair of vertices.",
            "the shortest path from W to every vertex in the graph.",
            "the shortest paths from W to only those nodes that are leaves of T.",
            "the longest path in the graph"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "c86f8493-a55b-45eb-a211-b295d7f56a6b"
    },
    {
        "question": "Question: Suppose depth first search is executed on the graph below starting at some unknown vertex. Assume that a recursive call to visit a vertex is made only after first checking that the vertex has not been visited earlier. Then the maximum possible recursion depth (including the initial call) is _________.",
        "choices": [
            "17",
            "18",
            "19",
            "20"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Graph Theory",
        "task_id": "23cabf86-c606-4808-928d-da5c45bfe18a"
    },
    {
        "question": "Question: Consider a hash table of size seven, with starting index zero, and a hash function (7x+3) mod 4. Assuming the hash table is initially empty, which of the following is the contents of the table when the sequence 1, 3, 8, 10 is inserted into the table using closed hashing ? Here \u201c__\u201d denotes an empty location in the table.",
        "choices": [
            "3, 10, 1, 8, __ , __ , __",
            "1, 3, 8, 10, __ , __ , __",
            "1, __ , 3, __ , 8, __ , 10",
            "3, 10, __ , __ , 8, __ , __"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Hash Table",
        "task_id": "ae369c3f-9c6d-4f71-b742-3da1b100d663"
    },
    {
        "question": "Question: A hash function h defined h(key)=key mod 7, with linear probing, is used to insert the keys 44, 45, 79, 55, 91, 18, 63 into a table indexed from 0 to 6. What will be the location of key 18 ?",
        "choices": [
            "3",
            "4",
            "5",
            "6"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Hash Table",
        "task_id": "27f7a1d7-8f41-4c8b-bb4a-bcf55e579997"
    },
    {
        "question": "Question: A hash table with 10 buckets with one slot per bucket is depicted here. The symbols, S1 to S7 are initially entered using a hashing function with linear probing. The maximum number of comparisons needed in searching an item that is not present is",
        "choices": [
            "4",
            "5",
            "6",
            "3"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Hash Table",
        "task_id": "81b129e9-27eb-4be5-be02-063f3deda004"
    },
    {
        "question": "Question: Consider a hash table of size m = 100 and the hash function h(k) = floor(m(kA mod 1)) for  Compute the location to which the key k = 123456 is placed in hash table.",
        "choices": [
            "77",
            "82",
            "88",
            "89"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Hash Table",
        "task_id": "a1b44c60-fa33-412a-a4a3-a519a95cabdd"
    },
    {
        "question": "Question: Consider double hashing of the form\rh(k,i)=(h\u200b 1\u200b (k)+ih\u200b 2\u200b (k)) mod m\rWhere h\u200b 1\u200b (k)=k mod m\rh\u200b 2\u200b (k)=1+(k mod n)\rWhere n=m-1and m=701\rfor k=123456, what is the difference between first and second probes in terms of slots?",
        "choices": [
            "255",
            "256",
            "257",
            "258"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Hash Table",
        "task_id": "67c70582-0ac0-4ba3-91ea-c02cda701b8a"
    },
    {
        "question": "Question: Rohit and Sanjay have money in the ratio 5:12. Sanjay and Ramesh also have money in the same ratio 5:12. If Rohit has Rs. 1000, then how much money did Ramesh has?",
        "choices": [
            "Rs. 2400",
            "Rs. 2880",
            "Rs. 5760",
            "none of these"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "None of the above",
        "task_id": "4cfcc0d8-b42f-4d05-936a-8ffa1b5ec945"
    },
    {
        "question": "Question: When does the ArrayIndexOutOfBoundsException occur?",
        "choices": [
            "Compile time",
            "Run time",
            "Not an Exception",
            "None"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java",
        "task_id": "4cbac619-d178-41f6-bbe0-dab60a6f8c84"
    },
    {
        "question": "Question: What will be the output of the following JAVA program?\u00a0\n\n\nclass GFG\n{\n   static int d=1;\n   static void count(int n)\n    {\n    System.out.print(n+\" \");\n    System.out.print(d+\" \");\n    d++;\n    if(n > 1) count(n-1);\n    System.out.print(d+\" \");\n  }\n\n public static void main(String args[])\n    {\n       count(3);\n    }\n}\n\n``````Java",
        "choices": [
            "3 1 2 2 1 3 4 4 4",
            "3 1 2 1 1 1 2 2 2",
            "3 1 2 2 1 3 4",
            "3 1 2 1 1 1 2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java",
        "task_id": "b7de2b3b-9b75-490e-a6a3-135c5f668790"
    },
    {
        "question": "Question: Select the pair that best expresses a relationship similar to that expressed in the below pair: \rChildren : Pediatrician",
        "choices": [
            "Adult : Orthopaedist",
            "Females : Gynaecologist",
            "Kidney : Dermatologist",
            "Skin : Nephrologist"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Analogy",
        "task_id": "1d86b15b-bf34-456d-9a4d-f4e6121ceb1b"
    },
    {
        "question": "Question: The directory can be viewed as ________ that translates filenames into their directory entries",
        "choices": [
            "Symbol table",
            "Partition",
            "Swap space",
            "Cache"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Analogy",
        "task_id": "903a3f78-059a-4b0e-9178-94db4aa3480c"
    },
    {
        "question": "Question: How to express that some person keeps animals as pets?",
        "choices": [
            "(A)",
            "(B)",
            "(C)",
            "(D)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Analogy",
        "task_id": "fbc4d3f6-f131-447f-b5aa-4a9702ed8abd"
    },
    {
        "question": "Question: The feature in object-oriented programming that allows the same operation to be carried out differently, depending on the object, is:",
        "choices": [
            "Inheritance",
            "Polymorphism",
            "Overfunctioning",
            "Overriding"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "40113744-20a8-449b-8c4c-579e2629f46f"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>\n#include <string>\nusing namespace std;\nclass A\n{\n\tstatic int a;\n    public:\n\tvoid show()\n        {\n\t\ta++;\n\t\tcout<<\"a: \"<<a<<endl;\n\t}\n};\n\u00a0\nint A::a = 5;\n\u00a0\nint main(int argc, char const *argv[])\n{\n\tA a;\n\treturn 0;\n}",
        "choices": [
            "Error as a private member a is referenced outside the class",
            "Segmentation fault",
            "No output",
            "Program compiles successfully but gives run-time error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "18ce5558-fb02-4c74-9e5a-68a2e9b4ba73"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>\n#include <string>\nusing namespace std;\nclass Box\n{\n\tint capacity;\n    public:\n\tBox(int cap){\n\t\tcapacity = cap;\n\t}\n\u00a0\n\tfriend void show();\n};\n\u00a0\nvoid show()\n{\t\n\tBox b(10);\n\tcout<<\"Value of capacity is: \"<<b.capacity<<endl;\n}\n\u00a0\nint main(int argc, char const *argv[])\n{\n\tshow();\n\treturn 0;\n}",
        "choices": [
            "Value of capacity is: 10",
            "Value of capacity is: 100",
            "Error",
            "Segmentation fault"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "c5bb7151-b00e-49cc-a656-88c1324ccb34"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>\n#include <string>\nusing namespace std;\nclass B\n{\n\tint b;\n     public:\n\tB(){}\n\tB(int i){\n\t\tb = i;\n\t}\n\tint show(){\n\t\treturn b;\n\t}\n};\n\u00a0\nclass C\n{\n\tB b;\n     public:\n\tC(int i){\n\t\tb = B(i);\n\t}\n\tfriend void show();\n};\n\u00a0\nvoid show()\n{\n\tC c(10);\n\tcout<<\"value of b is: \"<<c.b.show()<<endl;\n}\n\u00a0\nint main(int argc, char const *argv[])\n{\n\tshow();\n\treturn 0;\n}",
        "choices": [
            "value of b is: 10",
            "value of b is: 12345435",
            "error",
            "segmentation fault"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "d425e257-0fd5-489a-9663-be4f929f6dfc"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    using namespace std;    class sample    {        private:        int* i;        int j;        public:        sample (int j);        ~sample ();        int& operator [] (int n);    };    int& sample::operator [] (int n)    {        return i[n];    }    sample::sample (int j)    {        i = new int [j];        j = j;    }    sample::~sample ()    {        delete [] i;    }    int main ()    {        sample m (5);        m [0] = 25;        m [1] = 20;        m [2] = 15;        m [3] = 10;        m [4] = 5;        for (int n = 0; n < 5; ++ n)        cout << m [n];        return 0;    }",
        "choices": [
            "252015105",
            "510152025",
            "51015",
            "51015210"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "e4eef3e5-cd96-4d27-a757-0461f5bc6518"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    using namespace std;    class three_d     {        int x, y, z;        public:        three_d() { x = y = z = 0; }        three_d(int i, int j, int k) { x = i; y = j; z = k; }        three_d operator()(three_d obj);        three_d operator()(int a, int b, int c);        friend ostream &operator<<(ostream &strm, three_d op);    };    three_d three_d::operator()(three_d obj)    {        three_d temp;        temp.x = (x + obj.x) / 2;        temp.y = (y + obj.y) / 2;        temp.z = (z + obj.z) / 2;        return temp;    }    three_d three_d::operator()(int a, int b, int c)    {        three_d temp;        temp.x = x + a;        temp.y = y + b;        temp.z = z + c;        return temp;    }        ostream &operator<<(ostream &strm, three_d op) {        strm << op.x << \", \" << op.y << \", \" << op.z << endl;        return strm;    }    int main()    {        three_d objA(1, 2, 3), objB(10, 10, 10), objC;        objC = objA(objB(100, 200, 300));        cout << objC;        return 0;    }",
        "choices": [
            "55, 106, 156",
            "55, 106",
            "55, 106, 159",
            "55, 106, 158"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "917e6bec-1f19-4adc-b660-171b01d8c8ac"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>\n#include <string>\nusing namespace std;\nclass A\n{\n\tint a;\n   public: \n\tA(){\n\t\ta = 0;\n\t}\n\tvoid show(){\n\t\ta++;\n\t\tcout<<\"a: \"<<a<<endl;\n\t}\n};\n\u00a0\nclass B: private A\n{\n   public:\n\u00a0\n};\n\u00a0\nint main(int argc, char const *argv[])\n{\n\tB b;\n\tb.show();\n\treturn 0;\n}",
        "choices": [
            "Error",
            "Segmentation fault",
            "a: 1",
            "a: 0"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "5d69f781-1186-4d72-ace1-d71854bb4a11"
    },
    {
        "question": "Question: What will be the output of the following Java code?\n    class area {        public static void main(String args[])         {                 double r, pi, a;             r = 9.8;             pi = 3.14;             a = pi * r * r;             System.out.println(a);        }     }",
        "choices": [
            "301.5656",
            "301",
            "301.56",
            "301.56560000"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Object-Oriented Programming",
        "task_id": "a5bb01fc-5b2d-4109-9e89-5367da61c0dd"
    },
    {
        "question": "Question: What does this []+ suggests?",
        "choices": [
            "1 or more",
            "1",
            "0",
            "None of these"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "a580cf5e-3b69-413a-92dc-ddacc03d943d"
    },
    {
        "question": "Question: What is regex in SQL?",
        "choices": [
            "used for pattern matching",
            "searching a string",
            "modifying a string",
            "None of these"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "a7a16f97-0be8-42a3-9419-cc5eb9a91e7f"
    },
    {
        "question": "Question: What does this syntax mean-[^abc]",
        "choices": [
            "including all the characters with abc",
            "excluding all the characters with abc",
            "depends on the compiler",
            "None of these"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "ace80a42-91d7-4528-adc3-3023815163df"
    },
    {
        "question": "Question: What does this []? question mark suggests here?",
        "choices": [
            "0 or 1",
            "1",
            "0",
            "None of these"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "ddddc849-c03e-4050-babe-42548fa563e1"
    },
    {
        "question": "Question: What does this []* asterisk suggests here?",
        "choices": [
            "0 or 1",
            "0 or more",
            "1",
            "None of these"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "4a1a8867-4ae8-4ed5-a5ab-d408d1b9c77a"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n       System.out.println(Pattern.matches(\"[amn]\", \"abcd\"));",
        "choices": [
            "true",
            "false",
            "undefined",
            "a"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Regular Expressions",
        "task_id": "6c7164d1-ce19-4493-969c-7028c51c986b"
    },
    {
        "question": "Question: What will be the output of below mentioned code snippet?\n<p style=\"color: red\">text</p>",
        "choices": [
            "make that specific paragraph red.",
            "error",
            "nothing happens",
            "none of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML/CSS",
        "task_id": "67c9d23a-2907-493d-9321-070353faf991"
    },
    {
        "question": "Question: What does this code do?\nCode:\n@media only screen and (orientation: landscape) {\n    body {\n        background-color: lightblue;\n    }\n}",
        "choices": [
            "web page will have a lighblue background if the orientation is in landscape mode",
            "web page will have a lighblue background if the orientation is not in landscape mode",
            "web page will have a red background if the orientation is in landscape mode",
            "None of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML/CSS",
        "task_id": "2f13ad4f-5805-4f42-89b9-2d44d1216928"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n<p id=\"demo\"></p>\n<script>\nfunction myFunction() \n{\n    document.getElementById(\"demo\").innerHTML = Math.cbrt(125);\n}\n</script>",
        "choices": [
            "125",
            "25",
            "5",
            "Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "126c3f5a-6d7a-4de9-8481-ed9e09df4d57"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\nvar grade='B';  \nvar result;  \nswitch(grade)\n{  \n    case 'A':\n    {  \n        result+=\"10\"; \n        break;\n    } \n    case 'B':\n    {  \n        result+=\" 9\";\n        break;\n    }  \n    case 'C':\n    {  \n        result+=\" 8\";\n        break;\n    }  \n    default:  \n    result+=\" 0\";  \n}  \ndocument.write(result);",
        "choices": [
            "10",
            "9",
            "8",
            "0"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "150feac8-e1dd-4025-969e-9ac3bd63f378"
    },
    {
        "question": "Question: What will be the role of the continue keyword in the following JavaScript code snippet?\nwhile (a != 0)\n{\n   if (a == 1) \n       continue;\n   else \n       a++;\n}",
        "choices": [
            "The continue keyword restarts the loop",
            "The continue keyword skips the next iteration",
            "The continue keyword skips the rest of the statements in that iteration",
            "The continue keyword breaks out of the loop"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "3f77afe4-1aa9-4a37-abe2-2e48bc1754c3"
    },
    {
        "question": "Question: What could be the task of the statement debugger in the following JavaScript code?\nfunction f(o) \n{\n     if (o === undefined) debugger;\n}",
        "choices": [
            "It does nothing but a simple breakpoint",
            "It debugs the error in that statement and restarts the statement's execution",
            "It is used as a keyword that debugs the entire program at once",
            "It is used to find error in the statement"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "021e378f-f9b3-4e96-b7ef-44b0ed5aebfb"
    },
    {
        "question": "Question: What will be the output of the following JavaScript statement?\nvar grand_Total=eval(\"10*10+5\");",
        "choices": [
            "10*10+5",
            "105 as a string",
            "105 as an integer value",
            "Exception is thrown"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "852c3d1e-27e9-4700-8ef7-839496e2db45"
    },
    {
        "question": "Question: What will be the last statement return in the following JavaScript code?\nfunction constfuncs() \n{\n    var funcs = [];\n    for(var i = 0; i < 10; i++)\n        funcs[i] = function() { return i; };\n    return funcs;\n}\nvar funcs = constfuncs();\nfuncs[5]()",
        "choices": [
            "9",
            "0",
            "10",
            "12"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "99f0b3c5-bcf2-42cd-8380-97dfb8d2fd62"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n   emp={id:102,name:\"Shyam Kumar\",salary:40000}  \n   document.write(emp.id+\" \"+emp.name+\" \"+emp.salary);",
        "choices": [
            "102 4000 Shyam Kumar",
            "102 4000",
            "102 Shyam Kumar 40000",
            "102 shyam kumar 40000"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "cac683d6-4bf9-4f75-8d2a-1f8f4fa10d18"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\nvar emp=new Object();  \nemp.name=\"Ravi Malik\";  \nemp.salary=50000;  \ndocument.write(\"emp.name+\" \"+emp.salary);",
        "choices": [
            "Ravi malik 5000",
            "Ravi Malik 50000",
            "Ravi malik",
            "50000"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "9a15a5f2-57ff-4dff-891e-93e6d55ef6cf"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\nset.add(\"AngularJS\");  \nset.add(\"Bootstrap\");    \nset.delete(\"Bootstrap\");  \ndocument.writeln(set.size);",
        "choices": [
            "2",
            "1",
            "0",
            "Undefined"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "b39d1325-2790-4c17-aa67-ce2bc913b7ae"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\nset.add(\"one\");  \nset.add(\"two\");  \nset.add(\"three\");    \nset.clear();  \ndocument.writeln(set.size);",
        "choices": [
            "one",
            "1",
            "2",
            "0"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "d89d7457-87e7-4595-a1c6-b6121a8593f3"
    },
    {
        "question": "Question: What convenience does the following JavaScript code snippet provide?\nlet succ = function(x) x+1, yes = function() true, no = function() false;",
        "choices": [
            "Functional behaviour",
            "Modular behaviour",
            "No convenience",
            "Shorthand expression"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "950e4840-dfe1-4d25-aafc-016d027838b9"
    },
    {
        "question": "Question: What is the result of the following code snippet?\nwindow.location === document.location",
        "choices": [
            "False",
            "True",
            "0",
            "1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "343fe380-2c3d-4392-bf8f-7a97055d03f5"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n<p id=\"Element\">Head</p>\nfunction myFunction() \n{\n   var x = document.getElementsByTagName(\"P\").namedItem(\"Element\");\n   alert(x.innerHTML);\n}",
        "choices": [
            "Head",
            "Element",
            "Error",
            "Undefined"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "85843cb3-cf31-4afc-a20a-b6dd8ac86cb1"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\nfunction myFunction() \n{\n    document.getElementById(\"demo\").innerHTML = Boolean(10 > 9);\n}",
        "choices": [
            "true",
            "false",
            "error",
            "0"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "e291b466-c6df-4e26-bc1a-3aa80cf27e3c"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n<p id=\"demo\"></p>\n<script>\nfunction myFunction() \n{\n   var patt = new RegExp(\"World\", \"g\");\n   var res = patt.toString();\n   document.getElementById(\"demo\").innerHTML = res;\n}\n</script>",
        "choices": [
            "/World/g",
            "World",
            "World/g",
            "Undefined"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "05599e85-1ea4-424a-8ecf-2999d26a7886"
    },
    {
        "question": "Question: What will be the output of the following JavaScript code?\n<p id=\"demo\"></p>\n<script>\nfunction myFunction() \n{\n   var str = \"Is this all there is?\";\n   var patt1 = /\\s/g;\n   var result = str.match(patt1);\n   if(result)\n  \tresult=true;\n   else \n  \tresult=false;\n   document.getElementById(\"demo\").innerHTML = result;\n}\n</script>",
        "choices": [
            "true",
            "false",
            "error",
            "undefined"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "3152640e-6126-482f-bd9a-e88f3c28ff7a"
    },
    {
        "question": "Question: What is being done in the following JavaScript code?\n<script>\nif (window.attachEvent)\nwindow.attachEvent('onload', fetch);\nelse\nwindow.addEventListener('load', fetch, false);\n</script>",
        "choices": [
            "Event and EventListener is created according to the if-else",
            "The values are updated",
            "The value is called",
            "The values are stored"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "JavaScript",
        "task_id": "b6d9a626-9f23-43f6-8507-aad9b37bf919"
    },
    {
        "question": "Question: Is it possible to reduce the number of functions in the following mathematical relation?\n\tl=cos(2*pi*sin(n/x))",
        "choices": [
            "Yes",
            "No",
            "Maybe",
            "Obviously"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Mathematics",
        "task_id": "8edd0167-9b27-4ebb-912a-8f69fc1c7bd3"
    },
    {
        "question": "Question: What is the value of the following expression?\n2+4.00, 2**4.0",
        "choices": [
            "(6.0, 16.0)",
            "(6.00, 16.00)",
            "(6, 16)",
            "(6.00, 16.0)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Mathematics",
        "task_id": "abf25500-389a-44c8-bf11-f8f255f67046"
    },
    {
        "question": "Question: What will be the value of the following Python expression?\n4+2**5//10",
        "choices": [
            "3",
            "7",
            "77",
            "0"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Mathematics",
        "task_id": "3534250c-4e69-4724-97ad-647e7692af7b"
    }
]