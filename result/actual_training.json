[
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    #define MAX 2    enum bird {SPARROW = MAX + 1, PARROT = SPARROW + MAX};    int main()    {        enum bird b = PARROT;        printf(\"%d\\n\", b);        return 0;    }",
        "choices": [
            "Compilation error",
            "5",
            "Undefined value",
            "2"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "e966ab3e-c844-45b8-b430-d0850992752f"
    },
    {
        "question": "Question: What will be the output of the following C code?\nchar str[]; \nstrcpy(str, \"Hello\"); \nres = atof(str);\nprintf(\"String value = %s, Float value = %f\\n\", str, res);",
        "choices": [
            "String value = Hello, Float value = 0.000000",
            "String value = Hello, Float value = 0",
            "String value = \u201cHello\u201d , Float value = 0.000000",
            "String value = \u201cHello\u201d , Float value = 0"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "07bcbd85-72a3-40c1-a608-451b4be6b4cf"
    },
    {
        "question": "Question: What is the problem with this server program?\n   #include<stdio.h>   #include<stdlib.h>   #include<netinet/in.h>   #include<sys/types.h>   #include<sys/socket.h>\u00a0   int main()   {       int fd_server, fd_client, len;       struct sockaddr_in add_server;       fd_server = socket(AF_INET,SOCK_STREAM,0);       if (fd_server == -1)       {           perror(\"fd_sock\");           exit(1);       }       add_server.sin_family = AF_INET;       add_server.sin_port = htons(4001);       add_server.sin_addr.s_addr = inet_addr(\"122.23.1.1\");       len = sizeof(add_server);       if( bind(fd_server,(struct sockaddr*)&add_server,len) != 0)           perror(\"bind\");       if(listen(fd_server,5) != 0)           perror(\"listen\");       fd_client = accept(fd_server,(struct sockaddr*)&add_server,&len);       if(fd_client == -1)           perror(\"accept\");       return 0;   }",
        "choices": [
            "it can not accept the request of any client",
            "it will give the segmentation fault",
            "there is no problem with this program",
            "none of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "08b52659-8f15-41c0-b6e1-123155a46e68"
    },
    {
        "question": "Question: Which among the following is correct for the following code?\nclass A\n{  \n    public : class B \n    { \n        public : B(int i): data(i)\n        { \n        }\n        int data;\n    }\n};\nclass C: public A\n{\n     class D:public A::B{ };\n};",
        "choices": [
            "Multi-level inheritance is used, with nested classes",
            "Multiple inheritance is used, with nested classes",
            "Single level inheritance is used, with enclosing classes",
            "Single level inheritance is used, with both enclosing and nested classes"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "65e465ef-afb7-4ab5-a038-b6d22a272cdb"
    },
    {
        "question": "Question: What is the length of of the queue for pending connections in this program?\n   #include<stdio.h>   #include<sys/types.h>   #include<sys/un.h>   #include<sys/socket.h>\u00a0   int main()   {       struct sockaddr_un add_server;       int fd_server;       fd_server = socket(AF_UNIX,SOCK_STREAM,0);       if(fd_server == -1)           perror(\"socket\");       add_server.sun_family = AF_UNIX;       strcpy(add_server.sun_path,\"server_sock2\");       if( bind(fd_server,(struct sockaddr*)&add_server,sizeof(add_server)) != 0)           perror(\"bind\");       if( listen(fd_server,3) != 0)           perror(\"listen\");       return 0;   }",
        "choices": [
            "0",
            "1",
            "2",
            "3"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "d887174c-e12f-4d2e-b58f-4d75259ce359"
    },
    {
        "question": "Question: What is the output of the following code?\nfprintf(\u201c%f\u201d,.123)",
        "choices": [
            ".123000",
            "%f",
            "Error",
            ".123"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "7f805386-c964-46ab-a309-895bc9dbc69a"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    struct p    {        unsigned int x : 1;        unsigned int y : 1;    };    int main()    {        struct p p;        p.x = 1;        p.y = 2;        printf(\"%d\\n\", p.y);    }",
        "choices": [
            "1",
            "2",
            "0",
            "Depends  on the compiler"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "c994c43d-20c3-4d73-b6a8-9905dd2a936e"
    },
    {
        "question": "Question: What is missing in this logic of finding a path in the tree for a given sum (i.e checking whether there will be a path from roots to leaf nodes with given sum)?\ncheckSum(struct bin-treenode *root , int sum) :\n  if(root==null)\n    return sum as 0\n  else :\n     leftover_sum=sum-root_node-->value\n     //missing",
        "choices": [
            "code for having recursive calls to either only left tree or right trees or to both subtrees depending on their existence",
            "code for having recursive calls to either only left tree or right trees",
            "code for having recursive calls to either only left tree",
            "code for having recursive calls to either only right trees"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "95a6ce58-ca43-405d-9990-f62c5fa813f1"
    },
    {
        "question": "Question: What condition should be applied in the below code snippet to check whether a number is even or odd using Bitwise Operator?\n\n\n// C++ program to check for even or odd\n// using Bitwise operator\n#include <iostream>\nusing namespace std;\n\n// Returns true if n is even, else odd\nbool isEven(int n)\n{\n\n    if (______)\n        return 0;\n    return 1;\n}\n\n// Driver code\nint main()\n{\n    int n = 10;\n    isEven(n) ? cout << \"Even\" : cout << \"Odd\";\n    return 0;\n}\n\n``````C++",
        "choices": [
            "n | 2",
            "(n & 1 ==1)",
            "n>>1",
            "n<<1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "3bbc5d58-14ca-4e4f-be3f-74f48f491da3"
    },
    {
        "question": "Question: What will be output of the following c code?\n#include<stdio.h>\nconst enum Alpha\n{\n      X,\n      Y=5,\n      Z\n}p=10;\nint main()\n{\n    enum Alpha a,b;\n    a= X;\n    b= Z;\n    printf(\"%d\",a+b-p); \n    return 0; \n}",
        "choices": [
            "-4",
            "-5",
            "10",
            "11"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "dbbc6ae9-3f48-4828-b07e-5cde3815a91d"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    using namespace std;    int main ( )    {        static double i;        i = 20;        cout << sizeof(i);        return 0;    }",
        "choices": [
            "4",
            "2",
            "8",
            "garbage"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "5cd2b4f5-7cad-4c63-84d0-0356ea26ea27"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    void main()    {        int const k = 5;        k++;        printf(\"k is %d\", k);    }",
        "choices": [
            "k is 6",
            "Error due to const succeeding int",
            "Error, because a constant variable can be changed only twice",
            "Error, because a constant variable cannot be changed"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "a889fd47-d336-46ab-b99a-ab153e134371"
    },
    {
        "question": "Question: What is the output of this program?\n   #include<stdio.h>   #include<fcntl.h>   #include<sys/stat.h>   #include<semaphore.h>\u00a0   int main()   {       sem_t* sem_id;       sem_id = sem_open(\"sem_value\",O_CREAT,0666,0);       if(sem_id == SEM_FAILED)           perror(\"sem_open\");       sem_post(sem_id);       printf(\"Hello World\\n\");       if(sem_close(sem_id) == -1)           perror(\"sem_close\");       return 0;   }",
        "choices": [
            "this process will block",
            "this program will print the string \u201cSanfoundry\u201d",
            "segmentation fault",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "d1394fbb-e4b9-4542-ae0f-0f4bfa465aa2"
    },
    {
        "question": "Question: What will be the output of the following C code (considering sizeof char is 1 and pointer is 4)?\n    #include <stdio.h>    int main()    {        char *a[2] = {\"hello\", \"hi\"};        printf(\"%d\", sizeof(a));        return 0;    }",
        "choices": [
            "9",
            "4",
            "8",
            "10"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "35898be1-94f8-41aa-90f9-8baf6581a416"
    },
    {
        "question": "Question: What is the value stored in ans[3][3] when the following code is executed?\n#include<stdio.h>\nint balanced_partition(int *arr, int len)\n{\n     int sm = 0, i, j;\n     for(i = 0;i < len; i++)\n      sm += arr[i];\n     if(sm % 2 != 0)\n        return 0;\n     int ans[sm/2 + 1][len + 1];\n     for(i = 0; i <= len; i++)\n      ans[0][i] = 1;\n     for(i = 1; i <= sm/2; i++)\n      ans[i][0] = 0;\n     for(i = 1; i <= sm/2; i++)\n     {\n         for(j = 1;j <= len; j++)\n         {\n             ans[i][j] = ans[i][j-1];\n             if(i >= arr[j - 1])\n                ans[i][j] = ans[i][j] || ans[i - arr[j - 1]][j - 1];\n         }\n     }\n     return ans[sm/2][len];\n}\nint main()\n{\n     int arr[] = {3, 4, 5, 6, 7, 1}, len = 6;\n     int ans = balanced_partition(arr,len);\n     if(ans == 0)\n        printf(\"false\");\n     else\n        printf(\"true\");\n     return 0;\n}",
        "choices": [
            "0",
            "1",
            "-1",
            "-2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "8d872976-9163-4c6e-8331-ef1a7fdbed2c"
    },
    {
        "question": "Question: What is the output of this progarm?\n    #include<stdio.h>    #include<unistd.h>\u00a0    int main()    {        pid_t child;        int a, b;        a = 10;        b = 20;        child = fork();        a = a + b;        if(child > 0){            printf(\"%d\\n\",a);        }         return 0;    }",
        "choices": [
            "10",
            "30",
            "50",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "58ac2f9e-c14c-4a96-86d5-edb981ad36fb"
    },
    {
        "question": "Question: How do you access the element in the second row and third column of the following matrix?let matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];",
        "choices": [
            "a) matrix[1, 2]",
            "b) matrix[2][1]",
            "c) matrix[3][2]"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "C Programming Language",
        "task_id": "d1d5d1dc-db38-452d-be7f-d26609dd832c"
    },
    {
        "question": "Question: What will be the output of the following C code?\n#include<stdio.h>\n#define inline\ninline f(char a)\n    {\n        #ifdef inline\n        printf(\"%c\",a);\n        #endif \n    }\nmain()\n{\n    f('a');\n}",
        "choices": [
            "Error",
            "a",
            "No error but nothing will be printed as output",
            "97"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "bafd6a8d-eb2e-4c3d-8819-59403642d786"
    },
    {
        "question": "Question: What will the output of the following questions:\n\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n\n    string a = \"Hello\";\n    string b = \"World\";\n    string c = b.append(a);\n    cout << c << endl;\n\n    return 0;\n}\n\n``````C++",
        "choices": [
            "Hello world",
            "World hello",
            "WorldHello",
            "Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "88f8f7c0-66cc-43aa-8173-81ea7cc600e6"
    },
    {
        "question": "Question: This program will print\n   #include<stdio.h>   #include<signal.h>   #include<unistd.h>\u00a0   void response (int);   void response (int sig_no)   {       printf(\"%s is working\\n\",sys_siglist[sig_no]);   }   int main()   {       alarm(5);       sleep(50);       printf(\"Hello World\\n\");               signal(SIGALRM,response);       return 0;   }",
        "choices": [
            "\u201cSanfoundry\u201d",
            "\u201cAlarm clock\u201d",
            "nothing",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "e244d534-6e71-42f2-a8f1-e909fa354a7e"
    },
    {
        "question": "Question: What is the output of this program?\n   #include<stdio.h>   #include<unistd.h>\u00a0   int main()   {       pid_t child;       child = fork();       printf(\"%d\\n\",child);       return 0;   }",
        "choices": [
            "it will print \u201c0\u201d",
            "it will print the PID of the child process",
            "it will print \u201c0\u201d & the PID of the child process",
            "none of the mentioned"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "7fa6f74b-d419-4529-92df-1902e0034382"
    },
    {
        "question": "Question: What is the output of the following code?\nvoid my_recursive_function(int n)\n{\n    if(n == 0)\n    return;\n    printf(\"%d \",n);\n    my_recursive_function(n-1);\n}\nint main()\n{\n    my_recursive_function(10);\n    return 0;\n}",
        "choices": [
            "10",
            "1",
            "10 9 8 \u2026   1 0",
            "10 9 8 \u2026   1"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "b77a206f-5a81-4be3-b7a3-5cc260166395"
    },
    {
        "question": "Question: What does the following code do?\n#include<stdio.h>\nint search_num(int *arr, int num, int len)\n{\n     int i;\n     for(i = 0; i < len; i++)\n     if(arr[i] == num)\n      return i;\n     return -1;\n}\nint main()\n{\n      int arr[5] ={1,2,3,4,5},num=3,len = 5;\n      int indx = search_num(arr,num,len);\n      printf(\"Index of %d is %d\",num,indx);\n      return 0;\n}",
        "choices": [
            "Search and returns the index of all the occurrences of the number that is searched",
            "Search and returns the index of the first occurrence of the number that is searched",
            "Search and returns of the last occurrence of the number that is searched",
            "Returns the searched element from the given array"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "94c12952-8034-4be3-b2db-4c878ece4127"
    },
    {
        "question": "Question: What will be the data type returned for the following C function?\n    #include <stdio.h>    int func()    {        return (double)(char)5.0;    }",
        "choices": [
            "char",
            "int",
            "double",
            "multiple type-casting in return is illegal"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "ef04b74d-aa57-491b-a8c5-eebd256005c5"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    double foo();    int main()    {        foo();        return 0;    }    foo()    {        printf(\"2 \");        return 2;    }",
        "choices": [
            "2",
            "Compile time error",
            "Depends on the compiler",
            "Depends on the standard"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "4bcf853b-4356-4e5b-9914-99557647f642"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    struct point    {        int x;        int y;    };    struct notpoint    {        int x;        int y;    };    void foo(struct point);    int main()    {        struct notpoint p1 = {1, 2};        foo(p1);    }    void foo(struct point p)    {        printf(\"%d\\n\", p.x);    }",
        "choices": [
            "Compile time error",
            "1",
            "0",
            "Undefined"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "1ec7abca-58f7-4bf7-a00f-3018438ad768"
    },
    {
        "question": "Question: What is the output of this program?\n   #include<stdio.h>   #include<stdlib.h>   #include<unistd.h>\u00a0   int main()   {       pid_t child;       int a, status;       a = 10;       child = fork();       switch(child){           case -1 :               perror(\"fork\");               exit(1);           case 0 :               printf(\"%d\\n\",a);               break;           default :               wait(&status);               break;       }       return 0;   }",
        "choices": [
            "10",
            "garbage value",
            "segmentation fault",
            "program will give an error because variable \u201ca\u201d is not defined in child process"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "15058743-2bd4-46a3-accf-b0ed324c0a37"
    },
    {
        "question": "Question: Match the following.\n      List-I                  List-II\nA. Lexical analysis       1. Graph coloring\nB. Parsing                2. DFA minimization\nC. Register allocation    3. Post-order traversal\nD. Expression evaluation  4. Production tree",
        "choices": [
            "A \u2013 2, B \u2013 3, C \u2013 1, D \u2013 4",
            "A \u2013 2, B \u2013 1, C \u2013 4, D \u2013 3",
            "A \u2013 2, B \u2013 4, C \u2013 1, D \u2013 3",
            "A \u2013 2, B \u2013 3, C \u2013 4, D \u2013 1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Compiler Design",
        "task_id": "19dbb75b-42b9-4eee-9270-510fd7f208f0"
    },
    {
        "question": "Question: A CPU has a 32 KB direct mapped cache with 128 byte block size. Suppose A is a 2 dimensional array of size 512\u00d7512 with elements that occupy 8 bytes each. Consider the code segment\rfor (i =0; i < 512; i++) {\r\n  for (j =0; j < 512; j++) {\r\n    x += A[i][j];\r\n  }\r\n} \r\nAssuming that array is stored in order A[0][0], A[0][1], A[0][2]\u2026\u2026, the number of cache misses is",
        "choices": [
            "16384",
            "512",
            "2048",
            "1024"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Compiler Design",
        "task_id": "ee669635-8d94-4d30-9011-5b4930f7f285"
    },
    {
        "question": "Question: Select output for code.\nstatic void Main(string[] args)\n{\n    int i;\n    int j = 1;\n    int []ar = {21, 22, 13, 4};\n    switch (ar[j])\n    {\n        case 1:\n            i++;\n            break;\n        case 2:\n            i += 2;\n            j = 3;\n            continue;\n        case 3: \n           i %= 2;\n           j = 4;\n           continue;\n        default: \n           --i;\n    }\n    Console.WriteLine(i);\n    Console.ReadLine();\n}",
        "choices": [
            "23",
            "15",
            "Compile time error",
            "12"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C# Programming",
        "task_id": "e7d3c2c1-c535-44ca-acde-a44e09c6a32b"
    },
    {
        "question": "Question: What will be the output of the following C# code?\n enum colors {     red,     black,     pink } colors s = colors.black; type t; t = c.GetType(); string[] str; str = Enum.GetNames(t); Console.WriteLine(str[0]);",
        "choices": [
            "0",
            "black",
            "red",
            "1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C# Programming",
        "task_id": "ab18739a-39a1-4e6b-9def-056846aa3aa9"
    },
    {
        "question": "Question: What will be the output of the following C# code snippet?\n class Program {     public static void Main(string[] args)     {         try         {             int a = 1;             int b = 10 / a;             try             {                 if (a == 1)                     a = a / a - a;                 if (a == 2)                 {                     int[] c = { 1 };                     c[8] = 9;                 }             }             finally             {                 Console.WriteLine(\"A\");             }        }        catch (IndexOutOfRangeException e)        {             Console.WriteLine(\"B\");        }        Console.ReadLine();    } }",
        "choices": [
            "A",
            "B",
            "AB",
            "BA"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C# Programming",
        "task_id": "83ba532f-5d42-4aec-9e08-bdd91755d7b9"
    },
    {
        "question": "Question: With MySQL, how do you select a column named \"FirstName\" from a table named \"Persons\"?",
        "choices": [
            "EXTRACT FirstName FROM Persons",
            "SELECT FirstName FROM Persons",
            "SELECT Persons.FirstName"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "SQL Commands",
        "task_id": "aafaf188-a8a1-41d2-bab3-c1a25162a38b"
    },
    {
        "question": "Question: Which SQL function is used to find the highest value in a column?",
        "choices": [
            "AVG()",
            "SUM()",
            "COUNT()",
            "MAX()"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "7f788f05-fb52-45f8-bc92-a544caf34677"
    },
    {
        "question": "Question: Which SQL statement is used to commit a transaction?",
        "choices": [
            "COMMIT",
            "END TRANSACTION",
            "SAVE TRANSACTION",
            "FINALIZE TRANSACTION"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "cda5c678-89b5-4681-bbc2-2c0cfcffeca9"
    },
    {
        "question": "Question: What does the SQL function \"LENGTH()\" do?",
        "choices": [
            "Adds two numbers together",
            "Concatenates two or more strings",
            "Converts a string to lowercase",
            "Returns the length of a string"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "b89deb97-8330-48c8-af2d-abda4926d01f"
    },
    {
        "question": "Question: Which SQL operator is used to test for negation?",
        "choices": [
            "NOT",
            "EXISTS",
            "IS",
            "!="
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "56b9c7f4-acff-4982-9149-c2e1a4c5418b"
    },
    {
        "question": "Question: The LESS THAN operator can be written as:",
        "choices": [
            "<",
            "LT",
            "All three options are valid",
            "LESS THAN"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "7f8741b7-9d75-4dcb-aacd-64d8d28d94d2"
    },
    {
        "question": "Question: Consider a relation book (title, price) which contains the titles and prices of different books.\rAssuming that no two books have the same price, what does the following SQL query list ?\rSelect title\r\nfrom book as B\r\nwhere (select count ( * )\r\nfrom book as T\r\nwhere T.price > B.price) < 7",
        "choices": [
            "Titles of the six most expensive books.",
            "Title of the sixth most expensive books.",
            "Titles of the seven most expensive books.",
            "Title of the seventh most expensive books."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "c2e86d26-97fd-4c4d-9d06-1db03ed6e9c5"
    },
    {
        "question": "Question: Which SQL operator is used to check if a value is within a specified range?",
        "choices": [
            "IN",
            "BETWEEN",
            "LIKE",
            "IS NULL"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "42ef4821-3327-496b-a48a-cbf22c5a00ef"
    },
    {
        "question": "Question: Which SQL statement is used to create a new table?",
        "choices": [
            "INSERT",
            "CREATE",
            "ADD",
            "MAKE"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "90f769a6-68da-4dbf-a5c7-a961435da366"
    },
    {
        "question": "Question: The NOT EQUAL TO operator can be written as:",
        "choices": [
            "!=",
            "<>",
            "Both options are valid"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "SQL Commands",
        "task_id": "92870180-3b4e-45bc-9ff5-7b2ca9b16866"
    },
    {
        "question": "Question: With MySQL, how do you select all the records from a table named \"Persons\" where the \"FirstName\" is \"Peter\" and the \"LastName\" is \"Jackson\"?",
        "choices": [
            "SELECT FirstName='Peter', LastName='Jackson' FROM Persons",
            "SELECT * FROM Persons WHERE FirstName='Peter' AND LastName='Jackson'",
            "SELECT * FROM Persons WHERE FirstName<>'Peter' AND LastName<>'Jackson'"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "SQL Commands",
        "task_id": "88ee6f89-9ea6-427e-9799-605068cedb5f"
    },
    {
        "question": "Question: The NOT NULL constraint enforces a column to not accept NULL values.",
        "choices": [
            "True",
            "False"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "SQL Commands",
        "task_id": "81ba04a8-59d3-4ad4-9d86-60f2a9e92374"
    },
    {
        "question": "Question: Which MySQL statement is used to delete data from a database?",
        "choices": [
            "COLLAPSE",
            "DELETE",
            "REMOVE"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "SQL Commands",
        "task_id": "544eb76e-a2c3-4aab-9e6f-1de45f098357"
    },
    {
        "question": "Question: What kind of database is AWS DynamoDB?",
        "choices": [
            "NoSQL database",
            "Relational database",
            "Document database"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "AWS",
        "task_id": "41d6522c-85f8-4eb2-ba6f-c37cb97554b3"
    },
    {
        "question": "Question: AWS Regions is part of the AWS Global Infrastructure.",
        "choices": [
            "True.",
            "False."
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "AWS",
        "task_id": "cbfbce36-0cd4-4845-8831-fcb0aa68c4ab"
    },
    {
        "question": "Question: Two computers C1 and C2 are configured as follows. C1 has IP address 203.197.2.53 and netmask 255.255.128.0. C2 has IP address 203.197.75.201 and netmask 255.255.192.0. which one of the following statements is true?",
        "choices": [
            "C1 and C2 both assume they are on the same network",
            "C2 assumes C1 is on same network, but C1 assumes C2 is on a different network",
            "C1 assumes C2 is on same network, but C2 assumes C1 is on a different network",
            "C1 and C2 both assume they are on different networks."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "76c566b6-b8c5-4736-9574-e4c942b22c1d"
    },
    {
        "question": "Question: What is the default subnet mask for a class C network?",
        "choices": [
            "127.0.0.1",
            "255.0.0.255",
            "255.255.255.255",
            "255.255.255.0"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "1689d4fd-13b8-4c68-9006-ea1228e2fbe9"
    },
    {
        "question": "Question: Host X has IP address 192.168.1.97 and is connected through two routers R1 and R2 to an\u00adother host Y with IP address 192.168.1.80. Router R1 has IP addresses 192.168.1.135 and 192.168.1.110. R2 has IP addresses 192.168.1.67 and 192.168.1.155. The netmask used in the network is 255.255.255.224.\u00a0Given the information above, how many distinct subnets are guaranteed to already exist in the network?",
        "choices": [
            "6",
            "3",
            "2",
            "1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "f5fe875f-b996-427a-82da-bd8d205ab68e"
    },
    {
        "question": "Question: Consider the following three statements about link state and distance vector routing protocols, for a large network with 500 network nodes and 4000 links.\r[S1] The computational overhead in link state protocols \r\n     is higher than in distance vector protocols.\r\n[S2] A distance vector protocol (with split horizon) \r\n     avoids persistent routing loops, but not a link\r\n     state protocol.\r\n[S3] After a topology change, a link state protocol \r\n     will converge faster than a distance vector\r\n     protocol.\r\nWhich one of the following is correct about S1, S2, and S3 ?",
        "choices": [
            "S1, S2, and S3 are all true.",
            "S1, S2, and S3 are all false.",
            "S1 and S2 are true, but S3 is false",
            "S1 and S3 are true, but S2 is false"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "ff105ea7-1a17-4432-a876-ff9248dd997c"
    },
    {
        "question": "Question: What is the maximum number of characters (7 bits + parity ) that can be transmitted in a second on a 19.2 kbps line. This asynchronous transmission requires 1 start bit and 1 stop bit.",
        "choices": [
            "192",
            "240",
            "1920",
            "1966"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "a7f79f9f-289f-4a51-8953-e467be45a375"
    },
    {
        "question": "Question: Data is transmitted continuously at 2.048 Mbps rate for 10 hours and received 512 bits errors. What is the bit error rate?",
        "choices": [
            "6.9 e-9",
            "6.9 e-6",
            "69 e-9",
            "4 e-9"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "ac3a9baf-d5ba-41e7-acf6-63feff9cc36b"
    },
    {
        "question": "Question: Which of the following is not a field in TCP header?",
        "choices": [
            "Sequence number",
            "Fragment offset",
            "Checksum",
            "Window size"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "7fe0fa45-e4d1-4093-b5ab-0edf9a6e9fb9"
    },
    {
        "question": "Question: What is the maximum size of data that the application layer can pass on to the TCP layer below?",
        "choices": [
            "Any size",
            "216\u00a0bytes - size of TCP header",
            "216\u00a0bytes",
            "1500"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "8b77ac10-b0c2-45b6-a096-d6892f7d5514"
    },
    {
        "question": "Question: Consider the following statements :\rA. High speed Ethernet works on optic fiber.\rB. A point to point protocol over Ethernet is a network protocol for encapsulating PPP frames inside Ethernet frames.\rC. High speed Ethernet does not work on optic fiber.\rD. A point to point protocol over Ethernet is a network protocol for encapsulating Ethernet frames inside PPP frames.\rWhich of the following is correct ?",
        "choices": [
            "A and B are true; C and D are false.",
            "A and B are false; C and D are true.",
            "A, B, C and D are true.",
            "A, B, C and D are false."
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "f42d6251-4039-49e2-9541-c17a76289d1d"
    },
    {
        "question": "Question: IEEE 802.11 is standard for",
        "choices": [
            "Ethernet",
            "Bluetooth",
            "Broadband Wireless",
            "Wireless LANs"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "34767407-2cba-485c-b0df-855355280324"
    },
    {
        "question": "Question: Host X has IP address 192.168.1.97 and is connected through two routers R1 and R2 to an\u00adother host Y with IP address 192.168.1.80. Router R1 has IP addresses 192.168.1.135 and 192.168.1.110. R2 has IP addresses 192.168.1.67 and 192.168.1.155. The netmask used in the network is 255.255.255.224.\u00a0Given the information above, how many distinct subnets are guaranteed to already exist in the network?",
        "choices": [
            "6",
            "3",
            "2",
            "1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "bc061e53-cb44-4e79-a7d2-43ab2c14d76a"
    },
    {
        "question": "Question: The transport layer protocols used for real time multimedia, file transfer, DNS and email, respectively are:",
        "choices": [
            "TCP, UDP, UDP and TCP",
            "UDP, TCP, TCP and UDP",
            "UDP, TCP, UDP and TCP",
            "TCP, UDP, TCP and UDP"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "74971a4a-9f2d-4010-ace4-ed384907eb02"
    },
    {
        "question": "Question: Data transmitted on a link uses the following 2D parity scheme for error detection:\rEach sequence of 28 bits is arranged in a 4\u00d77 matrix (rows r0 through r3, and columns d7 through d1) and is padded with a column d0 and row r4 of parity bits computed using the Even parity scheme. Each bit of column d0 (respectively, row r4) gives the parity of the corresponding row (respectively, column). These 40 bits are transmitted over the data link.  \rThe table shows data received by a receiver and has n corrupted bits. What is the mini\u00admum possible value of n?",
        "choices": [
            "1",
            "2",
            "3",
            "4"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "7b4f5c58-c5fe-4f42-9617-e3b91bd1a1d2"
    },
    {
        "question": "Question: Using public key cryptography, X adds a digital signature \u03c3 to a message M, encrypts (M,\u03c3) and sends it to Y, where it is decrypted. Which one of the following sequence of keys is used for operations?",
        "choices": [
            "Encryption : X\u2019s private key followed by Y\u2019s private key. Decryption : X\u2019s public key followed by Y\u2019s public key.",
            "Encryption : X\u2019s private key followed by Y\u2019s public key; Decryption : X\u2019s public key followed by Y\u2019s private key",
            "Encryption : X\u2019s private key followed by Y\u2019s public key; Decryption : Y\u2019s private key followed by X\u2019s public key.",
            "Encryption : X\u2019s public key followed by Y\u2019s private key; Decryption : Y\u2019s public key followed by X\u2019s private key."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cryptography",
        "task_id": "0467fe90-d49f-4a82-81e7-02c55708abf5"
    },
    {
        "question": "Question: Which of the following are used to generate a message digest by the network security protocols?\r(P) RSA \r\n(Q) SHA-1 \r\n(R) DES \r\n(S) MD5",
        "choices": [
            "P and R only",
            "Q and R only",
            "Q and S only",
            "R and S only"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cryptography",
        "task_id": "64b2fe20-9e01-474c-89a6-6ed8487f7db8"
    },
    {
        "question": "Question: A Design concept Refinement is a",
        "choices": [
            "Top-down approach",
            "Complementary of Abstraction concept",
            "Process of elaboration",
            "All of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "90cdfc43-2729-4b60-848e-c1d02af3ebc7"
    },
    {
        "question": "Question: Configuration management is not concerned with",
        "choices": [
            "controlling changes to the source code",
            "choice of hardware configuration for an application",
            "controlling documentation changes",
            "maintaining versions of software"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "ba4dac65-6807-4c45-a956-bbbc8dc563d8"
    },
    {
        "question": "Question: In the context of modular software design, which one of the following combinations is desirable?",
        "choices": [
            "High cohesion and high coupling",
            "High cohesion and low coupling",
            "Low cohesion and high coupling",
            "Low cohesion and low coupling"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "78986913-9366-4afb-9d0d-6fdb53a73e49"
    },
    {
        "question": "Question: Assume that the software team defines a project risk with 80% probability of occurrence of risk in the following manner : Only 70 percent of the software components scheduled for reuse will be integrated into the application and the remaining functionality will have to be custom developed. If 60 reusable components were planned with average component size as 100 LOC and software engineering cost for each LOC as $ 14, then the risk exposure would be",
        "choices": [
            "$ 25,200",
            "$ 20,160",
            "$ 17,640",
            "$ 15,120"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "9f4f0851-d7ae-4752-addc-78e7cc25d348"
    },
    {
        "question": "Question: The cyclomatic complexity of each of the modules X and Y shown below is 10. What is the cyclomatic complexity of the sequential integration shown on the right hand side?",
        "choices": [
            "21",
            "19",
            "20",
            "10"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "ad5c18ae-a4c9-4ddd-b73d-f7fa687d3192"
    },
    {
        "question": "Question: A software organization has been assessed at SEI CMM Level 4. Which of the following does the organization need to practice beside Process Change Management and Technology Change Management in order to achieve Level 5 ?",
        "choices": [
            "Defect Detection",
            "Defect Prevention",
            "Defect Isolation",
            "Defect Propagation"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "48ff10af-9c4a-4627-99c7-73bda4e1c919"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
        "choices": [
            "    return text.count(substring)",
            "    count = 0\n    start = 0\n    while True:\n        index = text.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index\n    return count",
            "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
            "    return len(re.findall(substring, text))"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "dd6bd72e-5892-4a44-80fe-d7d08a549b73"
    },
    {
        "question": "Question: What is the output of the below code snippets:\r<?php\r\n    $input=\"gfg mcq quiz sets\";\r\n    echo ucwords($input);\r\n?>",
        "choices": [
            "Gfg Mcq Quiz Sets",
            "gfg MCq Quiz Sets",
            "Gfg Mcq Quiz sets",
            "Gfg McQ Quiz Sets"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "0d9bbefd-7153-434e-8500-d6ab2e6a7f3a"
    },
    {
        "question": "Question: Which of the following is not considered predefined values?",
        "choices": [
            "$get",
            "$ask",
            "$request",
            "$post"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "517e10b3-b5f6-4632-9a15-075f36e45fb3"
    },
    {
        "question": "Question: What is the output of the below code snippets?\r<?php  \r\n\twhile()  \r\n\t{  \r\n\techo \"GeeksForGeeks\";  \r\n\t}  \r\n?>",
        "choices": [
            "Hello World",
            "Infinite loop",
            "no output",
            "Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "4b62fff9-57c3-4a6f-b49b-726156623b51"
    },
    {
        "question": "Question: Which of the following is the syntax of comment in PHP?",
        "choices": [
            "/* */",
            "#",
            "//",
            "All of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "3869ea68-81c0-4a3c-b427-3519b2b72995"
    },
    {
        "question": "Question: Which built-in function in the PHP adds value to the end of the array?",
        "choices": [
            "this_array()",
            "is_array()",
            "while_array()",
            "are_array()"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "96109677-3868-41ee-aa4d-eb7af859e7e4"
    },
    {
        "question": "Question: What is the output of the below code snippets?<?php    \n \t$value=\"GeeksForGeeks\";    \n \techo strrev(\"$value\");      \n?>",
        "choices": [
            "skeeGroFskeeG",
            "skeeGroFskeeO",
            "skeeGorFskeeG",
            "skeeForFskeeG"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "08d34526-8be2-473c-a7be-e25b46c4dcea"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
        "choices": [
            "  for i in range(len(numbers) - 1):\n    for j in range(i + 1, len(numbers)):\n      if abs(numbers[i] - numbers[j]) > threshold:\n        return False\n  return True",
            "  return any(abs(a - b) < threshold for a, b in zip(numbers, numbers[1:]))",
            "  for i in range(len(numbers)):  # Change range to len(numbers)\n    for j in range(i + 1, len(numbers)):\n      if abs(numbers[i] - numbers[j]) < threshold:\n        return True\n  return False",
            "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "fdcf3e59-e3a4-4beb-8106-b442c1d29301"
    },
    {
        "question": "Question: Which of the below CSS properties determine that the element of x-coordinate convert the position of the mask ?",
        "choices": [
            "mask-x-origin",
            "mask-y-origin",
            "mask-position-x",
            "mask-origin-y"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML",
        "task_id": "295fa96f-357d-46ab-8a47-b2ef57cde4c9"
    },
    {
        "question": "Question: Which HTML tag is used for internal style sheet?",
        "choices": [
            "Internal",
            "Style",
            "CSS",
            "Internal Style"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML",
        "task_id": "854b64a4-c81e-46d1-a084-2a56e9484c15"
    },
    {
        "question": "Question: Which property of CSS is used to animate the width of search input when the element gets focus ?",
        "choices": [
            "Focus",
            "Transition",
            "Outline",
            "Color"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML",
        "task_id": "bdc006c6-8510-4e53-b3c8-d496692095ff"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nfo = open(\"foo.txt\", \"rw+\")print \"Name of the file: \", fo.name\u00a0# Assuming file has following 5 lines# This is 1st line# This is 2nd line# This is 3rd line# This is 4th line# This is 5th line\u00a0for index in range(5):   line = fo.next()   print \"Line No %d - %s\" % (index, line)\u00a0# Close opened filefo.close()",
        "choices": [
            "Compilation Error",
            "Syntax Error",
            "Displays  Output",
            "None of the mentioned"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9be62c74-fec3-44c9-b499-81f9a2de72f7"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def max_sublist_sum(arr):\n2     max_ending_here = 0\n3     max_so_far = 0\n4     for x in arr:\n5         max_ending_here = max_ending_here + x\n6         max_so_far = max(max_so_far, max_ending_here)\n7     return max_so_far",
        "choices": [
            "Modify line 1:\n```max_ending_here = max(x, max_ending_here + x)```",
            "Modify line 2:\n```max_so_far = float('-inf')```",
            "Modify line 4:\n```    max_ending_here = max(x, max_ending_here + x)```",
            "Modify line 4:\n```       max_ending_here = max(0, max_ending_here + x)```\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a1b398f2-feaf-4036-a91e-bb2bd00fddf7"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times. Return the length of the longest substring containing the same letter you can get after performing the above operations.\n\nIncomplete Solution:\nclass Solution:\n  def characterReplacement(self, s: str, k: int) -> int:\n    maxCount = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, c in enumerate(s):\n      count[c] += 1\n      maxCount = max(maxCount, count[c])\n      _______________\n      while maxCount + k < r - l + 1:\n        count[s[l]] -= 1\n        l += 1\n\n    return r - l + 1",
        "choices": [
            "      while k < r - l + 1 - maxCount:",
            "      while count[c] + k < r - l + 1:",
            "      while maxCount + k < len(s) - l + 1:",
            "      while maxCount + k < r - l + 1:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9e00b03a-0fbf-4c99-b274-9089d2d114de"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
        "choices": [
            "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
            "    if len(arr) == 0:\n        return []\n    evens = arr\n    if evens == []:\n        return []\n    return [min(evens), arr.index(min(evens))]",
            "    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x%2 != 0, arr))\n    if evens == []:\n        return []\n    return [min(evens), arr.index(min(evens))]",
            "    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if evens == []:\n        return []\n    min_even = min(evens)\n    return [min_even, evens.index(min_even)]"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ba9aae43-f04e-494c-97f6-709e198e5dce"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nk=int(input())\nx,y=map(int,input().split())\nd=abs(x)+abs(y)\ntg=max(abs(x),abs(y))\nts=k-min(abs(x),abs(y))%k\nif k%2==0 and d%2!=0:\n  #print(-1)\n  print(0)\nelse:\n  ans=[]\n  if d<k and d%2==1:\n    n=3\n    td=k-d\n    if y>=0:\n      ans.append((x,y+td))\n      ans.append((x+(k-td//2),y+td//2))\n      ans.append((x,y))\n    else:\n      ans.append((x,y-td))\n      ans.append((x+(k-td//2),y-td//2))\n      ans.append((x,y))\n  elif d<k and d%2==0:\n    n=2\n    if abs(x)>=abs(y):\n      m=(abs(x)-abs(y))//2\n      tk=k-m\n      if x<0:\n        m*=-1\n      if y<0:\n        tk*=-1\n      ans.append((m,tk))\n    else:\n      m=(abs(y)-abs(x))//2\n      tk=k-m\n      if y<0:\n        m*=-1\n      if x<0:\n        tk*=-1\n      ans.append((tk,m))\n    ans.append((x,y))\n  print(n)\n  for tx,ty in ans:\n    print(tx,ty)",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Compile Error",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "02509137-37bd-4daf-90a3-de21aa86231d"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed string s, a string a, a string b, and an integer k. An index i is beautiful if: Return the array that contains beautiful indices in sorted order from smallest to largest.\n\nIncomplete Solution:\nclass Solution:\n  def beautifulIndices(self, s: str, a: str, b: str, k: int) -> List[int]:\n    ans = []\n    indicesA = self._kmp(s, a)\n    indicesB = self._kmp(s, b)\n    indicesBIndex = 0  \n\n    for i in indicesA:\n      _______________\n      while indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i < -k:\n        indicesBIndex += 1\n      if indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i <= k:\n        ans.append(i)\n\n    return ans\n\n  def _kmp(self, s: str, pattern: str) -> List[int]:\n    \"\"\"Returns the starting indices of all occurrences of the pattern in `s`.\"\"\"\n\n    def getLPS(pattern: str) -> List[int]:\n      \"\"\"\n      Returns the lps array, where lps[i] is the length of the longest prefix of\n      pattern[0..i] which is also a suffix of this substring.\n      \"\"\"\n      lps = [0] * len(pattern)\n      j = 0\n      for i in range(1, len(pattern)):\n        while j > 0 and pattern[j] != pattern[i]:\n          j = lps[j - 1]\n        if pattern[i] == pattern[j]:\n          lps[i] = j + 1\n          j += 1\n      return lps\n\n    lps = getLPS(pattern)\n    res = []\n    i = 0  \n    j = 0  \n    while i < len(s):\n      if s[i] == pattern[j]:\n        i += 1\n        j += 1\n        if j == len(pattern):\n          res.append(i - j)\n          j = lps[j - 1]\n      elif j != 0:\n        j = lps[j - 1]\n      else:\n        i += 1\n    return res",
        "choices": [
            "      while indicesBIndex < len(indicesB) and indicesB[indicesBIndex] + k < i:",
            "      while indicesBIndex < len(indicesB) and abs(indicesB[indicesBIndex] - i) > k:",
            "      while indicesBIndex < len(indicesB) and indicesB[indicesBIndex] - i < -k:",
            "      while indicesBIndex < len(indicesB) and i - indicesB[indicesBIndex] > k:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "735b9f03-3e17-4a0d-ba84-fbd50f6ba044"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nN = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0 \nfor x in A:\n  if A%2 == 1:\n    cnt += 1\n    \nif cnt % 2 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
        "choices": [
            "Compile Error",
            "Memory Limit Exceeded",
            "Runtime Error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "2d04cc28-c9a1-4617-9223-a84593dcd2ef"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed permutation of n integers nums. A permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation: Return the minimum number of operations to make nums a semi-ordered permutation. A permutation is a sequence of integers from 1 to n of length n containing each number exactly once.\n\nIncomplete Solution:\nclass Solution:\n  def semiOrderedPermutation(self, nums: List[int]) -> int:\n    n = len(nums)\n    index1 = nums.index(1)\n    indexN = nums.index(n)\n    _______________\n    return index1 + (n - 1 - indexN) - int(index1 > indexN)",
        "choices": [
            "    return (n - indexN - 1) + (index1 - (index1 > indexN))",
            "    return index1 + (n - indexN) - (index1 > indexN)",
            "    return (index1 + n - 1) - (indexN + (index1 > indexN))",
            "    return index1 + (n - 1 - indexN) - int(index1 > indexN)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "fb1cd3db-727c-4a83-a926-d2389d0dd477"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n#reference Segment-Tree code from:https://ikatakos.com/pot/programming_algorithm/data_structure/segment_tree\n\ndef bisect(pos):\n  l=-1\n  r=n\n  while r-l!=1:\n    mid=(l+r)//2\n    if arr[mid][0]>=pos:\n      r=mid\n    else:\n      l=mid\n  return r\n\nmod=998244353\nn=int(input())\narr=[list(map(int,input().split())) for _ in range(n)]\narr=sorted(arr,key=lambda x:x[0])\nposs=[]\nfor i in range(n):\n  poss.append(bisect(arr[i][0]+arr[i][1]))\nposs.append(n)\n\noffset=2**((n-1).bit_length())\nst=[0]*(2*offset)\n\ndef update(pos,x):\n  pos+=offset\n  st[pos]=x\n  while pos>1:\n    y=st[pos^1]\n    if x<=y:\n      break\n    pos>>=1\n    st[pos]=x\n\ndef get_max(l,r):\n  ret=0\n  l+=offset\n  r+=offset\n  while l<r:\n    if r&1:\n      ret=max(ret,st[r-1])\n    if l&1:\n      ret=max(ret,st[l])\n      l+=1\n    l>>=1\n    r>>=1\n  return ret\n\nfor i in range(n):\n  update(i,poss[i])\nfor i in range(n-1,-1,-1):\n  poss[i]=get_max(i,poss[i])\n  update(i,poss[i])\n\ndp=[0]*(n+1)\ndp[-1]=1\nfor i in range(n-1,-1,-1):\n  dp[i]+=dp[i+1]\n  dp[i]%=mod\n  pos=poss[i]\n  dp[i]+=dp[pos]\n  dp[i]%=mod\nprint(dp[0]%mod)",
        "choices": [
            "Time Limit Exceeded",
            "Compile Error",
            "Memory Limit Exceeded",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "70e28f62-5716-4336-a756-ac57a53c72eb"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer n that consists of exactly 3 digits. We call the number n fascinating if, after the following modification, the resulting number contains all the digits from 1 to 9 exactly once and does not contain any 0's: Return true if n is fascinating, or false otherwise. Concatenating two numbers means joining them together. For example, the concatenation of 121 and 371 is 121371.\n\nIncomplete Solution:\nclass Solution:\n  def isFascinating(self, n):\n    _______________\n    s = str(n) + str(2 * n) + str(3 * n)\n    return ''.join(sorted(s)) == '123456789'",
        "choices": [
            "    s = str(n) + str(n * 2) + str(n ** 2)",
            "    s = str(n) + str(n * 2) + str(n * 3)",
            "    s = str(n) + str(n * 3) + str(n * 3)",
            "    s = str(n) + str(2 * n) + str(3 * n)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "dc1ac6fa-c959-4c21-abca-7596e6c52fc0"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn = int(input())\npoint_list = []\nfor i in range(n):\n  line = list(map(int, input().split()))\n  point_list.append(line)\nans = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    x = abs(point_list[i][0] - point_list[j][0]) + abs(point_list[i][1] - point_list[j][1])\n    if x > ans:\n      ans = x\nprint(ans)\n              ",
        "choices": [
            "Compile Error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "31a461df-5fe8-4e63-9442-2478b23fa8c8"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has. You can work on the projects following these two rules: Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints. Return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.\n\nIncomplete Solution:\nclass Solution:\n  def numberOfWeeks(self, milestones: List[int]) -> int:\n    summ = sum(milestones)\n    nonMax = summ - max(milestones)\n    _______________\n    return min(summ, 2 * nonMax + 1)",
        "choices": [
            "    return min(summ, nonMax * 2 - 1 + 2)",
            "    return min(summ, (nonMax * 2) + 1)",
            "    return min(summ, nonMax * 2 + 1)",
            "    return min(summ, 2 * nonMax + 1)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9313724b-7770-4c2f-b593-d79edbac9455"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task. You are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed. Each day, until all tasks have been completed, you must either: Return the minimum number of days needed to complete all tasks.\n\nIncomplete Solution:\nclass Solution:\n  def taskSchedulerII(self, tasks: List[int], space: int) -> int:\n    taskToNextAvailable = collections.defaultdict(int)\n    ans = 0\n\n    for task in tasks:\n      ans = max(ans + 1, taskToNextAvailable[task])\n      _______________\n      taskToNextAvailable[task] = ans + space + 1\n\n    return ans",
        "choices": [
            "      taskToNextAvailable[task] = ans + space",
            "      taskToNextAvailable[task] = ans + space + 1",
            "      taskToNextAvailable[task] = ans + space * 2",
            "      taskToNextAvailable[task] = ans + space // 2"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f7cb20db-5874-47ba-985d-90de1a718c72"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0. Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z'). Return the final string after all such shifts to s are applied.\n\nIncomplete Solution:\nclass Solution:\n  def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:\n    ans = []\n    currShift = 0\n    timeline = [0] * (len(s) + 1)\n\n    for start, end, direction in shifts:\n      diff = 1 if direction else -1\n      timeline[start] += diff\n      timeline[end + 1] -= diff\n\n    for i, c in enumerate(s):\n      currShift = (currShift + timeline[i]) % 26\n      _______________\n      num = (ord(s[i]) - ord('a') + currShift + 26) % 26\n      ans.append(chr(ord('a') + num))\n\n    return ''.join(ans)",
        "choices": [
            "      num = (ord(s[i]) - ord('a') + currShift // 2 + 26) % 26",
            "      num = (ord(s[i]) - ord('a') + currShift * 2 + 26) % 26",
            "      num = (ord(s[i]) - ord('a') + currShift + 26) % 26",
            "      num = (ord(s[i]) - ord('a') + currShift - 1 + 26) % 26"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f2a41c51-ccf7-48d3-99b8-4190e2697940"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
        "choices": [
            "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
            "    return s.split(',')",
            "    return s.split()",
            "    edit_s = s.replace(\",\", \"\").replace(\".\", \"\")\n    return s.split()"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b4741099-e866-4df9-9b04-489afce660c2"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums, return the number of subarrays filled with 0. A subarray is a contiguous non-empty sequence of elements within an array.\n\nIncomplete Solution:\nclass Solution:\n  def zeroFilledSubarray(self, nums: List[int]) -> int:\n    ans = 0\n    indexBeforeZero = -1\n\n    for i, num in enumerate(nums):\n      if num:\n        indexBeforeZero = i\n      else:\n        ans += i - indexBeforeZero\n\n    _______________\n    return ans",
        "choices": [
            "    return ~-ans",
            "    return ans",
            "    return int(ans)",
            "    return ans + 0"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "16195032-d83f-4f1e-9241-2cec9171d7be"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1. You are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people. Initially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj. A friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests. Return a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not. Note: If uj and vj are already direct friends, the request is still successful.\n\nIncomplete Solution:\nclass UnionFind:\n  def __init__(self, n: int):\n    self.id = list(range(n))\n    _______________\n    self.rank = [0] * n\n\n  def unionByRank(self, u: int, v: int) -> None:\n    i = self.find(u)\n    j = self.find(v)\n    if i == j:\n      return\n    if self.rank[i] < self.rank[j]:\n      self.id[i] = j\n    elif self.rank[i] > self.rank[j]:\n      self.id[j] = i\n    else:\n      self.id[i] = j\n      self.rank[j] += 1\n\n  def find(self, u: int) -> int:\n    if self.id[u] != u:\n      self.id[u] = self.find(self.id[u])\n    return self.id[u]\n\n\nclass Solution:\n  def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:\n    ans = []\n    uf = UnionFind(n)\n\n    for u, v in requests:\n      pu = uf.find(u)\n      pv = uf.find(v)\n      isValid = True\n      if pu != pv:\n        for x, y in restrictions:\n          px = uf.find(x)\n          py = uf.find(y)\n          if (pu, pv) in [(px, py), (py, px)]:\n            isValid = False\n            break\n      ans.append(isValid)\n      if isValid:\n        uf.unionByRank(pu, pv)\n\n    return ans",
        "choices": [
            "    self.rank = [1] * n",
            "    self.rank = [n] * n",
            "    self.rank = [-1] * n",
            "    self.rank = [0] * n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1b1cd984-b1be-4830-b1d5-dccf18a3dea5"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nA , B = map ( int , input ( )  . split( ) )\n \nif ( A<= 9 and B <= 9) :\n    print ( A * B )\nelse:\n    print ( -1 )",
        "choices": [
            "Internal error",
            "Runtime Error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4e68e4bd-13f4-4839-a57e-a2d353ac8699"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\u00a0as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n\nIncomplete Solution:\nclass Solution:\n  def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n    dummy = ListNode(0)\n    curr = dummy\n    carry = 0\n\n    while carry or l1 or l2:\n      if l1:\n        carry += l1.val\n        l1 = l1.next\n      if l2:\n        carry += l2.val\n        l2 = l2.next\n      curr.next = ListNode(carry % 10)\n      _______________\n      carry //= 10\n      curr = curr.next\n\n    return dummy.next",
        "choices": [
            "      carry = math.floor(carry / 10)",
            "      carry //= 10",
            "      carry = carry // 10",
            "      carry = int(carry / 10)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d48f116a-c26c-4da4-b369-9c7445931709"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n#ABC134 C (\u518d\u8003\u5bdf)\n\nN = int(input())\nA = []\nfor i in range(N):\n    a = int(input())\n    A.append(a)\n    \nAA = sorted(A,reverse = True)\nfor i in range(N):\n    if A[i] != AA[0]:\n        print(AA[0])\n    else:\n        print(AA[1])",
        "choices": [
            "Time Limit Exceeded",
            "No abnormally found",
            "Memory Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "762d4e30-b0bf-4c6c-bf54-7a8222ae0f58"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid. The following rules define a valid string:\n\nIncomplete Solution:\nclass Solution:\n  def checkValidString(self, s: str) -> bool:\n    low = 0\n    high = 0\n\n    for c in s:\n      if c == '(':\n        _______________\n        low += 1\n        high += 1\n      elif c == ')':\n        if low > 0:\n          low -= 1\n        high -= 1\n      else:\n        if low > 0:\n          low -= 1\n        high += 1\n      if high < 0:\n        return False\n\n    return low == 0",
        "choices": [
            "        low += 1",
            "        low = 1 + low",
            "        low = low + 1",
            "        low Increment()"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ce76be5e-0758-4ab6-b1c4-5ebe22ee9380"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i]. Return the length of the shortest sequence of rolls that cannot be taken from rolls. A sequence of rolls of length len is the result of rolling a k sided dice len times. Note that the sequence taken does not have to be consecutive as long as it is in order.\n\nIncomplete Solution:\nclass Solution:\n  def shortestSequence(self, rolls: List[int], k: int) -> int:\n    ans = 1  \n    seen = set()\n\n    for roll in rolls:\n      seen.add(roll)\n      if len(seen) == k:\n        _______________\n        ans += 1\n        seen.clear()\n\n    return ans",
        "choices": [
            "        ans += k - len(seen) + 1",
            "        ans += 1",
            "        ans = min(ans + 1, k)",
            "        ans = ans + 1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9e7d86c4-71c2-4e9f-847c-4498fb919ab4"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way: Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.\n\nIncomplete Solution:\nclass Solution:\n  def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:\n    ans = 0\n    i = 0\n    j = len(plants) - 1\n    canA = capacityA\n    canB = capacityB\n\n    while i < j:\n      _______________\n      ans += (canA < plants[i]) + (canB < plants[j])\n      if canA < plants[i]:\n        canA = capacityA\n      if canB < plants[j]:\n        canB = capacityB\n      canA -= plants[i]\n      canB -= plants[j]\n      i += 1\n      j -= 1\n\n    return ans + (i == j and max(canA, canB) < plants[i])",
        "choices": [
            "      ans += sum(x < y for x, y in [(canA, plants[i]), (canB, plants[j])])",
            "      ans += int(canA < plants[i]) + int(canB < plants[j])",
            "      ans += (plants[i] > canA) + (plants[j] > canB)",
            "      ans += (canA < plants[i]) + (canB < plants[j])"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "48287843-9d4a-498d-ac79-4620fc3afce6"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it. All of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\nIncomplete Solution:\nclass Solution:\n  def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n    ans = []\n    graph = collections.defaultdict(list)\n\n    for a, b in reversed(sorted(tickets)):\n      graph[a].append(b)\n\n    def dfs(u: str) -> None:\n      while u in graph and graph[u]:\n        dfs(graph[u].pop())\n      ans.append(u)\n\n    dfs('JFK')\n    _______________\n    return ans[::-1]",
        "choices": [
            "    return ans[::-1][:]",
            "    return ans[::-1]",
            "    return ''.join(ans[::-1]).split()",
            "    return list(reversed(ans))"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f9c9235d-f9f8-4f11-9e85-02c6ed86e1e8"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream. Implement the ProductOfNumbers class: The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n\nIncomplete Solution:\nclass ProductOfNumbers:\n  def __init__(self):\n    self.prefix = [1]\n\n  def add(self, num: int) -> None:\n    if num == 0:\n      self.prefix = [1]\n    else:\n      self.prefix.append(self.prefix[-1] * num)\n\n  def getProduct(self, k: int) -> int:\n    _______________\n    return 0 if k >= len(self.prefix) else self.prefix[-1] // self.prefix[len(self.prefix) - k - 1]",
        "choices": [
            "    result = self.prefix[-1] // self.prefix[-k] if k < len(self.prefix) else 0; return result",
            "    return self.prefix[-1] // self.prefix[-k] if k < len(self.prefix) else 0",
            "    return 0 if k >= len(self.prefix) else self.prefix[-1] // self.prefix[len(self.prefix) - k - 1]"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "7df9a89b-a9fc-40f6-9a3a-b5ec83305be0"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. At every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents: The game goes on as follows: Return the maximum net income Alice can have if she travels towards the optimal leaf node.\n\nIncomplete Solution:\nclass Solution:\n  def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:\n    n = len(amount)\n    tree = [[] for _ in range(n)]\n    parent = [0] * n\n    _______________\n    aliceDist = [-1] * n\n\n    for u, v in edges:\n      tree[u].append(v)\n      tree[v].append(u)\n\n    def dfs(u: int, prev: int, d: int) -> None:\n      parent[u] = prev\n      aliceDist[u] = d\n      for v in tree[u]:\n        if aliceDist[v] == -1:\n          dfs(v, u, d + 1)\n\n    dfs(0, -1, 0)\n\n    u = bob\n    bobDist = 0\n    while u != 0:\n      if bobDist < aliceDist[u]:\n        amount[u] = 0\n      elif bobDist == aliceDist[u]:\n        amount[u] //= 2\n      u = parent[u]\n      bobDist += 1\n\n    return self._getMoney(tree, 0, -1, amount)\n\n  def _getMoney(self, tree: List[List[int]], u: int, prev: int, amount: List[int]) -> int:\n    if len(tree[u]) == 1 and tree[u][0] == prev:\n      return amount[u]\n\n    maxPath = -math.inf\n    for v in tree[u]:\n      if v != prev:\n        maxPath = max(maxPath, self._getMoney(tree, v, u, amount))\n\n    return amount[u] + maxPath",
        "choices": [
            "    aliceDist = [None] * n",
            "    aliceDist = [math.nan] * n",
            "    aliceDist = [-1] * n",
            "    aliceDist = [float('inf')] * n"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "71434179-61d4-4f49-8182-aaeb605f597e"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\ninput = sys.stdin.readline\nLLL = 1<<20\n\nN, M = map(int, input().split())\nR = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    R.append((a*2, b, 0))\nfor i in range(M):\n    l, r = map(int, input().split())\n    R.append((l*2-1, 2, i))\n    R.append((r*2+1, 3, i))\n\nR.sort(key=lambda x:x[0])\nnodeid = 0\nbf = -1\nd = []\neid2lid = dict()\nid2eid = dict()\nG = [set()]\nfor x, f, i in R:\n    if f <= 1:\n        d.append(int(f != bf and bf != -1))\n        bf = f\n        nodeid += 1\n        G.append(set())\n    else:\n        if f == 3:\n#            print(x2id, l)\n            lid = eid2lid[i]\n            if nodeid != lid:\n                G[nodeid].add((lid, i+1))\n                G[lid].add((nodeid, i+1))\n#                id2eid[lid*LLL+nodeid] = i\n#            id2eid[(n2, n1)] = i\n        eid2lid[i] = nodeid\nd.append(int(bf==1))\n\nxxs = [-1]*(nodeid+1)\ng2 = [set() for _ in range(nodeid+1)]\nvs = set()\ncut_edges = set()\nfor i in range(nodeid+1):\n    if i in vs:\n        continue\n    stack = [i]\n    dfs_vs = []\n    vs.add(i)\n    while stack:\n        v = stack.pop()\n        dfs_vs.append(v)\n        for u, j in G[v]:\n            if u in vs:\n                continue\n            g2[v].add((u, j))\n            stack.append(u)\n            vs.add(u)\n    for v in dfs_vs[::-1]:\n        r = d[v]\n        for u, j in g2[v]:\n            ff = xxs[u]\n            if ff:\n                cut_edges.add(j)\n            r = (r+ff)%2\n        xxs[v] = r if v != 0 else 0\n    if xxs[i]:\n        print(-1)\n        break\nelse:\n    print(len(cut_edges))\n    print(*sorted(cut_edges))\n",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Compile Error",
            "Runtime Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "21e202a9-6373-4042-8291-d722f79e8afe"
    },
    {
        "question": "Question: What will be the output of the following Python code?\ni = 1\nwhile False:\n    if i%2 == 0:\n        break\n    print(i)\n    i += 2",
        "choices": [
            "1",
            "1 3 5 7 \u2026",
            "1 2 3 4 \u2026",
            "none of the mentioned"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "988f2950-6332-4644-b1d7-ab0c8d82b33b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed positive integer array nums and a positive integer k. A pair of numbers (num1, num2) is called excellent if the following conditions are satisfied: Return the number of distinct excellent pairs. Two pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct. Note that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.\n\nIncomplete Solution:\nclass Solution:\n  def countExcellentPairs(self, nums: List[int], k: int) -> int:\n    count = collections.Counter(map(int.bit_count, set(nums)))\n    return sum(count[i] * count[j]\n               for i in count\n               for j in count\n               _______________\n               if i + j >= k)",
        "choices": [
            "               if i + j > k - 1)",
            "               if i + j >= max(k - 1, 0)",
            "               if i + j >= k)",
            "               if i + j >= k - (k % 2)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f33d78ee-94fa-4dd7-80dc-825ee81f0a6f"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references. A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\n\nIncomplete Solution:\nclass Solution:\n  def pathSum(self, root: TreeNode, summ: int) -> List[List[int]]:\n    ans = []\n\n    def dfs(root: TreeNode, summ: int, path: List[int]) -> None:\n      if not root:\n        return\n      if root.val == summ and not root.left and not root.right:\n        ans.append(path + [root.val])\n        return\n\n      _______________\n      dfs(root.left, summ - root.val, path + [root.val])\n      dfs(root.right, summ - root.val, path + [root.val])\n\n    dfs(root, summ, [])\n    return ans",
        "choices": [
            "      dfs(root.left, summ - root.val, path + [root.val])",
            "      dfs(root.left, summ - (root.val * 2), path + [root.val])",
            "      dfs(root.left, summ, path + [root.val + 1])",
            "      dfs(root.left, summ - root.val + 1, path + [root.val])"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d3c06aba-0f1a-44be-af1e-ed7eccda085f"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: A permutation of an array of integers is an arrangement of its members into a sequence or linear order. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). Given an array of integers nums, find the next permutation of nums. The replacement must be in place and use only constant extra memory.\n\nIncomplete Solution:\nclass Solution:\n  def nextPermutation(self, nums: List[int]) -> None:\n    n = len(nums)\n\n    i = n - 2\n    _______________\n    while i >= 0:\n      if nums[i] < nums[i + 1]:\n        break\n      i -= 1\n\n    if i >= 0:\n      for j in range(n - 1, i, -1):\n        if nums[j] > nums[i]:\n          nums[i], nums[j] = nums[j], nums[i]\n          break\n\n    def reverse(nums: List[int], l: int, r: int) -> None:\n      while l < r:\n        nums[l], nums[r] = nums[r], nums[l]\n        l += 1\n        r -= 1\n\n    reverse(nums, i + 1, len(nums) - 1)",
        "choices": [
            "    while i != -1:",
            "    while 0 <= i:",
            "    while i >= 0:",
            "    while i > -1:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b8eb2ac1-dcd0-4f38-8922-2632cec21a7e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal. The chemistry of a team is equal to the product of the skills of the players on that team. Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.\n\nIncomplete Solution:\nclass Solution:\n  def dividePlayers(self, skill: List[int]) -> int:\n    n = len(skill)\n    _______________\n    teamSkill = sum(skill) // (n // 2)\n    ans = 0\n    count = collections.Counter(skill)\n\n    for s, freq in count.items():\n      requiredSkill = teamSkill - s\n      if count[requiredSkill] != freq:\n        return -1\n      ans += s * requiredSkill * freq\n\n    return ans // 2",
        "choices": [
            "    teamSkill = (sum(skill) + n) // (n // 2)",
            "    teamSkill = sum(skill) // (n // 2)",
            "    teamSkill = sum(skill) // (n / 2)",
            "    teamSkill = sum(skill) / (n / 2)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "92b44406-069b-4ac2-bcdb-3909312879f9"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
        "choices": [
            "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \",\" not in str(i)]) ",
            "return sum([i**2 for i in lst if i > 0 and \".\" not in str(i)]) ",
            "    return sum([i**2 for i in lst if i%2!=0 and \".\" not in str(i)])  ",
            "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "224ce8c4-98d1-48c2-a944-53454aec66a9"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
        "choices": [
            "    ret = [1]  \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            x = i  \n            for j in range(2, i + 1): \n                x *= j\n            ret.append(x)\n        else:\n            x = sum([k for k in range(1, i + 1)])  \n    return ret",
            "    ret = []\n    factorial = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial *= i  \n            ret.append(factorial)\n        else:\n            ret.append(sum(range(1, i + 1)))\n    return ret\n",
            "    ret = []\n    for i in range(1,n+1):\n        if i % 2 == 1:  \n            x = 1\n            for j in range(1, i + 1): \n                x *= j\n            ret.append(x)\n        else:\n            x = 0\n            for j in range(1, i + 1):\n                x += j\n            ret.append(x)\n    return ret",
            "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "063bf83a-74c9-4147-b990-0495c65355b3"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
        "choices": [
            "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1]), key=lambda x: x[0])",
            "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(coords, key=lambda x: x[1], reverse=True)",
            "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0], reverse=True)",
            "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "07b1b6f6-345c-4092-8c54-67dcc41639c9"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
        "choices": [
            "    odd_digit_elements = []\n    for i in x:\n        if any(int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)",
            "    odd_digit_elements = []\n    for i in x:\n        if all(int(c) % 2 != 0 for c in str(i)):\n            odd_digit_elements.append(i)\n    return odd_digit_elements",
            "    odd_digit_elements = []\n    for i in x:\n        if all(int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements, reverse=True)",
            "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9710c065-e352-45ce-a621-79a61fb2bbfd"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time. An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle. Return the number of possible unique paths that the robot can take to reach the bottom-right corner. The testcases are generated so that the answer will be less than or equal to 2 * 10**9.\n\nIncomplete Solution:\nclass Solution:\n  def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n    m = len(obstacleGrid)\n    n = len(obstacleGrid[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    dp[0][1] = 1  \n\n    for i in range(1, m + 1):\n      for j in range(1, n + 1):\n        if obstacleGrid[i - 1][j - 1] == 0:\n          _______________\n          dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[m][n]",
        "choices": [
            "          dp[i][j] = dp[i - 1][j] + dp[i][j - 1]",
            "          dp[i][j] = dp[i - 1][j] - dp[i][j - 1]",
            "          dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])",
            "          dp[i][j] = dp[i - 1][j] * dp[i][j - 1]"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f14981da-cd2a-4437-9f16-41b2290fb4d3"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\nreadline = sys.stdin.readline\n\nimport collections\nclass Dinic:\n    def __init__(self, vnum):\n        self.edge = [[] for i in range(vnum)]\n        self.n = vnum\n        # inf\u306fint\u578b\u306e\u65b9\u304c\u826f\u3044\u304b\u3082\u306d\n        self.inf = float('inf')\n    def addedge(self, st, en, c):\n        self.edge[st].append([en, c, len(self.edge[en])])\n        self.edge[en].append([st, 0, len(self.edge[st])-1])\n    def bfs(self, vst):\n        dist = [-1]*self.n\n        dist[vst] = 0\n        Q = collections.deque([vst])\n        while Q:\n            nv = Q.popleft()\n            for vt, c, r in self.edge[nv]:\n                if dist[vt] == -1 and c > 0:\n                    dist[vt] = dist[nv] + 1\n                    Q.append(vt)\n        self.dist = dist\n    def dfs(self, nv, en, nf):\n        nextv = self.nextv\n        if nv == en:\n            return nf\n        dist = self.dist\n        ist = nextv[nv]\n        for i, (vt, c, r) in enumerate(self.edge[nv][ist:], ist):\n            if dist[nv] < dist[vt] and c > 0:\n                df = self.dfs(vt, en, min(nf, c))\n                if df > 0:\n                    self.edge[nv][i][1] -= df\n                    self.edge[vt][r][1] += df\n                    return df\n            nextv[nv] += 1\n        return 0\n    def getmf(self, st, en):\n        mf = 0\n        while True:\n            self.bfs(st)\n            if self.dist[en] == -1:\n                break\n            self.nextv = [0]*self.n\n            while True:\n                fl = self.dfs(st, en, self.inf)\n                if fl > 0:\n                    mf += fl\n                else:\n                    break\n        return mf\n\n\n\nN, M = map(int, readline().split())\nA = [list(map(int, readline().split())) for _ in range(N)]\n\n\nB = [[None]*M for _ in range(N)]\n\nst = 2*N\nen = 2*N+1\nused = set()\nfor num in range(M):\n    T = Dinic(2*N+2)\n    for i in range(N):\n        T.addedge(st, i, 1)\n        T.addedge(N+i, en, 1)\n        for j in range(M):\n            aij = A[i][j]\n            if aij not in used:\n                T.addedge(i, N+(aij-1)//M, 1)\n    \n    T.getmf(st, en)\n    for i in range(N):\n        candi = [e for e, cost, _ in T.edge[i+N] if cost == 1][0]\n        for j in range(M):\n            if A[candi][j] not in used and (A[candi][j]-1)//M == i:\n                used.add(A[candi][j])\n                B[candi][num] = A[candi][j]\n                break\nC = list(map(list, zip(*B)))\nC = [sorted(c) for c in C]\nC = list(map(list, zip(*C)))\n\nfor b in B:\n    print(*b)\n\nfor c in C:\n    print(*c)\n",
        "choices": [
            "No abnormally found",
            "Time Limit Exceeded",
            "Internal error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "33fa15a2-d736-40d7-a946-e6feb3e14cc3"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: The width of a sequence is the difference between the maximum and minimum elements in the sequence. Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 10**9 + 7. A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\n\nIncomplete Solution:\nclass Solution:\n  def sumSubseqWidths(self, nums: List[int]) -> int:\n    kMod = 1_000_000_007\n    n = len(nums)\n    ans = 0\n    exp = 1\n\n    nums.sort()\n\n    for i in range(n):\n      _______________\n      ans += (nums[i] - nums[n - 1 - i]) * exp\n      ans %= kMod\n      exp = exp * 2 % kMod\n\n    return ans",
        "choices": [
            "      ans += (nums[i] + nums[n - 1 - i]) * exp",
            "      ans += (nums[i] - nums[n - 1 - i]) * exp",
            "      ans += (nums[i] * nums[n - 1 - i]) * exp",
            "      ans += (nums[n - 1 - i] - nums[i]) * exp"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1196ca32-fc72-4e75-be92-96c60b43aea9"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nX, Y = map(int, input().split())\nprint(X+Y//2)\n",
        "choices": [
            "Time Limit Exceeded",
            "Runtime Error",
            "Internal error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "664507c3-8396-4cca-a184-66d0c9e83e52"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s. Return the lexicographically largest repeatLimitedString possible. A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.\n\nIncomplete Solution:\nclass Solution:\n  def repeatLimitedString(self, s: str, repeatLimit: int) -> str:\n    ans = ''\n    count = collections.Counter(s)\n\n    while True:\n      addOne = ans and self._shouldAddOne(ans, count)\n      c = self._getLargestChar(ans, count)\n      if c == ' ':\n        break\n      repeats = 1 if addOne else min(count[c], repeatLimit)\n      _______________\n      ans += c * repeats\n      count[c] -= repeats\n\n    return ans\n\n  def _shouldAddOne(self, ans: str, count: collections.Counter) -> bool:\n    for c in reversed(string.ascii_lowercase):\n      if count[c]:\n        return ans[-1] == c\n    return False\n\n  def _getLargestChar(self, ans: str, count: collections.Counter) -> int:\n    for c in reversed(string.ascii_lowercase):\n      if count[c] and (not ans or ans[-1] != c):\n        return c\n    return ' '",
        "choices": [
            "      ans += c * repeats",
            "      ans += ''.join([c] * repeats)",
            "      ans = ans + c * repeats",
            "      ans = ''.join([ans, c * repeats])"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4e2e7155-b428-4261-bd07-267626607905"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
        "choices": [
            "    ret = 2\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret",
            "    ret = 1\n    for i in range(n):\n        ret = 2 * ret\n    return ret",
            "    ret = 1\n    for i in range(n):\n        ret = (2 + ret) % p\n    return ret",
            "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "862abd12-4b1d-48e4-93a3-faaa7440aa1c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list. The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d. Return the number of remaining intervals.\n\nIncomplete Solution:\nclass Solution:\n  def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:\n    ans = 0\n    prevEnd = 0\n\n    for _, end in sorted(intervals, key=lambda x: (x[0], -x[1])):\n      _______________\n      if prevEnd < end:\n        ans += 1\n        prevEnd = end\n\n    return ans",
        "choices": [
            "      if prevEnd != end:",
            "      if end > prevEnd:",
            "      if prevEnd < end:",
            "      if not prevEnd >= end:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "8254072e-6b23-47c0-bffc-52a9f5d9df25"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col]. You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second. Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.\n\nIncomplete Solution:\nclass Solution:\n  def minimumTime(self, grid: List[List[int]]) -> int:\n    _______________\n    if grid[0][1] > 1 and grid[1][0] > 1:\n      return -1\n\n    dirs = ((0, 1), (1, 0), (0, -1), (-1, 0))\n    m = len(grid)\n    n = len(grid[0])\n    minHeap = [(0, 0, 0)]  \n    seen = {(0, 0)}\n\n    while minHeap:\n      time, i, j = heapq.heappop(minHeap)\n      if i == m - 1 and j == n - 1:\n        return time\n      for dx, dy in dirs:\n        x = i + dx\n        y = j + dy\n        if x < 0 or x == m or y < 0 or y == n:\n          continue\n        if (x, y) in seen:\n          continue\n        extraWait = 1 if (grid[x][y] - time) % 2 == 0 else 0\n        nextTime = max(time + 1, grid[x][y] + extraWait)\n        heapq.heappush(minHeap, (nextTime, x, y))\n        seen.add((x, y))",
        "choices": [
            "    if grid[0][1] > 1 and grid[1][0] > 1:",
            "    if grid[0][1] >= 1 and grid[1][0] >= 1:",
            "    if grid[0][0] > 0 and grid[1][0] > 1:",
            "    if grid[0][1] > 0 and grid[1][1] > 1:"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "76259c4e-dde0-4141-8c60-754533825c57"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n\nIncomplete Solution:\nclass Solution:\n  def largestRectangleArea(self, heights: List[int]) -> int:\n    ans = 0\n    stack = []\n\n    for i in range(len(heights) + 1):\n      while stack and (i == len(heights) or heights[stack[-1]] > heights[i]):\n        h = heights[stack.pop()]\n        _______________\n        w = i - stack[-1] - 1 if stack else i\n        ans = max(ans, h * w)\n      stack.append(i)\n\n    return ans",
        "choices": [
            "        w = i - stack[-1] - 1 if len(stack) else i",
            "        w = i - stack[-1] - 1 if stack else i",
            "        w = i if not stack else i - stack[-1] - 1",
            "        w = i - stack.pop() - 1 if stack else i"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "7f45bfa3-f831-4ea3-bf1b-cb094f83444f"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
        "choices": [
            "    for e in l:\n        if e >= t:\n            return True\n    return True",
            "    for e in l:\n        if e >= t:\n            return True\n    return False",
            "    for e in l:\n        if e <= t:\n            return False\n    return True",
            "    for e in l:\n        if e >= t:\n            return False\n    return True\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d538fd96-bfb9-4fce-959b-5b9ab475b051"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second. Return an array of all the words third for each occurrence of \"first second third\".\n\nIncomplete Solution:\nclass Solution:\n  def findOcurrences(self, text: str, first: str, second: str) -> List[str]:\n    _______________\n    words = text.split()\n    return [c for a, b, c in zip(words, words[1:], words[2:]) if a == first and b == second]",
        "choices": [
            "    words = text.split()",
            "    words = text.replace(',', ' ').replace('.', ' ').split()",
            "    words = [x for x in text.split()]",
            "    words = list(text.split())"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "08cae4a5-adf4-4784-9e3e-a71372bd9f5b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Write a solution to create a DataFrame from a 2D list called student_data. This 2D list contains the IDs and ages of some students. The DataFrame should have two columns, student_id and age, and be in the same order as the original 2D list. The result format is in the following example.\n\nIncomplete Solution:\nimport pandas as pd\n\n\ndef createDataframe(student_data: List[List[int]]) -> pd.DataFrame:\n  _______________\n  return pd.DataFrame(student_data, columns=['student_id', 'age'])",
        "choices": [
            "  return pd.DataFrame(student_data, columns=['student_id', 'grade'])",
            "  return pd.DataFrame(student_data, columns=['student_id', 'age'])",
            "  return pd.DataFrame(student_data, columns=['roll_no', 'age'])",
            "  return pd.DataFrame(student_data, columns=['id', 'student_age'])"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4449f6b9-549b-4ab3-aa3b-d98e4bb0f356"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom collections import deque\n\n\ndef main():\n    N = int(input())\n    A = [deque(map(lambda x: int(x)-1, input().split())) for _ in range(N)]\n    ans = 1\n    empty = 0\n    candidates = set(range(N))\n    while True:\n        used = set()\n        for i in candidates:\n            if len(A[i]) == 0 or i in used:\n                continue\n            j = A[i][0]\n            if len(A[j]) and A[j][0] == i and j not in used:\n                used.add(i)\n                used.add(j)\n                A[i].popleft()\n                A[j].popleft()\n                if len(A[i]) == 0:\n                    empty += 1\n                if len(A[j]) == 0:\n                    empty += 1\n        if empty == N:\n            break\n        if len(used) == 0:\n            ans = -1\n            break\n        ans += 1\n        candidates = used\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "choices": [
            "Compile Error",
            "No abnormally found",
            "Runtime Error",
            "Internal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c061da82-5ac2-4cd2-a7ce-1a6f81d81948"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
        "choices": [
            "return [(e * 2) for e in l]",
            "[str(e) + '1' for e in l]",
            "return [(e - 1) for e in l]",
            "    return [(e + 1) for e in l]\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "74fc13d9-3c0d-479d-8832-afc9684c7231"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n",
        "choices": [
            "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_b.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_a.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',', '.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',', '.')\n    if temp_a == temp_b: return None \n    return a if float(temp_a) > float(temp_b) else b",
            "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) < float(temp_b) else b \n"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4e52720e-f4c5-480a-9bca-19f76a1989af"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board. Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\nIncomplete Solution:\nclass Solution:\n  def countBattleships(self, board: List[List[str]]) -> int:\n    ans = 0\n\n    for i, row in enumerate(board):\n      for j, cell in enumerate(row):\n        if cell == '.':\n          continue\n        _______________\n        if i > 0 and board[i - 1][j] == 'X':\n          continue\n        if j > 0 and board[i][j - 1] == 'X':\n          continue\n        ans += 1\n\n    return ans",
        "choices": [
            "        if any([board[i-1][j] == 'X', i > 0]):",
            "        if i > 0 and board[i - 1][j] == 'X':",
            "        if i > 0 and board[i-1][j] == 'X' or board[i][j-1] == 'X':",
            "        if board[i-1][j] == 'X' if i > 0 else False:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f41c2a57-af42-4cee-bf9b-1f678407f420"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it. Return the number of nice sub-arrays.\n\nIncomplete Solution:\nclass Solution:\n  def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n    def numberOfSubarraysAtMost(k: int) -> int:\n      ans = 0\n      l = 0\n      r = 0\n\n      _______________\n      while r <= len(nums):\n        if k >= 0:\n          ans += r - l\n          if r == len(nums):\n            break\n          if nums[r] & 1:\n            k -= 1\n          r += 1\n        else:\n          if nums[l] & 1:\n            k += 1\n          l += 1\n      return ans\n\n    return numberOfSubarraysAtMost(k) - numberOfSubarraysAtMost(k - 1)",
        "choices": [
            "      while r < nums.__len__():",
            "      while r != len(nums):",
            "      while r <= len(nums):",
            "      while r < len(nums) + 1:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "13e9ef94-6e84-4df3-9b35-c90b6f31278b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n]. You may return the answer in any order.\n\nIncomplete Solution:\nclass Solution:\n  def combine(self, n: int, k: int) -> List[List[int]]:\n    ans = []\n\n    def dfs(s: int, path: List[int]) -> None:\n      if len(path) == k:\n        ans.append(path.copy())\n        return\n\n      for i in range(s, n + 1):\n        path.append(i)\n        _______________\n        dfs(i + 1, path)\n        path.pop()\n\n    dfs(1, [])\n    return ans",
        "choices": [
            "        dfs(i, path)",
            "        dfs(s + 1, path)",
            "        dfs(i + 1, path)",
            "        dfs(s, path)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b1e3363d-7e96-43db-8236-a6c13e4f8f6a"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing. We define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i]. Return the maximum possible greatness you can achieve after permuting nums.\n\nIncomplete Solution:\nclass Solution:\n  def maximizeGreatness(self, nums: List[int]) -> int:\n    ans = 0\n\n    nums.sort()\n\n    for num in nums:\n      _______________\n      if num > nums[ans]:\n        ans += 1\n\n    return ans",
        "choices": [
            "      if num >= nums[ans]:",
            "      if num > nums[ans//2]:",
            "      if num > nums[ans]:",
            "      if num > nums[ans-1]:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b7fa54ce-e377-4c59-b407-cf967902db1f"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house. Return the maximum distance between two houses with different colors. The distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.\n\nIncomplete Solution:\nclass Solution:\n  def maxDistance(self, colors: List[int]) -> int:\n    n = len(colors)\n    i = 0  \n    j = n - 1  \n    while colors[i] == colors[-1]:\n      i += 1\n    while colors[j] == colors[0]:\n      j -= 1\n    _______________\n    return max(n - 1 - i, j)",
        "choices": [
            "    return max(j, n - 1 - i)",
            "    return max(i, n - 1 - j)",
            "    return max(n - 1 - j, i)",
            "    return max(n - 1 - i, j)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f7ce9838-6e2a-4223-a377-f32b1b1c1955"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed n x n grid where n is odd, and grid[r][c] is 0, 1, or 2. We say that a cell belongs to the Letter Y if it belongs to one of the following: The Letter Y is written on the grid if and only if: Return the minimum number of operations needed to write the letter Y on the grid given that in one operation you can change the value at any cell to 0, 1, or 2.\n\nIncomplete Solution:\nclass Solution:\n  def minimumOperationsToWriteY(self, grid: List[List[int]]) -> int:\n    n = len(grid)\n    mid = n // 2\n\n    def getOperations(a: int, b: int) -> int:\n      \"\"\"Returns the number of operations to turn Y into a and non-Y into b.\"\"\"\n      operations = 0\n      for i, row in enumerate(grid):\n        for j, num in enumerate(row):\n          _______________\n          if (i < mid and (i == j or i + j == n - 1)) or i >= mid and j == mid:\n            if num != a:\n              operations += 1\n          elif num != b:\n            operations += 1\n      return operations\n\n    return min(getOperations(0, 1), getOperations(0, 2),\n               getOperations(1, 0), getOperations(1, 2),\n               getOperations(2, 0), getOperations(2, 1))",
        "choices": [
            "          if (i < mid and (i == j or i + j == n - 1)) or i >= mid and j == mid:",
            "          if (i < mid and (i == j or i + j == n - 1 or j == mid)) or i >= mid and j == mid:",
            "          if (i <= mid and (i == j or i + j == n - 1)) or i > mid and j == mid:",
            "          if (i < mid and (i == j or i + j == n - 1) or j == mid) or i >= mid and j == mid:"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "774a9c38-181e-45c3-8508-19c2b86b8598"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\ninput = sys.stdin.readline\n\nN,M,V,P = map(int, input().split())\na = list(map(int, input().split()))\nA = sorted(a)[::-1]\n           \nright = P-1\nleft = N\n\nwhile left - right !=1:\n    \n    i = (left+right)//2\n    b = (V-((P-1)+(N-i)))\n    target = A[i]+M\n\n        \n    if b<0:\n        if A[P-1]<=target:\n            right = i\n        else:\n            left = i\n    else:\n        if target<A[P-1]:\n            left = i\n        else:\n            Q_sum=sum(A[P-1:i])\n            len_Q =i-(P-1)\n            if target*len_Q-Q_sum>=b*M:\n                right = i\n            else:\n                left =i\n\n\nprint(right+1)",
        "choices": [
            "Memory Limit Exceeded",
            "Compile Error",
            "No abnormally found",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "318a6b25-ebac-4c0f-87dd-9fb5142b7e9c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an array of positive integers nums. Return the number of subarrays of nums, where the first and the last elements of the subarray are equal to the largest element in the subarray.\n\nIncomplete Solution:\nclass Solution:\n  def numberOfSubarrays(self, nums: List[int]) -> int:\n    ans = 0\n    stack = []\n\n    for num in nums:\n      _______________\n      while stack and stack[-1][0] < num:\n        stack.pop()\n      if not stack or stack[-1][0] != num:\n        stack.append([num, 0])\n      stack[-1][1] += 1\n      ans += stack[-1][1]\n\n    return ans",
        "choices": [
            "      while stack and stack[-1][0] <= num:",
            "      while stack and num > stack[-1][0]:",
            "      while stack and num >= stack[-1][0]:",
            "      while stack and stack[-1][0] < num:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "08f3acc5-67d1-4baa-be13-3d9b923b3f76"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs. A pair (i, j) is fair if:\n\nIncomplete Solution:\nclass Solution:\n  def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n    nums.sort()\n\n    def countLess(summ: int) -> int:\n      res = 0\n      i = 0\n      j = len(nums) - 1\n      while i < j:\n        _______________\n        while i < j and nums[i] + nums[j] > summ:\n          j -= 1\n        res += j - i\n        i += 1\n      return res\n\n    return countLess(upper) - countLess(lower - 1)",
        "choices": [
            "        while i < j and nums[i] > summ - nums[j]:",
            "        while i < j and nums[i] + nums[j] > summ:",
            "        while i < j and nums[j] > summ - nums[i]:",
            "        while i < j and nums[i] + nums[j] >= summ:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "2b630c7d-7518-4e2f-93e6-75284cf36738"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums, partition it into two (contiguous) subarrays left and right so that: Return the length of left after such a partitioning. Test cases are generated such that partitioning exists.\n\nIncomplete Solution:\nclass Solution:\n  def partitionDisjoint(self, nums: List[int]) -> int:\n    n = len(nums)\n    _______________\n    mini = [0] * (n - 1) + [nums[-1]]\n    maxi = -math.inf\n\n    for i in range(n - 2, - 1, -1):\n      mini[i] = min(mini[i + 1], nums[i])\n\n    for i, num in enumerate(nums):\n      maxi = max(maxi, num)\n      if maxi <= mini[i + 1]:\n        return i + 1",
        "choices": [
            "    mini = [nums[0]] * (n - 1) + [nums[-1]]",
            "    mini = [0] * (n - 2) + [nums[-1], nums[-1]]",
            "    mini = [nums[-1]] * (n - 1) + [nums[-1]]",
            "    mini = [0] * (n - 1) + [nums[-1]]"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d4d1950e-1b5f-450a-8b7d-57a9b2bcc6bc"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "choices": [
            "    if l == sorted(l) or l == l[::-1]:\n        return True\n    return False",
            "    if l == l or l == l[::-1]:\n        return False\n    return True\n",
            "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
            "    if l == l or l == l[::-1]:\n        return True\n    return False"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "3411fcd3-b186-4281-9f90-b30a25749f2d"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
        "choices": [
            "    ind = -1\n    i = 1\n    while i < len(arr):\n        if arr[i] > arr[i - 1]: \n            ind = i\n        i += 1\n    return ind\n",
            "    ind = -1\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[0]: \n            ind = i\n        i += 1\n    return ind",
            "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
            "    ind = -1\n    i = 1\n    while i < len(arr):\n        if arr[i] <= arr[i - 1]:  \n            return i  \n        i += 1\n    return ind"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ff5864ec-dfeb-488a-91c0-7fac455b3e89"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "choices": [
            "return a * h // 2",
            "    if h > 5:\n        return a * h / 2.0\n    else:\n        return a * (h + 1) / 2.0 \n",
            "return a * h / 3",
            "    return a * h / 2.0\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c1a1edb8-7a53-4f3e-86a0-9b33d6b14c95"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn,k = map(int,input().split())\na = list(map(int,input().split()))\n\nfor i in range(n):\n    a[i] -= 1\n    \nvisited = [0]\nnow = 0\nflag = 0\n\nfor i in range(k):\n    now = a[now]\n    \n    if now in set(visited):\n        loop_start = now\n        flag = 1\n        break\n        \n    else:\n        visited.append(now)\n        \nif flag == 1:\n    loop = visited[visited.index(loop_start):]\n    m = len(loop)\n    \n    now = loop[(k-(len(visited)-m))%m]\n    \nprint(now + 1)\n",
        "choices": [
            "No abnormally found",
            "Compile Error",
            "Time Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f90e6f98-3974-43a3-b3f1-652ec8664624"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.\n\nIncomplete Solution:\nclass Solution:\n  def uniqueOccurrences(self, arr: List[int]) -> bool:\n    _______________\n    count = collections.Counter(arr)\n    occurrences = set()\n\n    for value in count.values():\n      if value in occurrences:\n        return False\n      occurrences.add(value)\n\n    return True",
        "choices": [
            "    count = collections.Counter(arr)",
            "    count = {}\nfor i in arr:\n    if i in count:\n        count[i] += 1\n    else:\n        count[i] = 1",
            "    count = {i: arr.count(i) for i in set(arr)}",
            "    count = dict(collections.Counter(arr))"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "958a9621-b537-4f18-abfa-63603ee7627e"
    },
    {
        "question": "Question: Is the following Python code valid?\n>>> a=(1,2,3)\n>>> b=a.update(4,)",
        "choices": [
            "Yes, a=(1,2,3,4) and b=(1,2,3,4)",
            "Yes, a=(1,2,3) and b=(1,2,3,4)",
            "No because tuples are immutable",
            "No because wrong syntax for update() method"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e82bd859-0fa4-4e1f-98c2-1aa5af4e874a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef main():\n    n, K = map(int, input().split())\n    H = list(map(int, input().split()))\n    s = sorted(set(H+[0]))\n    d = {i: j for j, i in enumerate(s)}\n    l = len(s)\n    m = max(s)\n    a = [m-i for i in s]\n    dp = [[10**13]*l for _ in range(K+1)]\n    dp[0][0] = 0\n    for h in H:\n        dh = d[h]\n        dp2 = [[10**13]*l for _ in range(K+1)]\n        t = [[i+j for i, j in zip(a, kk)] for kk in dp]\n        min_s = [[dp[i][j] for j in range(l)] for i in range(K+1)]\n        for i in range(K+1):\n            for j in range(l-2, -1, -1):\n                min_s[i][j] = min(min_s[i][j+1], min_s[i][j])\n            for j in range(1, l):\n                t[i][j] = min(t[i][j-1], t[i][j])\n            for j in range(l):\n                t[i][j] = t[i][j]-a[j]\n        for i in range(K):\n            for j in range(l):\n                dp2[i+1][j] = min(min_s[i][j], t[i][j])\n        for i in range(K+1):\n            dp2[i][dh] = min(dp2[i][dh], min(\n                [dp[i][j]+max(h-s[j], 0) for j in range(l)]))\n        dp = dp2\n    print(min([min(i) for i in dp]))\n\n\nmain()\n",
        "choices": [
            "Internal error",
            "Compile Error",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c59fadda-0c63-4fe5-8bd8-17ca797d9d6b"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn, m, k = map(int, input().split())\n\nmod = 10**9+7\nN = 10**5+50\nfac = [1]*(N+1)\nfinv = [1]*(N+1)\nfor i in range(N):\n    fac[i+1] = fac[i] * (i+1) % mod\nfinv[-1] = pow(fac[-1], mod-2, mod)\nfor i in reversed(range(N)):\n    finv[i] = finv[i+1] * (i+1) % mod\n\ndef cmb1(n, r, mod):\n    if r <0 or r > n:\n        return 0\n    r = min(r, n-r)\n    return fac[n] * finv[r] * finv[n-r] % mod\n\nans = 0\nfor i in range(n*m):\n    x, y = divmod(i, m)\n    # x\n    ans += x*m*cmb1(n*m-2, k-2, mod)*x\n    ans -= (n-1-x)*m*cmb1(n*m-2, k-2, mod)*x\n    # y\n    ans += y*n*cmb1(n*m-2, k-2, mod)*y\n    ans -= (m-1-y)*n*cmb1(n*m-2, k-2, mod)*y\n\nans %= mod\nprint(ans)",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "26647039-30f8-434e-ad5a-e23c8e72514d"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
        "choices": [
            "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence.startswith('I') for sentence in sentences)",
            "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
            "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence.rstrip().endswith(' I') for sentence in sentences)\n",
            "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(' I ' in sentence for sentence in sentences)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ade2393f-40fd-44c0-92c5-39d9103a1760"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given two 0-indexed integer arrays nums1 and nums2, each of length n, and a 1-indexed 2D array queries where queries[i] = [xi, yi]. For the ith query, find the maximum value of nums1[j] + nums2[j] among all indices j (0 <= j < n), where nums1[j] >= xi and nums2[j] >= yi, or -1 if there is no j satisfying the constraints. Return an array answer where answer[i] is the answer to the ith query.\n\nIncomplete Solution:\nclass Pair:\n  def __init__(self, x: int, y: int):\n    self.x = x\n    self.y = y\n\n  def __iter__(self):\n    yield self.x\n    yield self.y\n\n\nclass IndexedQuery:\n  def __init__(self, queryIndex: int, minX: int, minY: int):\n    self.queryIndex = queryIndex\n    self.minX = minX\n    self.minY = minY\n\n  def __iter__(self):\n    yield self.queryIndex\n    yield self.minX\n    yield self.minY\n\n\nclass Solution:\n  def maximumSumQueries(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:\n    pairs = sorted([Pair(nums1[i], nums2[i])\n                   for i in range(len(nums1))], key=lambda p: p.x, reverse=True)\n    ans = [0] * len(queries)\n    stack = []  \n\n    pairsIndex = 0\n    for queryIndex, minX, minY in sorted([IndexedQuery(i, query[0], query[1])\n                                          for i, query in enumerate(queries)],\n                                         key=lambda iq: -iq.minX):\n      while pairsIndex < len(pairs) and pairs[pairsIndex].x >= minX:\n        x, y = pairs[pairsIndex]\n        _______________\n        while stack and x + y >= stack[-1][1]:\n          stack.pop()\n        if not stack or y > stack[-1][0]:\n          stack.append((y, x + y))\n        pairsIndex += 1\n      j = self._firstGreaterEqual(stack, minY)\n      ans[queryIndex] = -1 if j == len(stack) else stack[j][1]\n\n    return ans\n\n  def _firstGreaterEqual(self, A: List[Tuple[int, int]], target: int) -> int:\n    l = 0\n    r = len(A)\n    while l < r:\n      m = (l + r) // 2\n      if A[m][0] >= target:\n        r = m\n      else:\n        l = m + 1\n    return l",
        "choices": [
            "        while stack and x + y >= stack[-1][1]:",
            "        while stack and y >= stack[-1][0]:",
            "        while stack and x > stack[-1][0]:",
            "        while stack and x * y >= stack[-1][1]:"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a41d7160-c70b-460d-bf4c-6c008b57ddf4"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nstring = \"my name is x\"\nfor i in string.split():\n    print (i, end=\", \")",
        "choices": [
            "m, y,  , n, a, m, e,  , i, s,  , x,",
            "m, y,  , n, a, m, e,  , i, s,  , x",
            "my, name, is, x,",
            "error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "270da2a8-6769-4cc5-b39e-295235734835"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
        "choices": [
            "    l = len(b)\n    pat = b + a \n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False",
            "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
            "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l-1]:  \n                return True\n    return False",
            "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l-1] == pat[j:j+l]:  \n                return True\n    return False"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f3529769-3fff-4c82-8c45-ec343a0a3d4e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed array of string words and two integers left and right. A string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'. Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].\n\nIncomplete Solution:\nclass Solution:\n  def vowelStrings(self, words: List[str], left: int, right: int) -> int:\n    kVowels = 'aeiou'\n    _______________\n    return sum(word[0] in kVowels and word[-1] in kVowels\n               for word in words[left:right + 1])",
        "choices": [
            "    return sum(word[0] in kVowels and word[-1] in kVowels",
            "    return sum(all(c in kVowels for c in (word[0], word[-1])) for word in words[left:right + 1])\n\nreturn sum(set((word[0], word[-1])) & set(kVowels) == set(kVowels) for word in words[left:right + 1])\n\nreturn sum(word[0] in kVowels and word[-1] in kVowels or word[0] == word[-1] for word in words[left:right + 1])"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1
        ],
        "label": "Python Basics",
        "task_id": "35c26e9e-12db-46bc-9bec-1b0946a7d950"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\ninput = sys.stdin.readline\nclass Bit:\n    def __init__(self, n):\n        self.size = n\n        self.tree = [0] * (n + 1)\n \n    def sum(self, i):\n        if i == 0:\n            return 0\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n \n    def add(self, i, x):\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i\naas = \"abcdefghijklmnopqrstuvwxyz\"\nN = int(input().strip())\nS = list(input().strip())\nQ = int(input().strip())\ncbt = dict()\nMX = 10**5 + 2\nfor c in aas:\n    cbt[c] = Bit(MX)\n    for i, a in enumerate(S):\n        if a == c:\n            cbt[c].add(i+1, 1)\n\nfor _ in range(Q):\n    t, i, c = input().split()\n    t = int(t)\n    if t == 1:\n        i = int(i)\n        if S[i-1] != c:\n            cbt[S[i-1]].add(i, -1)\n            cbt[c].add(i, 1)\n            S[i-1] = c\n    else:\n#        print(S)\n        l, r = int(i), int(c)\n#        print(l, r)\n        s = 0\n        for a in aas:\n            bt = cbt[a]\n#            print(a, bt.sum(r),bt.sum(l-1))\n            s += (bt.sum(r)-bt.sum(l-1)>0)\n        print(s)\n",
        "choices": [
            "No abnormally found",
            "Compile Error",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d84b0cb2-2f39-41a5-9336-9cf3936c516d"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n#!/usr/bin/env python3\n\nimport sys\ninput=sys.stdin.readline\n\na,b,c,d=map(int,input().split())\nans=-10**18\n#x=0 or y=0\nif a<=0<=b or c<=0<=d:\n    ans=max(ans,0)\n#x<0 and y>0\nans=max(ans,b*c)\n#x>0 and y>0\nans=max(ans,b*d)\n#x<0 and y<0\nans=max(ans,a*c)\n#x>0 and y<0\nans=max(ans,a*d)\nprint(ans)",
        "choices": [
            "No abnormally found",
            "Compile Error",
            "Runtime Error",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d5167e8d-6718-4aaf-ae35-91a8e9c66baf"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef solve():\n    INF = 10**12\n\n    def max2(x, y): return x if x >= y else y\n    def min2(x, y): return x if x <= y else y\n\n    N, K = map(int, input().split())\n    Hs = [0] + list(map(int, input().split()))\n\n    dp = [[INF]*(N+1) for _ in range(N+1)]\n    dp[0][0] = 0\n    for i in range(1, N+1):\n        H = Hs[i]\n        diffs = []\n        for iPrev in range(i):\n            diff = max2(0, H-Hs[iPrev])\n            diffs.append(diff)\n        dp[i][0] = 0\n        dp[i][1] = H\n        for j in range(2, min(i, N-K)+1):\n            for iPrev in range(i):\n                dp[i][j] = min2(dp[i][j], dp[iPrev][j-1]+diffs[iPrev])\n\n    ans = min(dpi[N-K] for dpi in dp)\n    print(ans)\n\n\nsolve()\n",
        "choices": [
            "Time Limit Exceeded",
            "Runtime Error",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "fe153d26-0b49-425a-86cf-4dcb76ca7751"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n# \u611a\nimport numpy as np\nn = int(input())\nfs = []\nfor _ in range(n):\n    r = list(input())\n    r = [ord(s) - ord(\"a\") for s in r]    \n    fs.append(r)\nfs = np.array(fs)\nsym = np.zeros((n,n))\ncnt = 0\nfor di in range(n):\n    for dj in range(n):\n        for i in range(n):\n            for j in range(n):\n                sym[(i+di)%n][(j+dj)%n] = fs[i][j]\n        if (sym == sym.T).all():\n            cnt += 1\nprint(cnt)",
        "choices": [
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Internal error",
            "Compile Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f5bf26dd-6f15-4e28-8ec1-00c5932eb237"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ns=input()\nnum=0\nfor i in s:\n  if i==\"-\":\n    num-=1\n  else\n    num+=1\nprint(num)",
        "choices": [
            "Compile Error",
            "Internal error",
            "Runtime Error",
            "No abnormally found"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4363cbc2-afbf-4d22-b7e2-cbca6aaa6177"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: \n\nIncomplete Solution:\nclass Solution:\n  def subtractProductAndSum(self, n: int) -> int:\n    prod = 1\n    summ = 0\n\n    while n > 0:\n      _______________\n      prod *= n % 10\n      summ += n % 10\n      n //= 10\n\n    return prod - summ",
        "choices": [
            "      prod *= n - n // 10 * 10",
            "      prod *= n % 10",
            "      prod *= int(str(n)[-1])",
            "      prod *= (n - n // 10 * 10)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "3cc51f18-b815-4cbd-8d8d-8b02c2bbcfe6"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def levenshtein(source, target):\n2     if source == '' or target == '':\n3         return len(source) or len(target)\n4     elif source[0] == target[0]:\n5         return 1 + levenshtein(source[1:], target[1:])\n6     else:\n7         return 1 + min(\n8             levenshtein(source,     target[1:]),\n9             levenshtein(source[1:], target[1:]),\n10             levenshtein(source[1:], target)\n11         )",
        "choices": [
            "Modify line 4:\n```       return levenshtein(source[1:], target[1:])```\n",
            "Modify line 1:\n```    if len(source) == 0 or len(target) == 0:```",
            "Modify line 2:\n```return max(len(source), len(target))```"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "bb51fc91-ca65-430e-8e85-79174cc38101"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become: Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]]. Given the sorted rotated array nums of unique elements, return the minimum element of this array. You must write an algorithm that runs in\u00a0O(log n) time.\n\nIncomplete Solution:\nclass Solution:\n  def findMin(self, nums: List[int]) -> int:\n    l = 0\n    r = len(nums) - 1\n\n    while l < r:\n      _______________\n      m = (l + r) // 2\n      if nums[m] < nums[r]:\n        r = m\n      else:\n        l = m + 1\n\n    return nums[l]",
        "choices": [
            "      m = l + (r - l) // 2",
            "      m = (l + r) >> 1",
            "      m = (l + r) // 2",
            "      m = (l + r) / 2"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "24f295f4-90f4-40e0-b516-e0f66da0b5b1"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums and an integer k, modify the array in the following way: You should apply this process exactly k times. You may choose the same index i multiple times. Return the largest possible sum of the array after modifying it in this way.\n\nIncomplete Solution:\nclass Solution:\n  def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n    nums.sort()\n\n    for i, num in enumerate(nums):\n      if num > 0 or k == 0:\n        break\n      nums[i] = -num\n      k -= 1\n\n    _______________\n    return sum(nums) - (k % 2) * min(nums) * 2",
        "choices": [
            "    return sum(nums) - (k % 2) * (-min(nums)) * 2 if min(nums) < 0 else sum(nums)",
            "    return sum(nums) - (k % 2) * min(nums) * 2",
            "    return sum(nums) - (k % 2) * max(-min(nums), 0) * 2",
            "    return sum(nums) - (k % 2) * abs(min(nums))"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f5eea43a-d8fa-4e34-9aae-44e41190a8bc"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'. If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names. If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names. It is possible to use both of these rules at the same time. Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\n\nIncomplete Solution:\nclass Solution:\n  def numUniqueEmails(self, emails: List[str]) -> int:\n    seen = set()\n\n    for email in emails:\n      local, domain = email.split('@')\n      local = local.split('+')[0].replace('.', '')\n      _______________\n      seen.add(local + '@' + domain)\n\n    return len(seen)",
        "choices": [
            "      seen.add(locale + \"@\" + domain)",
            "      seen.add(f\"{local}@{domain}\")",
            "      seen.add(local + '@' + domain)",
            "      seen.add(\"{}@{}\".format(local, domain))"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "5a7398c3-c738-4a02-b50c-b9677a9d4fbc"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
        "choices": [
            "    new_lst = []\n    for i in lst:\n        if len(i) % 2 != 0: \n            new_lst.append(i)\n    return sorted(new_lst, key=len)",
            "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
            "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 != 0:  \n            new_lst.append(i)\n    return sorted(new_lst, key=len)",
            "    lst.sort(key=len)  \n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst  "
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ff410913-7a50-4d62-8891-b66a768aafc5"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an array apple of size n and an array capacity of size m. There are n packs where the ith pack contains apple[i] apples. There are m boxes as well, and the ith box has a capacity of capacity[i] apples. Return the minimum number of boxes you need to select to redistribute these n packs of apples into boxes. Note that, apples from the same pack can be distributed into different boxes.\n\nIncomplete Solution:\nclass Solution:\n  def minimumBoxes(self, apple: List[int], capacity: List[int]) -> int:\n    appleSum = sum(apple)\n    capacitySum = 0\n\n    for i, c in enumerate(sorted(capacity, reverse=True)):\n      capacitySum += c\n      _______________\n      if capacitySum >= appleSum:\n        return i + 1\n\n    return len(capacity)",
        "choices": [
            "      if capacitySum >= appleSum * 0.9:",
            "      if capacitySum - appleSum >= 0:",
            "      if capacitySum >= appleSum:",
            "      if capacitySum > appleSum * 0.9:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d148afe9-524e-40b5-8d3a-1163eb2c1bd4"
    },
    {
        "question": "Question: What will be the output of the following Python code?\nl=[]\ndef convert(b):\n    if(b==0):\n        return l\n    dig=b%2\n    l.append(dig)\n    convert(b//2)\nconvert(6)\nl.reverse()\nfor i in l:\n    print(i,end=\"\")",
        "choices": [
            "011",
            "110",
            "3",
            "Infinite loop"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1916c9ff-783b-414b-8a22-26959a50d0a3"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a reference of a node in a connected undirected graph. Return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors. \u00a0 Test case format: For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list. An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph. The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n\nIncomplete Solution:\nclass Solution:\n  def cloneGraph(self, node: 'Node') -> 'Node':\n    if not node:\n      return None\n\n    q = collections.deque([node])\n    map = {node: Node(node.val)}\n\n    while q:\n      u = q.popleft()\n      for v in u.neighbors:\n        if v not in map:\n          map[v] = Node(v.val)\n          q.append(v)\n        _______________\n        map[u].neighbors.append(map[v])\n\n    return map[node]",
        "choices": [
            "        map[u].neighbors.extend([map[v]])",
            "        map[u].neighbors += [map[v]]",
            "        map.get(u).neighbors.append(map.get(v))",
            "        map[u].neighbors.append(map[v])"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d55110d4-b7ec-402c-8d34-febd76778d47"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nN=int(input())\nS=input().strip()+\"E\"\n\nmod=998244353\n\n\nS2=deque()\nNOW=1\nC=S[0]\nfor i in range(1,3*N+1):\n    if S[i]==C:\n        NOW+=1\n    else:\n        S2.append([C,NOW])\n        NOW=1\n        C=S[i]\n\nLEN=len(S2)\n\nANS=1\nfor i in range(1,N+1):\n    ANS=ANS*i%mod\n\nNOW=[]\nfor i in range(3):\n    x,y=S2.popleft()\n    NOW.append([x,y])\n\n#print(NOW)\nwhile S2 or NOW:\n    if len(S2)>0 and len(NOW)>0 and NOW[-1][0]==S2[0][0]:\n        x,y=S2.popleft()\n        NOW[-1][1]+=y\n\n    while len(NOW)<=2:\n        x,y=S2.popleft()\n        NOW.append([x,y])\n\n    ANS=ANS*NOW[0][1]*min(NOW[1][1],NOW[0][1])%mod\n    NOW[0][1]-=1\n    NOW[1][1]-=1\n    NOW[2][1]-=1\n\n    while len(NOW)>=3 and NOW[2][1]==0:\n        NOW.pop(2)\n\n    while len(NOW)>=2 and NOW[1][1]==0:\n        NOW.pop(1)\n\n    while len(NOW)>=1 and NOW[0][1]==0:\n        NOW.pop(0)\n\n    #print(NOW)\n        \nprint(ANS)\n    \n",
        "choices": [
            "Runtime Error",
            "No abnormally found",
            "Memory Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f6e1a540-2dc8-4943-91f2-cb5d41b50377"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations. You can perform the following operation at most maxOperations times: Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations. Return the minimum possible penalty after performing the operations.\n\nIncomplete Solution:\nclass Solution:\n  def minimumSize(self, nums: List[int], maxOperations: int) -> int:\n    def numOperations(m: int) -> int:\n      return sum((num - 1) // m for num in nums) <= maxOperations\n    return bisect.bisect_left(range(1, max(nums)), True,\n                              _______________\n                              key=lambda m: numOperations(m)) + 1",
        "choices": [
            "                              key=lambda x: numOperations(x)",
            "                              key=lambda m: numOperations(m)) + 1",
            "                              key=numOperations",
            "                              key=lambda x:x and numOperations(x)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e0e37779-a2d9-4496-a872-17d2dc18e9c7"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i. All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully). Please note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully). Return the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.\n\nIncomplete Solution:\nfrom enum import Enum\n\n\nclass BoxCase(Enum):\n  kEqualDistantBalls = 0\n  kEqualBalls = 1\n\n\nclass Solution:\n  def getProbability(self, balls: List[int]) -> float:\n    n = sum(balls) // 2\n    fact = [1, 1, 2, 6, 24, 120, 720]\n\n    def cases(i: int, ballsCountA: int, ballsCountB: int,\n              colorsCountA: int, colorsCountB, boxCase: BoxCase) -> float:\n      if ballsCountA > n or ballsCountB > n:\n        return 0\n      if i == len(balls):\n        return 1 if boxCase == BoxCase.kEqualBalls else colorsCountA == colorsCountB\n\n      ans = 0.0\n\n      for ballsTakenA in range(balls[i] + 1):\n        ballsTakenB = balls[i] - ballsTakenA\n        newcolorsCountA = colorsCountA + (ballsTakenA > 0)\n        newcolorsCountB = colorsCountB + (ballsTakenB > 0)\n        _______________\n        ans += cases(i + 1, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,\n                     newcolorsCountA, newcolorsCountB, boxCase) / \\\n            (fact[ballsTakenA] * fact[ballsTakenB])\n\n      return ans\n\n    return cases(0, 0, 0, 0, 0, BoxCase.kEqualDistantBalls) / \\\n        cases(0, 0, 0, 0, 0, BoxCase.kEqualBalls)",
        "choices": [
            "        ans += cases(i + 2, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,",
            "        ans += cases(i + 1, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,",
            "        ans += cases(i, ballsCountA + ballsTakenA, ballsCountB + ballsTakenB,",
            "        ans += cases(i + 1, ballsCountA - ballsTakenA, ballsCountB - ballsTakenB,"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e50a2545-8255-4759-9766-46c615898b7e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values. Implement the MedianFinder class:\n\nIncomplete Solution:\nclass MedianFinder:\n  def __init__(self):\n    self.maxHeap = []\n    self.minHeap = []\n\n  def addNum(self, num: int) -> None:\n    _______________\n    if not self.maxHeap or num <= -self.maxHeap[0]:\n      heapq.heappush(self.maxHeap, -num)\n    else:\n      heapq.heappush(self.minHeap, num)\n\n    if len(self.maxHeap) < len(self.minHeap):\n      heapq.heappush(self.maxHeap, -heapq.heappop(self.minHeap))\n    elif len(self.maxHeap) - len(self.minHeap) > 1:\n      heapq.heappush(self.minHeap, -heapq.heappop(self.maxHeap))\n\n  def findMedian(self) -> float:\n    if len(self.maxHeap) == len(self.minHeap):\n      return (-self.maxHeap[0] + self.minHeap[0]) / 2.0\n    return -self.maxHeap[0]",
        "choices": [
            "    if not self.maxHeap or num <= -self.maxHeap[0]:",
            "    if not self.maxHeap or num < -self.maxHeap[-1]:",
            "    if not self.maxHeap or num < -self.maxHeap[0]:",
            "    if len(self.maxHeap) == 0 or num <= self.maxHeap[0]*-1:"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "17da3f54-ef66-4f3c-9a17-94c08a403e51"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an array of strings of the same length words. In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i]. Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j]. A group of special-equivalent strings from words is a non-empty subset of words such that: Return the number of groups of special-equivalent strings from words.\n\nIncomplete Solution:\nclass Solution:\n  def numSpecialEquivGroups(self, words: List[str]) -> int:\n    _______________\n    return len({''.join(sorted(word[::2])) + ''.join(sorted(word[1::2]))\n                for word in words})",
        "choices": [
            "    return len({''.join(sorted(word[::2], reverse=True)) + ''.join(sorted(word[1::2], reverse=True)) for word in words}",
            "    return len({tuple(sorted(word[::2])) + tuple(sorted(word[1::2])) for word in words}",
            "    return len({'.'.join(sorted(word[::2])) + '.'.join(sorted(word[1::2])) for word in words}",
            "    return len({''.join(sorted(word[::2])) + ''.join(sorted(word[1::2]))"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "5dea5282-07d3-4bf2-ac8b-31f8bc4c9f75"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\na, b = map(int, input().split())\nif a == b : print('Draw')\nelse :\n  if min(a, b) == 1 : flag = True\n  if a < b :\n    if flag : print('Alice')\n    else : print('Bob')\n  else :\n    if flag : print('Bob')\n    else : print('Alice')\n",
        "choices": [
            "Compile Error",
            "Runtime Error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ab861728-216e-4b50-aada-2ac27c6a81d0"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of integers nums, calculate the pivot index of this array. The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array. Return the leftmost pivot index. If no such index exists, return -1.\n\nIncomplete Solution:\nclass Solution:\n  def pivotIndex(self, nums: List[int]) -> int:\n    summ = sum(nums)\n    prefix = 0\n\n    for i, num in enumerate(nums):\n      _______________\n      if prefix == summ - prefix - num:\n        return i\n      prefix += num\n\n    return -1",
        "choices": [
            "      if prefix == (summ - num) / 2:",
            "      if prefix == summ - prefix - num:",
            "      if prefix * 2 + num == summ:",
            "      if prefix * 2 == summ - num:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ba112051-eca5-4b0f-83cc-7ab14e1a9ff0"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nS = input()\nT = input()\n\nresult = 0\nfor i in range(0,3):\n    if S[i] == T[i]:\n        result += 1\n\nprint (result)",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e350567f-e062-4419-bded-291f3d3406fc"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam. You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes. The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes. Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.\n\nIncomplete Solution:\nclass Solution:\n  def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\n    def extraPassRatio(pas: int, total: int) -> float:\n      \"\"\"Returns the extra pass ratio if a brilliant student joins.\"\"\"\n      _______________\n      return (pas + 1) / (total + 1) - pas / total\n\n    maxHeap = [(-extraPassRatio(pas, total), pas, total) for pas, total in classes]\n    heapq.heapify(maxHeap)\n\n    for _ in range(extraStudents):\n      _, pas, total = heapq.heappop(maxHeap)\n      heapq.heappush(\n          maxHeap, (-extraPassRatio(pas + 1, total + 1), pas + 1, total + 1))\n\n    return sum(pas / total for _, pas, total in maxHeap) / len(maxHeap)",
        "choices": [
            "      return (pas + 1) / (total + 2) - pas / total",
            "      return (pas + 2) / (total + 1) - pas / total",
            "      return (pas + 1) / (total + 1) - pas / total",
            "      return (pas + 1.5) / (total + 1) - pas / total"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "7de61860-8e13-437b-b161-6d5cd29d6a43"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef main():\n    from collections import Counter as ct\n    from bisect import bisect_left as bl\n\n    n = int(input())\n    max_a = sorted(ct(list(map(int, input().split()))).values())\n    now_a = [i for i in max_a]\n    m = len(max_a)\n    cnt = m\n    ans = 0\n    ans_list = [0]*(n-m)\n\n    for use in range(m, 1, -1):\n        rest = ans\n        nex = now_a[0]\n        while rest:\n            val = nex\n            start = bl(now_a, val+1)\n            nex += 1\n            q = bl(max_a, now_a[start-1]+1)-1\n            flag = 0\n            if now_a[start-1] == 0:\n                flag = 1\n            for i in range(start-1, max(-1, start-1-rest, q), -1):\n                cnt += flag\n                now_a[i] += 1\n                rest -= 1\n            if start != m:\n                nex = now_a[start]\n        while cnt >= use:\n            ans += 1\n            rest = use\n            nex = now_a[-1]\n            end = m\n            while rest:\n                val = nex\n                start = bl(now_a, val)\n                if start != 0:\n                    nex = now_a[start-1]\n                flag = 0\n                if now_a[start] == 1:\n                    flag = 1\n                end = min(end, bl(now_a, val+1), start+rest)\n                for i in range(start, end):\n                    cnt -= flag\n                    now_a[i] -= 1\n                    rest -= 1\n                end = start\n        ans_list.append(ans)\n    print(n)\n    for i in ans_list[::-1]:\n        print(i)\n\n\nmain()\n",
        "choices": [
            "Time Limit Exceeded",
            "No abnormally found",
            "Internal error",
            "Runtime Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "cd22e20d-7ecc-41c5-b823-b9e89df59b7b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise. A query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\nIncomplete Solution:\nclass Solution:\n  def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n    def isMatch(query: str) -> bool:\n      j = 0\n      for c in query:\n        _______________\n        if j < len(pattern) and c == pattern[j]:\n          j += 1\n        elif c.isupper():\n          return False\n      return j == len(pattern)\n\n    return [isMatch(query) for query in queries]",
        "choices": [
            "        if j < len(pattern) and c in pattern:",
            "        if c == pattern[j] and j < len(pattern):",
            "        if j < len(pattern) and c == pattern[j]:",
            "        if j < len(pattern) and c.lower() == pattern[j].lower():"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ae9a13d7-7af2-403d-928a-133946889865"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n#137c\nN = int(input())\nsList = []\nans = 0\n\n#\u6587\u5b57\u3092\u8aad\u307f\u8fbc\u307f\u3064\u3064\u3001\u51fa\u73fe\u56de\u6570\u3092\u8f9e\u66f8\u5316\u3057\u3066\u3001\u914d\u5217\u306b\u8ffd\u52a0\nfor i in range(N): #2<N<10^5\n    # https://www.lifewithpython.com/2015/05/python-count-characters-in-string.html\n    string = str(input())\n\n    #\u8f9e\u66f8\u5316\n    #counter = {}\n    #for c in string:\n    #    if not c in counter:\n    #        counter[c] = 1\n    #    else:\n    #        counter[c] += 1\n    #sList.append(counter)\n    #\u2193\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u306a\u30891\u884c\u3067\u66f8\u3051\u308b\n    dictionarized_string = {letter: string.count(letter) for letter in string}\n    ans += sList.count(dictionarized_string)\n    sList.append(dictionarized_string)\n    \n#\u5168\u901a\u308a\u3092\u6bd4\u8f03\n#for i in range(N-1):\n#    for j in range(i+1,N,1):\n#        if sList[i]==sList[j]:\n#            ans = ans+1\n#\u2191.count\u30671\u884c\u3067\u6e08\u3093\u3060  \n\nprint(ans)",
        "choices": [
            "Time Limit Exceeded",
            "Runtime Error",
            "Memory Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1e3a12f1-d937-4b4d-9c58-50665e2634ff"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\n\npublic class main {\n\n    public static void main(String[] args) throws IOException {\n        new main().solve();\n    }\n\n    private void solve() throws IOException {\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        char[] seq = f.readLine().toCharArray();\n        int r = 0;\n        int max = 0;\n        for (int i = 0; i < seq.length; i++) {\n            if (seq[i] == 'R') r++;\n            else  r = 0;\n            max = Math.max(r, max);\n        }\n\n        out.println(max);\n        out.close();\n    }\n}\n",
        "choices": [
            "Compile Error",
            "No abnormally found",
            "Internal error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "deede7e2-02f1-4b74-bd49-074beaab2951"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner stdin = new Scanner(System.in);\n        int n = stdin.nextInt();\n        int x = stdin.nextInt();\n        int ans = 3 * (n - gcd(x, n));\n        System.out.println(ans);\n    }\n\n    public static int gcd(int a, int b) {\n        if (b % a == 0) {\n            return a;\n        } else {\n            return gcd(b % a, a);\n        }\n    }\n}",
        "choices": [
            "No abnormally found",
            "Internal error",
            "Runtime Error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "e94818fd-b223-491e-b070-083e7977810f"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\nclass Main{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int H = sc.nextInt();\n        int W = sc.nextInt();\n        String[] dic = new String[H];\n        for(int i=0;i<H;i++) dic[i]=sc.next();\n        int end = -1;\n        for(int i=0;i<H;i++){\n            int left = 0;\n            while(left<H&&dic[i].charAt(left)=='.') left++;\n            if(end>left){\n                System.out.println(\"Impossible\");\n                System.exit(0);\n            }\n            end = W-1;\n            while(end>=0&&dic[i].charAt(end)=='.') end--;\n        }\n        System.out.println(\"Possible\");\n    }\n}\n",
        "choices": [
            "Internal error",
            "Compile Error",
            "Runtime Error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "66eb2209-7c08-4482-bfe2-8f72ba5d991d"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 public class POSSIBLE_CHANGE {\n3     public static int possible_change(int[] coins, int total) {\n4         if (total == 0) {\n5             return 1;\n6         }\n7         if (total < 0) {\n8             return 0;\n9         }\n10         int first = coins[0];\n11         int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n12         return possible_change(coins, total-first) + possible_change(rest, total);\n13     }\n14 }",
        "choices": [
            "Modify line 4:\n```        if (total == 0 || coins.length == 0) {```",
            "Modify line 6:\n```       if (total < 0 ||coins.length==0) {```\n",
            "Modify line 5:\n```return (total == 0) ? 1 : 0;```",
            "Modify line 7:\n```if (total < 0 || coins.length == 0) {```"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "02989534-0d83-46f5-bc05-befe6faba198"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.BufferedWriter;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author prakharjain\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        agc021_d solver = new agc021_d();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class agc021_d {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n\n            String s = in.next();\n\n            int n = s.length();\n\n            int k = in.nextInt();\n\n            int[][][] dp = new int[n][n][k + 1];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    for (int l = 0; l <= k; l++) {\n                        dp[i][j][l] = -1;\n                    }\n                }\n            }\n\n            out.println(rec(dp, 0, n - 1, k, s));\n        }\n\n        int rec(int[][][] dp, int i, int j, int k, String s) {\n            if (i > j)\n                return 0;\n\n            if (dp[i][j][k] != -1)\n                return dp[i][j][k];\n\n            if (i == j) {\n                return dp[i][j][k] = 1;\n            }\n\n            int ans = 0;\n            if (s.charAt(i) == s.charAt(j)) {\n                ans = 2 + rec(dp, i + 1, j - 1, k, s);\n            } else {\n                ans = Math.max(rec(dp, i, j - 1, k, s), rec(dp, i + 1, j, k, s));\n                if (k > 0) {\n                    ans = Math.max(ans, 2 + rec(dp, i + 1, j - 1, k - 1, s));\n                }\n\n            }\n\n            return dp[i][j][k] = ans;\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void println(int i) {\n            writer.println(i);\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String nextString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public String next() {\n            return nextString();\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}\n\n",
        "choices": [
            "Compile Error",
            "Memory Limit Exceeded",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "53501ae8-8099-4acf-91d7-66c1341c9298"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nclass Main{\n  public static void main(String[] args){\nScanner sc=new Scanner(System.in);\n\t\t    int n=sc.nextInt();\n\t\t    long sum=0;\n\t\t    Map<Long,Long> m=new HashMap<>();\n\t\t    for(int i=0;i<n;i++){\n\t\t    \t\tlong c=sc.nextLong();\n\t\t    \t\tsum+=c;\n\t\t    \t\tif(!m.containsKey(c)) {\n\t\t    \t\t\tm.put(c,1);\n\t\t    \t\t}else {\n\t\t    \t\t\tm.put(c,m.get(c)+1);\n\t\t    \t\t}\n\t\t    }int k=sc.nextInt();\n\t\t    for(int i=0;i<k;i++) {\n\t\t    \t long prev=sc.nextLong();\n\t\t\t\t    long fill=sc.nextLong();\n\t\t\t\t    if(m.containsKey(prev)) {\n\t\t\t\t    long g=m.get(prev);\n\t\t\t\t    sum=sum-prev*g;\n\t\t\t\t    sum=sum+fill*g;\n\t\t\t\t  \t\t\t\t    m.remove(prev);\n\t\t\t\t    \n\t\t\t\t    if(!m.containsKey(fill)) {\n\t\t    \t\t\tm.put(fill,g);\n\t\t    \t\t}else {\n\t\t    \t\t\tm.put(fill,m.get(fill)+g);\n\t\t    \t\t}\n\t\t\t\t    \n                    }\n\t\t\t\t    System.out.println(sum);\n\t\t    }\n\t\t    \n\t\t   \n\t\t \n\n  }\n    \n  }\n",
        "choices": [
            "No abnormally found",
            "Runtime Error",
            "Time Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "68f517b9-fa67-414e-aec2-172d445572ad"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n \npublic class Main {\n    public static void main(final String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] b = new int[n-1];\n        for (int i = 0; i < n-1; i++) {\n            b[i] = sc.nextInt();\n        }\n        \n        int count = b[0] + b[n-2];\n        for (int i = 0; i < n; i++) {\n            count += Math.min(b[i-1], b[i]);\n        }\n        System.out.println(count);\n        \n    }\n}",
        "choices": [
            "Internal error",
            "No abnormally found",
            "Memory Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "c1bec0f4-2dfe-403a-93cc-278cc405571a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class Main {\n    private static char[] map;\n    public static void main(String[] args) throws Exception {\n        Main main = new Main();\n        main.solve();\n    }\n    public void solve() throws Exception {\n        Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        String S = scan.next();\n        Main.map = S.toCharArray();\n        int length = S.length();\n        int[] data = new int[length];\n        Arrays.fill(data, 1);\n        Stage first = new Stage(0, data);\n        HashMap<String, Stage> map = new HashMap<>();\n        Stage current = first;\n        while(!map.containsKey(current.key)) {\n            map.put(current.key, current);\n            current = current.next();\n        }\n        Stage prev = map.get(current.key);\n        long diff = current.step - prev.step;\n        BigInteger total = BigInteger.TEN.pow(100);\n        BigInteger remain = total.subtract(new BigInteger(Long.toString(current.step)));\n        remain = remain.mod(new BigInteger(Long.toString(diff)));\n        long x = remain.longValue();\n        for (int i = 1; i <= x; i++) {\n            current = current.next();\n        }\n        StringBuilder sb = new StringBuilder();\n        for (long i : current.data) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        System.out.println(sb.substring(0, sb.length()-1));\n    }\n    class Stage {\n        long step;\n        int[] data;\n        String key;\n        public Stage(long step, int[] data) {\n            this.step = step;\n            this.data = data;\n            this.key = this.key();\n        }\n\n        public Stage next() {\n            int[] next_data = new int[data.length];\n            for (int i = 0; i < data.length; i++) {\n                if (Main.map[i] == 'L') {\n                    next_data[i-1] += this.data[i];\n                } else {\n                    next_data[i+1] += this.data[i];\n                }\n            }\n            Stage next = new Stage(this.step + 1, next_data);\n            return next;\n        }\n\n        public String key() {\n            StringBuilder sb = new StringBuilder();\n            for (int x : this.data) {\n                sb.append(x);\n            }\n            return sb.toString();\n        }\n    }\n}\n",
        "choices": [
            "Compile Error",
            "Runtime Error",
            "No abnormally found",
            "Time Limit Exceeded"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "1b3f47cd-05de-4889-80bd-afd878ece750"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n= scan.nextInt();\n\t\tint m= scan.nextInt();\n\t\tint a[][]= new int[n][m];\n\t\tint b[]= new int[m];\n\t\tint c= scan.nextInt();\n\t\tfor(int i=0;i<m;i++) {\n\t\t\tb[i]=scan.nextInt();\n\t\t}\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\ta[i][j]=scan.nextInt();\n\t\t\t}\n\t\t}\n\t\tscan.close();\n\t\tint cnt=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tint sum=0;\n\t\t\tfor(int j=0;j<n;j++) {\n\t\t\t\tsum+=a[i][j]*b[j];\n\t\t\t}\n\t\t\tif(sum+c>0)cnt++;\n\t\t}\n\t\tSystem.out.println(cnt);\n\t}\n}",
        "choices": [
            "Compile Error",
            "Time Limit Exceeded",
            "Internal error",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "98b6d2a6-48ce-4be0-9a30-ea8db0baa402"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n// No sorceries shall prevail. //           \nimport java.util.*;\nimport javafx.util.*;\nimport java.io.*;\npublic class Main {\n\t//Variables\n\tstatic long mod = 1000000007;\n\tstatic long mod2 = 998244353;\n\tstatic FastReader inp= new FastReader();\n\tstatic PrintWriter out= new PrintWriter(System.out);\n\tpublic static void main(String args[]) {\t\t    \t\n\t   \tMain g=new Main();\n\t   \tg.main();\n\t   \tout.close();\n\t}\n\t\n\t//Main\n\tvoid main() {\n\t\t\n\t\tint n=inp.nextInt();\n\t\tString s[]=new String[n];\n\t\tinput(s,n);\n\t\tStringBuilder sb= new StringBuilder(\"\");\n\t\tPair<Integer,Integer> pos[]=new Pair[n];\n\t\tPair<Integer,Integer> neg[]=new Pair[n];\n\t\tint posIndex=0,negIndex=0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tint count=0,min=s[i].length();\n\t\t\tfor(int j=0;j<s[i].length();j++){\n\t\t\t\tif(s[i].charAt(j)=='(') {\n\t\t\t\t\tcount++;\n\t\t\t\t}else {\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tmin=Math.min(count, min);\n\t\t\t}\n\t\t\tif(min<0) {\n\t\t\t\tif(count>0) {\n\t\t\t\t\tpos[posIndex++]=new Pair(min,i);\n\t\t\t\t}else {\n\t\t\t\t\tneg[negIndex++]=new Pair(min-count,i);\t\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tsb.append(s[i]);\n\t\t\t}\n\t\t}\n\t\tArrays.sort(pos,0,posIndex);\n\t\tArrays.sort(neg,0,posIndex);\n\t\tfor(int i=0;i<posIndex;i++) {\n\t\t\tsb.append(s[pos[i].getValue()]);\n\t\t}\n\t\tfor(int i=negIndex-1;i>=0;i--) {\n\t\t\tsb.append(s[neg[i].getValue()]);\n\t\t}\n\t\tint count=0;\n\t\t//out.println(sb);\n\t\tfor(int i=0;i<sb.length();i++) {\n\t\t\tif(sb.charAt(i)=='(') {\n\t\t\t\tcount++;\n\t\t\t}else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count<0) {\n\t\t\t\tout.println(\"No\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tout.println(count==0?\"Yes\":\"No\");\n\t}\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t// Classes\n\tstatic class Edge implements Comparable<Edge>{\n\t\tint l,r;\n\t\tEdge(){}\n\t\tEdge(int l,int r){\n\t\t\tthis.l=l;\n\t\t\tthis.r=r;\n\t\t}\n\t\t@Override\n\t\tpublic int compareTo(Edge e) {\n\t\t\treturn (l-e.l)!=0?l-e.l:r-e.r;\n\t\t}\n\t}\n\t\n    static class Segment implements Comparable<Segment> {\n\t\tlong l, r, initialIndex;\n\t\tSegment () {}\n\t\tSegment (long l_, long r_, long d_) {\n\t\t    this.l = l_;\n\t\t    this.r = r_;\n\t\t    this.initialIndex = d_;\n\t\t}\n\t\t@Override\n\t\tpublic int compareTo(Segment o) {\n\t\t    return (int)((l - o.l) !=0 ? l-o.l : initialIndex - o.initialIndex);\n\t\t}\n    }\n    \n    static class FastReader { \n        BufferedReader br; \n        StringTokenizer st; \n  \n        public FastReader() { \n            br = new BufferedReader(new InputStreamReader(System.in)); \n        } \n        String next() { \n            while (st==null || !st.hasMoreElements()) { \n                try { \n                    st = new StringTokenizer(br.readLine()); \n                } \n                catch (IOException  e) { \n                    e.printStackTrace(); \n                } \n            } \n            return st.nextToken(); \n        } \n        int nextInt() { \n            return Integer.parseInt(next()); \n        } \n        long nextLong() { \n            return Long.parseLong(next()); \n        } \n        double nextDouble() { \n            return Double.parseDouble(next()); \n        } \n        String nextLine() { \n            String s=\"\"; \n            try { \n                s=br.readLine(); \n            } \n            catch (IOException e) { \n                e.printStackTrace(); \n            } \n            return s; \n        } \n    } \n    \n    // Functions\n\tstatic long gcd(long a, long b) { \n\t\treturn b==0?a:gcd(b,a%b);\n\t}\n\tstatic int gcd(int a, int b) { \n\t\treturn b==0?a:gcd(b,a%b);\n\t}\n\t\n\tvoid reverse(long[] A,int l,int r) {\n        int i=l,j=r-1;\n        while(i<j) {\n            long t=A[i];\n            A[i]=A[j];\n            A[j]=t;\n            i++;j--;\n        }\n    }\n    void reverse(int[] A,int l,int r) {\n        int i=l,j=r-1;\n        while(i<j) {\n            int t=A[i];\n            A[i]=A[j];\n            A[j]=t;\n            i++;j--;\n        }\n    }\n    \n    //Input Arrays\n    static void input(long a[], int n) {\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i]=inp.nextLong();\n\t\t}\n\t}\n\tstatic void input(int a[], int n) {\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i]=inp.nextInt();\n\t\t}\n\t}\t\n\tstatic void input(String s[],int n) {\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ts[i]=inp.next();\n\t\t}\n\t}\n\tstatic void input(int a[][], int n, int m) {\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\ta[i][j]=inp.nextInt();\n\t\t\t}\n\t\t}\n\t}\n\tstatic void input(long a[][], int n, int m) {\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tfor(int j=0;j<m;j++) {\n\t\t\t\ta[i][j]=inp.nextLong();\n\t\t\t}\n\t\t}\n\t}\n\t\t\n}\n",
        "choices": [
            "Compile Error",
            "Runtime Error",
            "Internal error",
            "No abnormally found"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "fe6db6e9-4d3a-435c-9b35-66f6d59c2075"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n\nimport java.util.Scanner;\n\n class Main {\n    static int total;\n    static int[] costs;\n    static int[] treasures;\n    static int min;\n\n\n    static void dp(int key, int treasure, int cost){\n        if(key >= costs.length)\n            return;\n        if(treasure==total){\n            min=Math.min(min, cost);\n            return;\n        }\n        if(cost==Integer.MAX_VALUE)\n            cost=0;\n        dp(key+1, treasure| treasures[key], cost+costs[key]);\n        dp(key+1, treasure, cost);\n    }\n\n    public static void main(String[] args) {\n        Scanner in =new Scanner(System.in);\n        int n= in.nextInt();\n        int m = in.nextInt();\n        costs = new int[m];\n        min=Integer.MAX_VALUE;\n        treasures = new int[m];\n        total=0;\n        for(int i=0;i<n;i++){\n            total=total | (1<<i);\n        }\n       //System.out.println(\"Total \" + total);\n        for(int i=0;i<m;i++){\n            costs[i]=in.nextInt();\n            int tres= in.nextInt();\n            int t=0;\n            for(int j=0;j<tres;j++){\n                int k=in.nextInt();\n                t|= (1 << (k-1));\n            }\n            treasures[i]=t;\n        }\n        dp(0,0, Integer.MAX_VALUE);\n        if(min==Integer.MAX_VALUE) {\n            int x=-1;\n            System.out.println(x);\n        }\n        else\n            System.out.println(min);\n\n    }\n}\n",
        "choices": [
            "No abnormally found",
            "Time Limit Exceeded",
            "Memory Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "83672988-2772-44c0-bc18-448ce23a65c4"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.next();\n        long k = sc.nextLong();\n        long ans = 0L;\n        String f = null, m = null, b = null;\n        for (int i = 1; i < s.length(); i++) {\n            if(s.charAt(0) != s.charAt(i)){\n                f = s.substring(0, i);\n                s = s.substring(i);\n                break;\n            }\n        }\n        if(f == null){\n            long sum = s.length() * k;\n            ans = sum / 2;\n        }else{\n            for (int i = 1; i < s.length(); i++) {\n                if(s.charAt(s.length()-1) != s.charAt(s.length()-1-i)){\n                    b = s.substring(s.length()-i);\n                    m = s.substring(0, s.length()-i);\n                    break;\n                }else if(i == s.length()-1){\n                    b = s;\n                }\n            }\n            if(m == null){\n                ans = ((f.length()/2) + (b.length()/2)) * k;\n            }else{\n                long mc = 0L, tmp = 1;\n                for (int i = 1; i < m.length(); i++) {\n                    if(m.charAt(i-1) == m.charAt(i)){\n                        tmp++;\n                    }else{\n                        mc += tmp/2;\n                        tmp = 1;\n                    }\n                }\n                mc += tmp/2;\n                if(f.charAt(0) == b.charAt(0)){\n                    ans = mc * k;\n                    ans += f.length()/2 + b.length()/2;\n                    ans += ( (f.length() + b.length()) / 2 ) * (k-1);\n                }else{\n                    ans = ( (f.length()/2) + (b.length()/2) + mc ) * k;\n                }\n            }\n        }\n        System.out.println(ans);\n        sc.close();\n\n    }\n\n}\n",
        "choices": [
            "No abnormally found",
            "Runtime Error",
            "Internal error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "ccd8467f-9583-476e-8722-4013709ac482"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n//package solver;\n\nimport java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Main {\n    \n    int H, W, n;\n    int x, y;\n    String s, t;\n    \n    boolean okByLR(){\n        int lft = y, rgt = y;\n        for(int i = 0; i < n; i++){\n            if(s.charAt(i) == 'L'){\n                lft--;\n            } else if(s.charAt(i) == 'R'){\n                rgt++;\n            }\n            //---\n            if(lft < 1 || rgt > W){\n                return false;\n            }\n            //---\n            if(t.charAt(i) == 'L'){\n                if(rgt > 1){\n                    rgt--;\n                }\n            } else if(t.charAt(i) == 'R'){\n                if(lft < W){\n                    lft++;\n                }\n            }\n        }\n        return true;\n    }\n    \n    boolean okByUD(){\n        int up = x, down = x;\n        for(int i = 0; i < n; i++){\n            if(s.charAt(i) == 'U'){\n                up--;\n            } else if(s.charAt(i) == 'D'){\n                down++;\n            }\n            //---\n            if(up < 1 || down > H){\n                return false;\n            }\n            //---\n            if(t.charAt(i) == 'U'){\n                if(down > 1){\n                    down--;\n                }\n            } else if(t.charAt(i) == 'D'){\n                if(up < H){\n                    up++;\n                }\n            }\n        }\n        return true;\n    }\n    \n    void run() throws IOException {\n        Reader in = new Reader();\n        H = in.nextInt();\n        W = in.nextInt();\n        n = in.nextInt();\n        x = in.nextInt();\n        y = in.nextInt();\n        s = in.readLine();\n        t = in.readLine();\n        \n        if(okByUD() == false || okByLR() == false){\n            System.out.println(\"NO\");\n        } else {\n            System.out.println(\"YES\");\n        }\n    }\n    \n    public static void main(String[] args) throws IOException {\n        new Main().run();\n    }\n    \n    static class Reader {\n        final private int bufferSize = 1 << 16;\n        final private DataInputStream din;\n        final private byte[] buffer;\n        private int bufferPointer, bytesRead;\n        \n        public Reader(){\n            din = new DataInputStream(System.in);\n            buffer = new byte[bufferSize];\n            bufferPointer = bytesRead = 0;\n        }\n        \n        public Reader(String fileName) throws IOException {\n            din = new DataInputStream(new FileInputStream(fileName));\n            buffer = new byte[bufferSize];\n            bufferPointer = bytesRead = 0;\n        }\n        \n        private void fillBuffer() throws IOException {\n            bytesRead = din.read(buffer, bufferPointer = 0, bufferSize);\n            if(bytesRead == -1){\n                buffer[0] = -1;\n            }\n        }\n        \n        private byte read() throws IOException {\n            if(bufferPointer == bytesRead){\n                fillBuffer();\n            }\n            return buffer[bufferPointer++];\n        }\n        \n        private void close() throws IOException {\n            if(din == null){\n                return ;\n            }\n            din.close();\n        }\n        \n        public String readLine() throws IOException {\n            byte[] buf = new byte[200005];\n            int cnt = 0, c;\n            while((c = read()) != -1){\n                if(c == '\\n'){\n                    break;\n                }\n                buf[cnt++] = (byte)c;\n            }\n            return new String(buf, 0, cnt);\n        }\n        \n        public int nextInt() throws IOException { \n            int ret = 0; \n            byte c = read(); \n            while (c <= ' ') c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read();\n            do{ \n                ret = ret * 10 + c - '0'; \n            } while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        }\n        \n        public long nextLong() throws IOException { \n            long ret = 0; \n            byte c = read(); \n            while (c <= ' ') c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do { \n                ret = ret * 10 + c - '0'; \n            } while ((c = read()) >= '0' && c <= '9'); \n            if (neg) \n                return -ret; \n            return ret; \n        }\n        \n        public double nextDouble() throws IOException { \n            double ret = 0, div = 1; \n            byte c = read(); \n            while (c <= ' ') c = read(); \n            boolean neg = (c == '-'); \n            if (neg) \n                c = read(); \n            do { \n                ret = ret * 10 + c - '0'; \n            } \n            while ((c = read()) >= '0' && c <= '9'); \n            if (c == '.'){\n                while ((c = read()) >= '0' && c <= '9'){ \n                    ret += (c - '0') / (div *= 10); \n                } \n            }\n            if (neg) \n                return -ret; \n            return ret; \n        } \n    }\n}\n",
        "choices": [
            "Runtime Error",
            "Internal error",
            "No abnormally found",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "488f5641-1f35-4876-9b95-8f68cb6d8238"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.System.in;\n\nclass Main{\n    static int N;\n    static long[] sum;\n    public static void main(String[] args)throws IOException{\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        String temp = reader.readLine();\n        N = Integer.parseInt(temp.split(\" \")[0]);\n        sum = new long[N+1];\n        temp = reader.readLine();\n        String[] buf = temp.split(\" \");\n        for(int i=1;i<=N;i++) sum[i] = sum[i-1]+Long.parseLong(buf[i-1]);\n        long ans = Long.MAX_VALUE;\n        for(int i=2;i<=N-2;i++){\n            long difLeft = halfClo(1,i);\n            long P = (sum[i]+difLeft)/2;\n            long Q = (sum[i]-difLeft)/2;\n            long difRight = halfClo(i+1,N);\n            long R = (sum[N]-sum[i]+difRight)/2;\n            long S = (sum[N]-sum[i]-difRight)/2;\n            long[] cur = new long[]{P,Q,R,S};\n            Arrays.sort(cur);\n            ans = Math.min(ans,cur[3]-cur[0]);\n        }\n        System.out.println(ans);\n    }\n    static long halfClo(int left, int right){\n        long hi = sum[right]-sum[left-1];\n        long lo = 0;\n        while(hi-lo>1){\n            long mid = (hi+lo)/2;\n            if(check(left,right,mid)) hi = mid;\n            else lo = mid;\n        }\n        return hi;\n    }\n    static boolean check(int left, int right, long target){\n        long all = sum[right]-sum[left-1];\n        int hi = right-1;\n        int lo = left;\n        while(hi-lo>1){\n            int mid = (hi+lo)/2;\n            long cur = sum[mid]-sum[left-1];\n            if(2*cur>=all-target&&2*cur<=all+target) return true;\n            if(2*cur<all-target) lo = mid;\n            else hi = mid;\n        }\n        boolean b1 = 2*(sum[hi]-sum[left-1])>=all-target&&2*(sum[hi]-sum[left-1])<=all+target;\n        boolean b2 = 2*(sum[lo]-sum[left-1])>=all-target&&2*(sum[lo]-sum[left-1])<=all+target;\n        return b1||b2;\n    }\n}\n",
        "choices": [
            "Time Limit Exceeded",
            "Compile Error",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f16184e8-9ec6-4f8b-8c77-91ea0ba8f8b4"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong n = sc.nextLong();\n\t\tlong x = sc.nextLong();\n\t\tif(2*x < n){\n\t\t\tx = n-x;\n\t\t}\n\t\tlong ans = 0;\n\t\tlong m = n-x;\n\t\tans += (x-x%m) * 3;\n\t\tn = m + x%m;\n\t\tx = n-m;\n\t\twhile(x != 0){\n\t\t\tif(2*x < n){\n\t\t\t\tx = n-x;\n\t\t\t}\n\t\t\tm = n-x;\n\t\t\tans += m * 3;\n\t\t\tn = x;\n\t\t\tx = n-m;\n\t\t}\n\n\t\tSystem.out.println(ans);\n\t}\n\n}",
        "choices": [
            "Internal error",
            "Time Limit Exceeded",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "965943c7-5a46-459d-8f9f-cc225e3047d3"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tstatic final StdIn in = new StdIn();\n\tstatic final PrintWriter out = new PrintWriter(System.out);\n\t\n\tpublic static void main(String[] args) {\n\t\tint q=in.nextInt();\n\t\twhile(q-->0) {\n\t\t\t/*int a=in.nextInt(), b=in.nextInt(), c=in.nextInt()-1, d=in.nextInt()-1;\n\t\t\tint el=1, er=(int)5e8, e=er;\n\t\t\twhile(el<=er) {\n\t\t\t\tint em=(el+er)/2;\n\t\t\t\tif(a>=b?(a-1)/em<=b:(b-1)/em<=a) {\n\t\t\t\t\te=em;\n\t\t\t\t\ter=em-1;\n\t\t\t\t} else\n\t\t\t\t\tel=em+1;\n\t\t\t}*/\n\t\t\tint a=in.nextInt(), b=in.nextInt(), c=in.nextInt()-1, d=in.nextInt()-1, e=a>=b?(a-1)/(b+1)+1:(b-1)/(a+1)+1;\n\t\t\tchar[] s = new char[a+b];\n\t\t\tfor(int i=0, lastSame=0; i<s.length; ++i) {\n\t\t\t\tif(lastSame>=e) {\n\t\t\t\t\tif(s[i-1]=='A') {\n\t\t\t\t\t\ts[i]='B';\n\t\t\t\t\t\t--b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts[i]='A';\n\t\t\t\t\t\t--a;\n\t\t\t\t\t}\n\t\t\t\t\tlastSame=1;\n\t\t\t\t} else {\n\t\t\t\t\tif(a-1>=b?(a-2)/e<=b:(b-1)/e<=a-1) {\n\t\t\t\t\t\ts[i]='A';\n\t\t\t\t\t\tif(i>0&&s[i-1]=='A')\n\t\t\t\t\t\t\t++lastSame;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlastSame=1;\n\t\t\t\t\t\t--a;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts[i]='B';\n\t\t\t\t\t\tif(i>0&&s[i-1]=='B')\n\t\t\t\t\t\t\t++lastSame;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlastSame=1;\n\t\t\t\t\t\t--b;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(new String(s).substring(c, d+1));\n\t\t}\n\t\tout.close();\n\t}\n\t\n\tinterface Input {\n\t\tpublic String next();\n\t\tpublic String nextLine();\n\t\tpublic int nextInt();\n\t\tpublic long nextLong();\n\t\tpublic double nextDouble();\n\t}\n\tstatic class StdIn implements Input {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate DataInputStream din;\n\t\tprivate byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\t\tpublic StdIn() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\t\tpublic StdIn(InputStream in) {\n\t\t\ttry{\n\t\t\t\tdin = new DataInputStream(in);\n\t\t\t} catch(Exception e) {\n\t\t\t\tthrow new RuntimeException();\n\t\t\t}\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\t\tpublic String next() {\n\t\t\tint c;\n\t\t\twhile((c=read())!=-1&&(c==' '||c=='\\n'||c=='\\r'));\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\twhile (c != -1)\n\t\t\t{\n\t\t\t\tif (c == ' ' || c == '\\n'||c=='\\r')\n\t\t\t\t\tbreak;\n\t\t\t\ts.append((char)c);\n\t\t\t\tc=read();\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic String nextLine() {\n\t\t\tint c;\n\t\t\twhile((c=read())!=-1&&(c==' '||c=='\\n'||c=='\\r'));\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\twhile (c != -1)\n\t\t\t{\n\t\t\t\tif (c == '\\n'||c=='\\r')\n\t\t\t\t\tbreak;\n\t\t\t\ts.append((char)c);\n\t\t\t\tc = read();\n\t\t\t}\n\t\t\treturn s.toString();\n\t\t}\n\t\tpublic int nextInt() {\n\t\t\tint ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic int[] readIntArray(int n) {\n\t\t\tint[] ar = new int[n];\n\t\t\tfor(int i=0; i<n; ++i)\n\t\t\t\tar[i]=nextInt();\n\t\t\treturn ar;\n\t\t}\n\t\tpublic long nextLong() {\n\t\t\tlong ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tpublic long[] readLongArray(int n) {\n\t\t\tlong[] ar = new long[n];\n\t\t\tfor(int i=0; i<n; ++i)\n\t\t\t\tar[i]=nextLong();\n\t\t\treturn ar;\n\t\t}\n\t\tpublic double nextDouble() {\n\t\t\tdouble ret = 0, div = 1;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\twhile ((c = read()) >= '0' && c <= '9');\n\t\t\tif (c == '.')\n\t\t\t\twhile ((c = read()) >= '0' && c <= '9')\n\t\t\t\t\tret += (c - '0') / (div *= 10);\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\t\tprivate void fillBuffer() throws IOException {\n\t\t\tbytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n\t\t\tif (bytesRead == -1)\n\t\t\t\tbuffer[0] = -1;\n\t\t}\n\t\tprivate byte read() {\n\t\t\ttry{\n\t\t\t\tif (bufferPointer == bytesRead)\n\t\t\t\t\tfillBuffer();\n\t\t\t\treturn buffer[bufferPointer++];\n\t\t\t} catch(IOException e) {\n\t\t\t\tthrow new RuntimeException();\n\t\t\t}\n\t\t}\n\t\tpublic void close() throws IOException {\n\t\t\tif (din == null)\n\t\t\t\treturn;\n\t\t\tdin.close();\n\t\t}\n\t}\n}",
        "choices": [
            "Internal error",
            "Runtime Error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f7ef3fc5-5abf-441e-a49e-bb6968cb0175"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = Integer.parseInt(sc.next());\n\t\tint[] p = new int[n + 1];\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tp[Integer.parseInt(sc.next())] = i;\n\t\tint max = 1;\n\t\tint tem = 1;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (p[i] < p[i - 1])\n\t\t\t\ttem = 1;\n\t\t\telse\n\t\t\t\ttem++;\n\t\t\tmax = Math.max(max, tem);\n\t\t}\n\t\tSystem.out.println(n - max);\n\t}\n}",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Time Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "417c9d35-9d56-4ac8-aef4-efc51cd20bbd"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\n\t\t//    \tFile file = new File(\"src/in.txt\");\n\t\t//    \tScanner sc = new Scanner(file);\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint N = sc.nextInt();\n\t\t//\t\tSystem.out.println(solve(N));\n\t\tint M = sc.nextInt();\n\t\tint[] dangerStair = new int[M];\n\t\tboolean flg = true;\n\t\tfor (int i = 0; i < M; i++) {\n\t\t\tdangerStair[i] = sc.nextInt();\n\t\t\tif (i > 0) {\n\t\t\t\tif (dangerStair[i] == dangerStair[i - 1] + 1) {\n\t\t\t\t\tflg = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (flg == false) {\n\t\t\tSystem.out.println(\"0\");\n\t\t} else {\n\t\t\tlong ans = 1;\n\t\t\tif (M > 1) {\n\t\t\t\tfor (int i = 0; i < M; i++) {\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tans = mod(ans * solve(dangerStair[i] - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans = mod(ans * solve(dangerStair[i] - dangerStair[i - 1] - 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans = mod(ans * solve(N - dangerStair[M - 1]));\n\t\t\t} else {\n\t\t\t\tans = mod(solve(dangerStair[0] - 1) * solve(N - dangerStair[0] - 1));\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t}\n\n\tpublic static long solve(int N) {\n\t\tif (N == 0)\n\t\t\treturn 1;\n\t\tlong num1 = 1;\n\t\tlong num2 = 1;\n\t\tlong tmp = 1;\n\t\tfor (int i = 1; i < N; i++) {\n\t\t\ttmp = num1 + num2;\n\t\t\tnum1 = num2;\n\t\t\tnum2 = tmp;\n\t\t}\n\t\treturn num1;\n\n\t}\n\n\tpublic static long mod(long N) {\n\n\t\treturn (long) N % 1000000007;\n\n\t}\n\n}",
        "choices": [
            "No abnormally found",
            "Runtime Error",
            "Internal error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "73a7c5b5-5a7c-40b9-9027-fa0444fafe80"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\npublic class Main {\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n    int N = sc.nextInt();\n    int K = sc.nextInt();\n    double A = Math.log(N) / Math.log(K);\n    int B=int(A);\n    System.out.println( B+1 );  \n  }\n}\n",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Compile Error",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "44dd7eef-d6ea-4ab8-96d4-4aa550c33b84"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tif(n <= 111)System.out.println(\"111\");\n\t\telse if(n > 111 && n <= 222)System.out.println(\"222\");\n\t\telse if(n > 222 && n <= 333)System.out.println(\"333\");\n\t\telse if(n > 333 && n <= 444)System.out.println(\"444\");\n\t\telse if(n > 444 && n <= 555)System.out.println(\"555\");\n\t\telse if(n > 555 && n <= 666)System.out.println(\"666\");\n\t\telse if(n > 666 && n <= 777)System.out.println(\"777\");\n\t\telse if(n > 777 && n <= 888)System.out.println(\"888\");\n\t\telse if(n > 888 && n <= 999)System.out.println(\"999\");\n\t}\n}",
        "choices": [
            "Time Limit Exceeded",
            "No abnormally found",
            "Runtime Error",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "d60035f8-1d77-463b-b783-400a562273fc"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\npublic class Main{\n  public static void main(String[] args){\n\tScanner sc = new Scanner(System.in);\n    String S = sc.next();\n    String T = sc.next();\n    int A = sc.nextInt();\n    int B = sc.nextInt();\n    String U = sc.next();\n    \n    if( S == U) S--;\n    else T--;\n    System.out.println(S + \" \" + T);\n    \n    \n  }\n}",
        "choices": [
            "Internal error",
            "Runtime Error",
            "Compile Error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f300152f-f62d-499b-9095-560455eab72a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\t// \u5165\u529b\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[][] s = new int[k][2];\n\t\tfor(int i = 0; i < k; i++){\n\t\t    s[i][0] = sc.nextInt();\n\t\t    s[i][1] = sc.nextInt();\n\t\t}\n\t\t\n\t\t// \u8a08\u7b97\n\t\tlong result = 0;\n\t\tint MOD = 998244353;\n\t\tint[] dp = new int[n+1];\n\t\tdp[1] = 1;\n\t\tint[] sum = new int[n+1];\n\t\tsum[1] = 1;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t    for(int j = 0; j < k; j++){\n\t\t        int l = i - s[j][1];\n\t\t        int r = i - s[j][0];\n\t\t        if(r < 1) continue;\n\t\t        l = max(1, l);\n\t\t        dp[i] += (sum[r] - sum[l-1] + MOD)%MOD;\n\t\t        dp[i] %= MOD;\n\t\t    }\n\t\t    sum[i] = (sum[i-1] + dp[i])%MOD;\n\t\t}\n\t\t//System.out.println(Arrays.toString(dp));\n\t\tresult = dp[n];\n\t\t\n\t\t// \u51fa\u529b\n\t\tSystem.out.println(result);\n\t\t\n\t}\n\t\n\tpublic static class Scanner {\n\t\tprivate BufferedReader br; private StringTokenizer tok;\n\t\tpublic Scanner(InputStream is) throws IOException { br = new BufferedReader(new InputStreamReader(is));}\n\t\tprivate void getLine() throws IOException { while(!hasNext()) tok = new StringTokenizer(br.readLine());}\n\t\tprivate boolean hasNext() { return tok != null && tok.hasMoreTokens();}\n\t\tpublic String next() throws IOException { getLine(); return tok.nextToken();}\n\t\tpublic int nextInt() throws IOException { return Integer.parseInt(next());}\n\t\tpublic long nextLong() throws IOException { return Long.parseLong(next());}\n\t\tpublic double nextDouble() throws IOException { return Double.parseDouble(next());}\n\t}\n\n}\n",
        "choices": [
            "Compile Error",
            "Time Limit Exceeded",
            "No abnormally found",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "ffe9a7e4-4b84-4185-a498-73e9d479ee79"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n    static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[]$) {\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        int q = scanner.nextInt();\n\n        int[][] a = new int[n][n];\n        for (int i = 0; i < m; i++) {\n            int l = scanner.nextInt() - 1;\n            int r = scanner.nextInt() - 1;\n            for (int j = 0; j <= l; j++) {\n                for (int k = r; k < n; k++) {\n                    a[j][k]++;\n                }\n            }\n        }\n        for (int i = 0; i < q; i++) {\n            System.out.println(a[scanner.nextInt() - 1][scanner.nextInt() - 1]);\n        }\n    }\n}",
        "choices": [
            "Compile Error",
            "No abnormally found",
            "Time Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "0cec6fce-44bd-4cbc-a209-737509440a5b"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N = Integer.parseInt(sc.next());\n\n\t\t// graph list\n\t\tArrayList<ArrayList<Integer>> edge = new ArrayList<ArrayList<Integer>>();\n\t\tfor (int i=0;i<N;i++) {\n\t\t\tArrayList<Integer> add = new ArrayList<Integer>();\n\t\t\tedge.add(add);\n\t\t}\n\n\t\t//graph matrix\n\t\tchar[][] graph = new char[N][N];\n\t\tfor (int i=0;i<N;i++) {\n\t\t\tString S = sc.next();\n\t\t\tfor (int j=0;j<N;j++) {\n\t\t\t\tchar flag = S.charAt(j);\n\t\t\t\tgraph[i][j] = flag;\n\n\t\t\t\t// graph list add\n\t\t\t\tif (flag=='1') {\n\t\t\t\t\tedge.get(i).add(j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint flag = 0;\n\t\tint tmp_depth = 0;\n\n\t\t// loop:for (int j=0;j<N;j++) {\n\t\tint j=0;\n\t\t\tint[] used = new int[N];\n\t\t\tfor (int i=0;i<N;i++) {\n\t\t\t\tused[i] = -1;\n\t\t\t}\n\t\t\tint root = j;\n\t\t\tArrayDeque<int[]> queue = new ArrayDeque<int[]>();\n\t\t\tint[] add = {root, 0};\n\t\t\tqueue.add(add);\n\t\t\twhile (!queue.isEmpty()) {\n\t\t\t\tint[] rem = queue.remove();int index = rem[0];int depth = rem[1];\n\t\t\t\t// System.out.println(\"rem : \" + Arrays.toString(rem));\n\t\t\t\ttmp_depth = Math.max(tmp_depth, depth);\n\t\t\t\tused[index] = depth;\n\t\t\t\tArrayList<Integer> edge_list = edge.get(index);\n\t\t\t\tfor (Integer i : edge_list) {\n\t\t\t\t\tif (used[i]==-1) {\n\t\t\t\t\t\tint[] add_q = {i, depth+1};\n\t\t\t\t\t\tqueue.add(add_q);\n\t\t\t\t\t} else if (used[i]!=depth-1) {\n\t\t\t\t\t\tflag=1;\n\t\t\t\t\t\tbreak loop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t// }\n\t\tif (flag==1) {\n\t\t\tSystem.out.println(-1);\n\t\t} else {\n\t\t\tSystem.out.println(tmp_depth+1);\n\t\t}\n\n\t\t// for (ArrayList<Integer> aaa : edge) {\n\t\t\t// System.out.println(aaa);\n\t\t// }\n\t\t// System.out.println(\"used \" + Arrays.toString(used));\n\t}\n}",
        "choices": [
            "Compile Error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f8046bf0-cce3-4d5c-be1b-023d6ed6ab5b"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 public class FIND_IN_SORTED {\n2     public static int binsearch(int[] arr, int x, int start, int end) {\n3         if (start == end) {\n4             return -1;\n5         }\n6         int mid = start + (end - start) / 2; \n7         if (x < arr[mid]) {\n8             return binsearch(arr, x, start, mid);\n9         } else if (x > arr[mid]) {\n10             return binsearch(arr, x, mid, end);\n11         } else {\n12             return mid;\n13         }\n14     }\n15     public static int find_in_sorted(int[] arr, int x) {\n16         return binsearch(arr, x, 0, arr.length);\n17     }\n18 }",
        "choices": [
            "Modify line 8:\n```return binsearch(arr, x, start, mid - 1);```",
            "Modify line 7:\n```        if (x < arr[mid] || (mid == 0 && arr[mid] > x)) {```",
            "Modify line 9:\n```        } else if (x > arr[mid]) {\n            return binsearch(arr, x, mid + 1, end);\n        }```",
            "Modify line 9:\n```           return binsearch(arr, x, mid+1, end);```\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "91d898e9-b122-4171-99f8-7c2b193583f9"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nclass Main{\n  public static void main(String[] args){\nScanner sc=new Scanner(System.in);\n     long n=sc.nextLong();\n    long a[]=new long[(int)n+1];\n    Arrays.fill(a,1);\n    for(int i=2;i<=n;i++){\nfor(int j=i;j<=n;j+=i){    //O(logN)\na[j]++;\n}\n    }\n    long sum=0;\n    for(int i=1;i<=n;i++){\nsum+=(i*a[i]);\n    }\n    System.out.println(sum);\n  }\n}\n    \n  \n",
        "choices": [
            "No abnormally found",
            "Runtime Error",
            "Time Limit Exceeded",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "0498b3d7-c19f-425b-ba5d-f4aea1d15090"
    },
    {
        "question": "Question: What will be the output of the following Java program?\n    class newthread implements Runnable     {\tThread t1,t2;        newthread()         {            t1 = new Thread(this,\"Thread_1\");            t2 = new Thread(this,\"Thread_2\");            t1.start();            t2.start();\t}\tpublic void run()         {            t2.setPriority(Thread.MAX_PRIORITY);\t\t    System.out.print(t1.equals(t2));        }        }    class multithreaded_programing     {        public static void main(String args[])         {            new newthread();                }    }",
        "choices": [
            "true",
            "false",
            "truetrue",
            "falsefalse"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "c747572c-3120-4dd9-912b-db190a40bf4c"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\n \nclass Main {\n  public static void main(String args[]) {\n    Scanner scanner = new Scanner(System.in);\n    int input = scanner.nextInt();\n    int input2 = scanner.nextInt();\n    int input3 = scanner.nextInt();\n    scanner.close();\n    int a = input + input2;\n    int b = input2 + input3;\n    int c = input3 + input;\n    int alpha = Math.min(a,b);\n    int beta = Math.min(alpha,c);\n    System.out.println(beta);\n  }\n}\n",
        "choices": [
            "Runtime Error",
            "Memory Limit Exceeded",
            "Compile Error",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "44b3a8df-aed4-49a1-994f-c3499c8d0e49"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 public class BUCKETSORT {\n3     public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n4         ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n5         for (Integer x : arr) {\n6             counts.set(x,counts.get(x)+1);\n7         }\n8         ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n9         int i = 0;\n10         for (Integer count : arr) { \n11             sorted_arr.addAll(Collections.nCopies(count, i));\n12             i++;\n13         }\n14         return sorted_arr;\n15     }\n16 }",
        "choices": [
            "Modify line 14:\n```return sorted_arr;```",
            "Modify line 6:\n```    counts.set(x,counts.get(x)+1);```",
            "Modify line 10:\n```for (int j = 0; j < counts.size(); j++) {```",
            "Modify line 9:\n```       for (Integer count : counts) {```\n"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "99f44364-26e0-4a31-b0ee-cb4e79669ade"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tlong d = scan.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tlong x = scan.nextLong();\n\t\t\tlong y = scan.nextLong();\n\t\t\tlong xx;\n\t\t\tlong yy;\n\t\t\txx = (long)Math.pow(x,2);\n\t\t\tyy = (long)Math.pow(y,2);\n\n\t\t\tif(d>=Math.sqrt(xx+yy)) {\n\t\t\t\tcount = count + 1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "38564712-10d2-4d75-aec7-e1587e9a7083"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n/*\n* @Author Silviase(@silviasetitech)\n* For ProCon\n*/\n\nimport java.util.*;\nimport java.lang.*;\nimport java.math.*;\nimport java.awt.*;\n\npublic class Main{\n\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        PriorityQueue<Long> pribig = new PriorityQueue<>(Comparator.naturalOrder());\n        PriorityQueue<Long> prismall = new PriorityQueue<>(Comparator.reverseOrder());\n        long big = 0;\n        long small = 0;\n        long b = 0;\n        long ans;\n        for (int i = 0; i < n; i++) {\n            int tmp = sc.nextInt();\n            if (tmp == 1) {\n                // koushin\n                long a = sc.nextLong();\n                long bb = sc.nextLong();\n                b += bb;\n                if (!prismall.isEnpty() || prismall.peek() >= a) {\n                    // prismall.peek -> pribig, a -> prismall\n                    prismall.add(a);\n                    small+=a;\n                    if (!prismall.isEmpty() && prismall.size() > pribig.size() + 1 ) {\n                        long change = prismall.poll;\n                        pribig.add(change);\n                        small -= change;\n                        big += change;\n                    }\n                }\n            }else if(tmp == 2){\n                // hanbetsu\n                // small = big or small = big + 1\n                if (prismall.size() == pribig.size()){\n                    ans = prismall.peek();\n                    System.out.println(ans + \" \" + (big-small+b));\n                }else{\n                    ans = prismall.peek();\n                    System.out.println(ans + \" \" + (big-small+b-prismall.peek()));\n                }\n            }\n            \n        }\n\n        sc.close();\n    }\n}\n\n\n",
        "choices": [
            "Memory Limit Exceeded",
            "Internal error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "aa487cb4-3b89-457b-ae53-8072cfeb9bd9"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\n// import java.awt.Point;\n \npublic class Main {\n    InputStream is;\n    PrintWriter out;\n    String INPUT = \"\";\n \n    static int mod = 1_000_000_007;\n    // int mod = 998244353;\n    // long inf = Long.MAX_VALUE/2;\n    int inf = Integer.MAX_VALUE/2;\n\n    ArrayList<Integer>[] edge;\n    boolean[] seen;\n    long[] memo;\n    boolean loop;\n    long ans;\n\n    void solve(){\n        String s = ns();\n        String t = ns();\n        int sl = s.length();\n        int tl = t.length();\n        StringBuilder st = new StringBuilder();\n        st.append(t);\n        int times = 1000000;\n        for(int i = 0; i < times; i++){\n            st.append(s);\n        }\n        int[] ret = zalgo(st.toString());\n        edge = new ArrayList[sl];\n        for(int i = 0; i < sl; i++){\n            edge[i] = new ArrayList<>();\n        }\n        int[] inner = new int[sl];\n        int[] outer = new int[sl];\n        for(int i = t.length(); i < st.length(); i++){\n            if(ret[i]<t.length()) continue;\n            int idx = i - t.length();\n            if(idx>=sl) break;\n            edge[idx].add((idx+t.length())%sl);\n            inner[(idx+t.length())%sl]++;\n            outer[idx]++;\n        }\n        memo = new long[sl];\n        long ans = 0;\n        seen = new boolean[sl];\n        for(int i = 0; i < sl; i++){\n            if(inner[i]!=0||outer[i]!=1) continue;\n            long tmp = f(i);\n            ans = Math.max(tmp, ans);\n            if(loop) break;\n        }\n        for(int i = 0; i < sl; i++){\n            if(seen[i]) continue;\n            if(inner[i]==0||outer[i]==0) continue;\n            loop = true;\n            break;\n        }\n        out.println(loop ? -1 : ans);\n    }\n\n    long f(int cur){\n        if(seen[cur]){\n            loop = true;\n            return 0;\n        }\n        seen[cur] = true;\n        long ret = 0;\n        for(int e : edge[cur]){\n            ret = f(e)+1;\n        }\n        return ret;\n    }\n\n    int[] zalgo(String s) {\n\t\tint n = s.length();\n\t\tint[] ret = new int[n];\n\t\tret[0] = n;\n\t\tint i = 1, j = 0;\n\t\twhile (i < n) {\n\t\t\twhile (i + j < n && s.charAt(j) == s.charAt(i + j))\n\t\t\t\t++j;\n\t\t\tret[i] = j;\n\t\t\tif (j == 0) {\n\t\t\t\t++i;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint k = 1;\n\t\t\twhile (i + k < n && k + ret[k] < j) {\n\t\t\t\tret[i + k] = ret[k];\n\t\t\t\t++k;\n\t\t\t}\n\t\t\ti += k;\n\t\t\tj -= k;\n\t\t}\n\t\treturn ret;\n\t}\n    void run() throws Exception\n    {\n        is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n        out = new PrintWriter(System.out);\n        long s = System.currentTimeMillis();\n        solve();\n        out.flush();\n        if(!INPUT.isEmpty())tr(System.currentTimeMillis()-s+\"ms\");\n    }\n    \n    public static void main(String[] args) throws Exception { new Main().run(); }\n    \n    private byte[] inbuf = new byte[1024];\n    private int lenbuf = 0, ptrbuf = 0;\n    \n    private int readByte()\n    {\n        if(lenbuf == -1)throw new InputMismatchException();\n        if(ptrbuf >= lenbuf){\n            ptrbuf = 0;\n            try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }\n            if(lenbuf <= 0)return -1;\n        }\n        return inbuf[ptrbuf++];\n    }\n    \n    private boolean isSpaceChar(int c) { return !(c >= 33 && c <= 126); }\n    private int skip() { int b; while((b = readByte()) != -1 && isSpaceChar(b)); return b; }\n    \n    private double nd() { return Double.parseDouble(ns()); }\n    private char nc() { return (char)skip(); }\n    \n    private String ns()\n    {\n        int b = skip();\n        StringBuilder sb = new StringBuilder();\n        while(!(isSpaceChar(b) && b != ' ')){\n            sb.appendCodePoint(b);\n            b = readByte();\n        }\n        return sb.toString();\n    }\n    \n    private char[] ns(int n)\n    {\n        char[] buf = new char[n];\n        int b = skip(), p = 0;\n        while(p < n && !(isSpaceChar(b))){\n            buf[p++] = (char)b;\n            b = readByte();\n        }\n        return n == p ? buf : Arrays.copyOf(buf, p);\n    }\n    \n    private char[][] nm(int n, int m)\n    {\n        char[][] map = new char[n][];\n        for(int i = 0;i < n;i++)map[i] = ns(m);\n        return map;\n    }\n    \n    private int[] na(int n)\n    {\n        int[] a = new int[n];\n        for(int i = 0;i < n;i++)a[i] = ni();\n        return a;\n    }\n    \n    private int ni()\n    {\n        int num = 0, b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private long nl()\n    {\n        long num = 0;\n        int b;\n        boolean minus = false;\n        while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));\n        if(b == '-'){\n            minus = true;\n            b = readByte();\n        }\n        \n        while(true){\n            if(b >= '0' && b <= '9'){\n                num = num * 10 + (b - '0');\n            }else{\n                return minus ? -num : num;\n            }\n            b = readByte();\n        }\n    }\n    \n    private static void tr(Object... o) { System.out.println(Arrays.deepToString(o)); }\n \n}\n",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Runtime Error",
            "Compile Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "4e770dbc-e073-4a10-8c81-4ee85312bcb0"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        MyScanner sc = new MyScanner();\n\n        long n = sc.nextLong();\n\n        System.out.println(n * (n-1) / 2);\n    }\n\n    static class MyScanner {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in), 1 << 15);\n        StringTokenizer tokenizer;\n\n        String next() {\n            try {\n                while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                }\n            } catch (IOException ignored) {\n            }\n            return tokenizer.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n    }\n}",
        "choices": [
            "Compile Error",
            "No abnormally found",
            "Runtime Error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "df4af356-e425-4f9c-8dc3-7c2b912e5fda"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nclass Main{\n  public static void main(String[] args) throws Exception{\nBufferedReader bf=new BufferedReader(new InputStreamReader(System.in));\n    int n=Integer.parseInt(bf.readLine());\n    int a[]=new int[n];\n    String input=bf.readLine().trim();\n    for(int i=0;i<input.length();i++){\na[i]=input.charAt(i);\n    }\n    int k=Integer.parseInt(bf.readLine());\n    int res=0;\n    for(int i=0;i<k;i++){\nint c=Integer.parseInt(bf.readLine());\n      int rep=Integer.parseInt(bf.readLine());\n      help(a,c,rep);\n      for(int j=0;j<a.length;j++){\nres+=a[j];\n      \n    }\n      System.out.println(res);\n      res=0;\n  }\n  }\n    \n static void help(int arr[],int prev,int fill){\n\t\tfor(int i=0;i<arr.length;i++){\nif(arr[i]==prev){\narr[i]=fill;\n}\n        }\n }\n}\n",
        "choices": [
            "Time Limit Exceeded",
            "Runtime Error",
            "Internal error",
            "No abnormally found"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "bd5edf08-7d24-421d-9859-8b238438f50a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class BBQ_Easy {\n\npublic static void main(String[] args) {\nScanner sc = new Scanner(System.in);\nint n = sc.nextInt();\nint[] arr = new int[2 * n];\nfor (int i = 0; i < arr.length; i++) {\narr[i] = sc.nextInt();\n}\nsc.close();\nArrays.sort(arr);\nint sum = 0;\nfor (int i = 0; i < arr.length; i += 2) {\nsum += arr[i];\n}\nSystem.out.println(sum);\n\n\n}\n\n}",
        "choices": [
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Compile Error",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f5f13467-9a03-4ed0-927e-0bfe4996f4c3"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: We are playing the Guessing Game. The game will work as follows: Given a particular\u00a0n, return\u00a0the minimum amount of money you need to\u00a0guarantee a win regardless of what number I pick.\n\nIncomplete Solution:\nclass Solution:\n  def getMoneyAmount(self, n: int) -> int:\n    dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n    for d in range(1, n + 1):\n      for i in range(1, n - d + 1):\n        j = i + d\n        dp[i][j] = math.inf\n        for k in range(i, j + 1):\n          _______________\n          dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)\n\n    return dp[1][n]",
        "choices": [
            "          dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k][j]) + k)",
            "          dp[i][j] = min(dp[i][j], max(dp[i][k], dp[k][j]) + k)",
            "          dp[i][j] = min(dp[i][j], max(dp[i][k], dp[k + 1][j]) + k)",
            "          dp[i][j] = min(dp[i][j], max(dp[i][k - 1], dp[k + 1][j]) + k)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "a3ee141c-0a74-4fbc-af7f-cc26cc57ae8b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr: Given the integer n, return the last number that remains in arr.\n\nIncomplete Solution:\nclass Solution:\n  def lastRemaining(self, n: int) -> int:\n    _______________\n    return 1 if n == 1 else 2 * (1 + n // 2 - self.lastRemaining(n // 2))",
        "choices": [
            "    return 1 if n == 1 else 2 * (1 + n // 2 - self.lastRemaining(n // 2))",
            "    return 1 if n == 1 else 2 * (n // 2 - self.lastRemaining(n // 2) + 1)",
            "    return 1 if n <= 1 else 2 * (1 + n // 2 - self.lastRemaining(n // 2))",
            "    return n if n == 1 else 2 * (1 + n // 2 - self.lastRemaining(n // 2))"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "7dc9ea30-0cd3-49bb-8c67-54b833eca91e"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given two positive integers n and x. Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx. Since the result can be very large, return it modulo 10**9 + 7. For example, if n = 160 and x = 3, one way to express n is n = 2**3 + 3**3 + 5**3.\n\nIncomplete Solution:\nclass Solution:\n  def numberOfWays(self, n: int, x: int) -> int:\n    kMod = 1_000_000_007\n    _______________\n    dp = [1] + [0] * n\n\n    for a in range(1, n + 1):\n      ax = a**x\n      if ax > n:\n        break\n      for i in range(n, ax - 1, -1):\n        dp[i] += dp[i - ax]\n        dp[i] %= kMod\n\n    return dp[n]",
        "choices": [
            "    dp = [1]; dp.extend([0]*n)",
            "    dp = [1] + [0] * n",
            "    dp = [1] + [0]*(n)",
            "    dp = [1] * (n + 1)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "824c92fd-5d95-4637-bd78-8b61c59204a6"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed integer array nums. A subarray s of length m is called alternating if: Return the maximum length of all alternating subarrays present in nums or -1 if no such subarray exists. A subarray is a contiguous non-empty sequence of elements within an array.\n\nIncomplete Solution:\nclass Solution:\n  def alternatingSubarray(self, nums: List[int]) -> int:\n    ans = 1\n    dp = 1\n\n    for i in range(1, len(nums)):\n      _______________\n      targetDiff = -1 if dp % 2 == 0 else 1\n      if nums[i] - nums[i - 1] == targetDiff:\n        dp += 1\n      elif nums[i] - nums[i - 1] == 1:\n        dp = 2\n      else:\n        dp = 1\n      ans = max(ans, dp)\n\n    return -1 if ans == 1 else ans",
        "choices": [
            "      targetDiff = -1 if dp % 2 == 0 else 1",
            "      targetDiff = 1 - (dp % 2) * 2",
            "      targetDiff = 1 if dp % 2 != 0 else -1",
            "      targetDiff = -1 if (dp // 2) * 2 == dp else 1"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "eb4c693a-6e99-4810-a80e-1b7881370af6"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom functools import lru_cache\nimport sys\nMOD = 998244353\n\n\n@lru_cache(maxsize=None)\ndef pow_mod(i):\n    # pow(2, i - 1, MOD)\n    if i == 1:\n        return 1\n    else:\n        return pow_mod(i - 1) * 2 % MOD\n\n\ndef main():\n    input = sys.stdin.buffer.readline\n    n, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[None] * (s + 1) for _ in range(n + 1)]\n#     dp[i][j]:=\u96c6\u5408{1..i}\u306e\u7a7a\u3067\u306a\u3044\u90e8\u5206\u96c6\u5408T\u5168\u3066\u306b\u3064\u3044\u3066,\u548c\u304cj\u3068\u306a\u308b\u90e8\u5206\u96c6\u5408\u306e\u500b\u6570\u306e\u548c\n    for i in range(n + 1):\n        for j in range(s + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n                continue\n            if j > a[i - 1]:\n                dp[i][j] = dp[i - 1][j] * 2 + dp[i - 1][j - a[i - 1]]\n            elif j == a[i - 1]:\n                dp[i][j] = dp[i - 1][j] * 2 + pow_mod(i)\n            else:\n                dp[i][j] = dp[i - 1][j] * 2\n            dp[i][j] %= MOD\n    print(dp[n][s])\n\n\nif __name__ == '__main__':\n    main()\n",
        "choices": [
            "Internal error",
            "Memory Limit Exceeded",
            "Compile Error",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "4f421bcb-eecb-470d-be15-c7240f78319c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed integer array nums and an integer k. You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive. You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array. Return the maximum score you can get.\n\nIncomplete Solution:\nclass Solution:\n  def maxResult(self, nums: List[int], k: int) -> int:\n    maxQ = collections.deque([0])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n\n    for i in range(1, len(nums)):\n      if maxQ[0] + k < i:\n        maxQ.popleft()\n      dp[i] = dp[maxQ[0]] + nums[i]\n      _______________\n      while maxQ and dp[maxQ[-1]] <= dp[i]:\n        maxQ.pop()\n      maxQ.append(i)\n\n    return dp[-1]",
        "choices": [
            "      while maxQ and dp[maxQ[-1]] >= dp[i]:",
            "      while maxQ and dp[maxQ[-1]] <= dp[i]:",
            "      while maxQ and dp[maxQ[-1]] < dp[i]:",
            "      while maxQ and dp[maxQ[-1]] == dp[i]:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "ac1fc4e0-d91f-4b1d-b474-7a482b9f7a9d"
    },
    {
        "question": "Question: Which of the following architecture is/are not suitable for realising SIMD?",
        "choices": [
            "Vector processor",
            "Array processor",
            "Von Neumann",
            "All of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "4045df96-afd5-4b68-a80a-f60f8a8996af"
    },
    {
        "question": "Question: Which of the following is not true in case of Oblique Projections?",
        "choices": [
            "Parallel projection rays are not perpendicular to the viewing plane.",
            "Parallel lines in space appear parallel on the final projected image.",
            "Used exclusively for pictorial purposes rather than formal working drawings.",
            "Projectors are always perpendicular to the plane of projection."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "22daf02b-9aef-4ef0-8ed3-750d6869e65f"
    },
    {
        "question": "Question: The contents of Register (BL) and Register (AL) of 8085 microprocessor are 49H and 3AH respectively. The contents of AL, the status of carry flag (CF) and sign flag (SF) after executing \u2018SUB AL, BL\u2019 assembly language instruction, are",
        "choices": [
            "AL = 0FH; CF = 1; SF = 1",
            "AL = F0H; CF = 0; SF = 0",
            "AL = F1H; CF = 1; SF = 1",
            "AL = 1FH; CF = 1; SF = 1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "10170204-5c7e-4916-8c67-52b43ea7def5"
    },
    {
        "question": "Question: Comparing the time T1 taken for a single instruction on a pipelined CPU with time T2 taken on a non\u00ad pipelined but identical CPU, we can say that",
        "choices": [
            "T1 <= T2",
            "T1 >= T2",
            "T1 < T2",
            "T1 is T2 plus the time taken for one instruction fetch cycle"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "fb88a9b4-61a2-405f-b190-90471ce0977e"
    },
    {
        "question": "Question: Horizontal microprogramming :",
        "choices": [
            "does not require use of signal decoders",
            "results in larger sized microinstructions than vertical microprogramming",
            "uses one bit for each control signal",
            "all of the above."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "d6e9542f-5d6b-49c0-8a11-9b248bdaa234"
    },
    {
        "question": "Question: Which of the following addressing mode is best suited to access elements of an array of contiguous memory locations ?",
        "choices": [
            "Indexed addressing mode",
            "Base Register addressing mode",
            "Relative address mode",
            "Displacement mode"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "6f269667-e867-416f-a9b5-968e56a4dcc7"
    },
    {
        "question": "Question: Consider the following program segment. Here R1, R2 and R3 are the general purpose registers.\r\r\r\rAssume that the content of memory location 3000 is 10 and the content of the register R3 is 2000. The content of each of the memory locations from 2000 to 2010 is 100. The program is loaded from the memory location 1000. All the numbers are in decimal. Assume that the memory is word addressable. The number of memory references for accessing the data in executing the program completely is:",
        "choices": [
            "10",
            "11",
            "20",
            "21"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "9e5274b3-0569-435a-aa3c-55253c7cf32f"
    },
    {
        "question": "Question: A request\u2019s response can be optimized using \u2013",
        "choices": [
            "Different cache layers",
            "Large memory",
            "Big operating system",
            "None of the above"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "ede4a568-3ba9-4f59-9ea5-4e6f11ad5e50"
    },
    {
        "question": "Question: If any entry is made to DNS , it will get expired after a certain time known as-",
        "choices": [
            "Time to operate",
            "Time to live",
            "Time to process",
            "None of the above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "fd4bb8c1-87e0-473b-8d45-f96ad84c2676"
    },
    {
        "question": "Question: What is/are the advantages of system flowcharts?",
        "choices": [
            "Effective communication",
            "Effective analysis",
            "Queasier group of relationships",
            "All of the above"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Design Principles",
        "task_id": "00c47e70-b221-42c0-8b2f-a9175f59d2f8"
    },
    {
        "question": "Question: Data stored in a data flow diagram represents",
        "choices": [
            "a disk store",
            "a sequential file",
            "a random access memory",
            "a repository of data"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Design Principles",
        "task_id": "0f1fb161-7a4c-4e45-8d20-e07ac77b06ab"
    },
    {
        "question": "Question: How does \"Stress Testing\" contribute to software quality assurance?",
        "choices": [
            "By optimizing code for better performance",
            "By assessing the software's behavior under varying workloads",
            "By focusing solely on manual testing",
            "By ignoring potential risks in the software"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Testing",
        "task_id": "37c431b2-e14e-4981-ba32-3539530f76f4"
    },
    {
        "question": "Question: What role does \"Agile Testing\" play in agile software development methodologies?",
        "choices": [
            "By focusing solely on manual testing",
            "By automating only the testing process",
            "By integrating testing seamlessly into the agile development process",
            "By delaying testing until the end of the development process"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Testing",
        "task_id": "3746c842-3e7f-4a03-95af-0ad23a550ae3"
    },
    {
        "question": "Question: The minimum number of arithmetic operations required to evaluate the polynomial P(X) = X5 + 4X3 + 6X + 5 for a given value of X using only one temporary variable.",
        "choices": [
            "6",
            "7",
            "8",
            "9"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "0e23e616-6f4d-4a75-a169-da368a93447d"
    },
    {
        "question": "Question: Match the following and choose the correct answer for the order A, B, C, D\r\r\r  A. Strassen matrix multiplication p. Decrease and Conquer   B. Insertion sort q. Dynamic Programming   C. Guassian Elimination r. Divide and Conquer   D. Floyd shortest path algorithm s. Transform and Conquer",
        "choices": [
            "r, s, p, q",
            "r, p, s, q",
            "q, s, p, r",
            "s, p, q, r"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "7ab24662-ddce-46f0-a03c-4ffc8b940b07"
    },
    {
        "question": "Question: Given A, an array of size n, comprised of an increasing sequence of numbers followed immediately by a decreasing one. What is worst case time complexity of optimal algorithm to determine if a given number x is in the array?",
        "choices": [
            "\u0398(log n)",
            "\u0398(n)",
            "\u0398(n^2)",
            "\u0398(log n)^2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "3727086a-8902-4ded-88f0-e464df96c465"
    },
    {
        "question": "Question: Who coined the term \"Backtracking\"?",
        "choices": [
            "Lehmer",
            "Donald",
            "Ross",
            "Ford"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "fa32ece7-4f50-48e2-b577-06bdca557a24"
    },
    {
        "question": "Question: Consider the following pseudo code, where x and y are positive integers. \r\nbegin\r\n   q := 0\r\n   r := x\r\nwhile r >= y do\r\n   begin\r\n      r := r \u2013 y\r\n      q := q + 1\r\n   end\r\nend \n\rThe post condition that needs to be satisfied after the program terminates is",
        "choices": [
            "{r = qx + y \u2227 r < y}",
            "{x = qy + r \u2227 r < y}",
            "{y = qx +  r \u2227 0 < r < y}",
            "{ q + 1 < r\u2013y \u2227 y > 0}"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "5c29e8ce-8635-49ae-80e6-f3d6bfde2cb0"
    },
    {
        "question": "Question: Which of the following statement is true about Red-Black Tree?P1: Each Leaf Node and the root node of the Red-Black tree is Black.P2: \u00a0The children of a Red node is Black.P3: The children of a Black Node is Black.P4: Two adjacent nodes can be Red.",
        "choices": [
            "P1 & P4",
            "P2 & P3",
            "P1 & P3",
            "P1 & P2"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Structures",
        "task_id": "2269a5d3-56e2-4287-9433-59bb6f35555c"
    },
    {
        "question": "Question: How much time a heap will take to Find Min/Max value?",
        "choices": [
            "O(logN)",
            "O(N)",
            "O(1)",
            "None"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Structures",
        "task_id": "252b7e63-b60d-4f20-b254-c9e6174ac7b2"
    },
    {
        "question": "Question: Assume that a mergesort algorithm in the worst case takes 30 seconds for an input of size 64. Which of the following most closely approximates the maximum input size of a problem that can be solved in 6 minutes?",
        "choices": [
            "256",
            "512",
            "1024",
            "2048"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "833a5934-cf8c-4adb-82ed-f78f2238db6f"
    },
    {
        "question": "Question: Which one of the following property is correct for a red-black tree?",
        "choices": [
            "Every simple path from a node to a descendant leaf contains the same number of black nodes",
            "If a node is red, then one children is red and another is black",
            "If a node is red, then both its children are red",
            "Every leaf node (sentinel node) is red"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "95ed123f-cdd0-4a0b-8177-c09f84a5583e"
    },
    {
        "question": "Question: Predict the output of the given pseudo code if the value of the number is 6:\u00a0Read number\u00a0k = 2\u00a0i = 2\u00a0while i <= number:\u00a0 \u00a0 k = k * i\u00a0\u00a0 \u00a0 i = i +1\u00a0end while\u00a0write k",
        "choices": [
            "1440.0",
            "1340.0",
            "1700.0",
            "1560.0"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "c26ab0c0-30b8-4bc8-9ddf-b033819969c2"
    },
    {
        "question": "Question: Suppose we have an O(n) time algorithm that finds the median of an unsorted array. Now consider a QuickSort implementation where we first find the median using the above algorithm, then use the median as a pivot. What will be the worst-case time complexity of this modified QuickSort?",
        "choices": [
            "O(n^2 Logn)",
            "O(n^2)",
            "O(n Logn Logn)",
            "O(nLogn)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "88c5eece-23eb-4b1f-98f6-cf2c6b664472"
    },
    {
        "question": "Question: Suppose a polynomial time algorithm is discovered that correctly computes the largest clique in a given graph. In this scenario, which one of the following represents the correct Venn diagram of the complexity classes P, NP and NP Complete (NPC)?",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "d544e575-9dba-488c-9974-292f2cd4fc9a"
    },
    {
        "question": "Question: How many comparisons are needed to sort an array of length 5 if a straight selection sort is used and array is already in the opposite order?",
        "choices": [
            "1",
            "5",
            "10",
            "20"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "234b9223-54c2-4c1d-a48f-bd8a9f5f22a5"
    },
    {
        "question": "Question: Consider the following sequence of operations on an empty stack.Push(54);push(52);pop();push(55);push(62);s=pop(); \nConsider the following sequence of operations on an empty queue.enqueue(21);enqueue(24);dequeue();enqueue(28);enqueue(32);q=dequeue(); \nThe value of s+q is ___________.",
        "choices": [
            "86",
            "68",
            "24",
            "94"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "ba6be739-580c-42b4-a46d-4145fa1c1174"
    },
    {
        "question": "Question: Which of the following is true about merge sort?",
        "choices": [
            "Merge Sort works better than quick sort if data is accessed from slow sequential memory.",
            "Merge Sort is stable sort by nature",
            "Merge sort outperforms heap sort in most of the practical situations.",
            "All of the above."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "f672aba4-d8c9-4dd8-9ddf-2782f7c6beaf"
    },
    {
        "question": "Question: Match the following:List - IList - II(a) Sequential Search(i) Dynamic programming principle(b)Branch - and - bound(ii) repeatedly double index(c) Exponential Search(iii) O(LogN)(d) Binary Search(iv)O(N)\ncodes:\u00a0(a)(b)(c)(d)(1)(i)(iv)(iii)(ii)(2)(iv)(i)(ii)(iii)(3)(i)(iv)(ii)(iii)(4)(iv)(ii)(i)(iii)",
        "choices": [
            "(1)",
            "(2)",
            "(3)",
            "(4)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "85ace0dc-79c1-4d18-8881-7fd3813e81f8"
    },
    {
        "question": "Question: Consider the below program. What is the expected output?\u00a0\n\n\nvoid fun(int arr[], int start, int end)\n{\n    while (start < end) {\n        int temp = arr[start];\n        arr[start] = arr[end];\n        arr[end] = temp;\n        start++;\n        end--;\n    }\n}\n\n``````C++",
        "choices": [
            "swapping the elements pairwise",
            "sorting the elements",
            "Reverse an array",
            "None"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "dc24b48b-1638-44c8-a72f-e27890b8d424"
    },
    {
        "question": "Question: What is common in three different types of traversals (Inorder, Preorder and Postorder)?",
        "choices": [
            "Root is visited before right subtree",
            "Left subtree is always visited before right subtree",
            "Root is visited after left subtree",
            "All of the above",
            "None of the above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3,
            4
        ],
        "label": "Algorithms",
        "task_id": "f04cb55e-6489-4a6f-9e65-696d792b7e8e"
    },
    {
        "question": "Question: Consider a segment tree built on an array of N elements. What is the time complexity of updating a range of elements in the segment tree?",
        "choices": [
            "O(log N)",
            "O(N)",
            "O(log N + K), where K is the number of elements in the range",
            "O(N log N)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "826396ac-2c7d-46c1-b317-adfdc8272c27"
    },
    {
        "question": "Question: Predict how many times the value of res will be displayed.Set Integer res = 0\u00a0do\u00a0 \u00a0 ++res\u00a0 \u00a0 display reswhile(res <= 5)End do-while",
        "choices": [
            "The program will not enter the loop.",
            "Code will run infinite number of times.",
            "Code will execute and the value of res will be displayed six times.",
            "Code will execute and the value of res will be displayed five times."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "616fb0fd-7b5c-444a-9c27-a81567678929"
    },
    {
        "question": "Question: In delete operation of BST, we need inorder successor (or predecessor) of a node when the node to be deleted has both left and right child as non-empty. Which of the following is true about inorder successor needed in delete operation?",
        "choices": [
            "Inorder Successor is always a leaf node",
            "Inorder successor is always either a leaf node or a node with empty left child",
            "Inorder successor may be an ancestor of the node",
            "Inorder successor is always either a leaf node or a node with empty right child"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "8190c34a-c10c-4b97-8c40-042fbe832c5e"
    },
    {
        "question": "Question: An array A consists of n integers in locations A[0], A[1] ....A[n-1]. It is required to shift the elements of the array cyclically to the left by k places, where 1 <= k <= (n-1). An incomplete algorithm for doing this in linear time, without using another array is given below. Complete the algorithm by filling in the blanks. Assume alt the variables are suitably declared.\n\n\nmin = n; i = 0;\n\nwhile (___________) {\t\n\n     temp = A[i]; j = i;\n\n     while (________) {\n\n     A[j] = ________\t\n\n     j= (j + k) mod n ;\n\n     If ( j< min ) then\n\n         min = j;\n\n}\n\nA[(n + i \u2014 k) mod n] = _________\n\ni = __________\n\n``````C++",
        "choices": [
            "i > min; j!= (n+i)mod n; A[j + k]; temp; i + 1 ;",
            "i < min; j!= (n+i)mod n; A[j + k]; temp; i + 1;",
            "i > min; j!= (n+i+k)mod n; A[(j + k)]; temp; i + 1;",
            "i < min; j!= (n+i-k)mod n; A[(j + k)mod n]; temp; i + 1;"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "77bcd7c1-d4ef-48ac-9dbc-84e1aa490b13"
    },
    {
        "question": "Question: What is the time complexity of searching for an element in a doubly linked list?",
        "choices": [
            "O(1)",
            "O(n)",
            "O(log n)",
            "O(n^2)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "98aab5f2-4912-4790-83a4-58c3ceb41950"
    },
    {
        "question": "Question: Assume the following information:\rOriginal timestamp value = 46\rReceive timestamp value = 59\rTransmit timestamp value = 60\rTimestamp at arrival of packet = 69\rWhich of the following statements is correct?",
        "choices": [
            "Receive clock should go back by 3 milliseconds",
            "Transmit and Receive clocks are synchronized",
            "Transmit clock should go back by 3 milliseconds",
            "Receive clock should go ahead by 1 milliseconds"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "7e0d5ca4-a1a8-4bad-bfb9-ee9c85eb76c1"
    },
    {
        "question": "Question: What does the SQL operator \"NOT\" do?",
        "choices": [
            "Negates a condition",
            "Checks if a value is NULL",
            "Performs pattern matching on a string value",
            "Compares two values for equality"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "59a68140-76ea-4f96-bec1-4156cb26fc62"
    },
    {
        "question": "Question: A FAT (file allocation table) based file system is being used and the total overhead of each entry in the FAT is 4 bytes in size. Given a 100 x 106 bytes disk on which the file system is stored and data block size is 103 bytes, the maximum size of a file that can be stored on this disk in units of 106 bytes is ____________.",
        "choices": [
            "99.55 to 99.65",
            "100.5 to 101.4",
            "97.2 to 98.5",
            "89.1 to 91.2"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "a2bc6e89-f270-4779-8ded-fd915210b78b"
    },
    {
        "question": "Question: Consider a schema R(A, B, C, D) and following functional dependencies.\rA \u2192 B\r\nB \u2192 C\r\nC \u2192 D\r\nD \u2192 B\r\nThen decomposition of R into R1 (A, B), R2(B, C) and R3(B, D) is __________ .",
        "choices": [
            "Dependency preserving and lossless join.",
            "Lossless join but not dependency preserving.",
            "Dependency preserving but not lossless join.",
            "Not dependency preserving and not lossless join."
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "ac00f1ff-2cfe-4c2f-aee6-16ca719432b5"
    },
    {
        "question": "Question: Which of the following concurrency control protocols ensure both conflict serializability and freedom from deadlock? I. 2-phase locking II. Time-stamp ordering",
        "choices": [
            "I only",
            "II only",
            "Both I and II",
            "Neither I nor II"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "957a499b-d518-432c-bf9e-3bb9779da270"
    },
    {
        "question": "Question: What is the purpose of a savepoint in SQL transactions?",
        "choices": [
            "To rollback the entire transaction",
            "To mark a point within a transaction to which you can later roll back",
            "To commit the changes made by a transaction",
            "To finalize the changes made by a transaction"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "bd9ffa14-9150-4226-ab66-157aac33de07"
    },
    {
        "question": "Question: Consider the relation R (ABCDE):\rFD = { A \u2192 B, B \u2192 C, C \u2192 D, D \u2192 E}\rFind out the highest normal form.",
        "choices": [
            "1 NF",
            "2 NF",
            "3 NF",
            "BCNF"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "40fdbc35-764e-4536-9411-162b04871cde"
    },
    {
        "question": "Question: Which SQL constraint is used to ensure that a column only contains values from a specified set?",
        "choices": [
            "PRIMARY KEY",
            "UNIQUE",
            "CHECK",
            "FOREIGN KEY"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "7264c00f-d206-4810-9cc4-6cc6d56d0e0c"
    },
    {
        "question": "Question: Which RAID level gives block level striping with double distributed parity?",
        "choices": [
            "RAID 10",
            "RAID 2",
            "RAID 6",
            "RAID 5"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "5425ef7c-dffe-4d11-b6d3-e3280b5c0c30"
    },
    {
        "question": "Question: match the following datbase terms to their function:",
        "choices": [
            "(1)",
            "(2)",
            "(3)",
            "(4)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "f49b3c5f-e238-4557-969e-f52ef8f74774"
    },
    {
        "question": "Question: Table A\r\nId   Name    Age\r\n----------------\r\n12   Arun    60\r\n15   Shreya  24\r\n99   Rohit   11\r\n\r\n\r\nTable B\r\nId   Name   Age\r\n----------------\r\n15   Shreya  24\r\n25   Hari    40\r\n98   Rohit   20\r\n99   Rohit   11\r\n\r\n\r\nTable C\r\nId   Phone  Area\r\n-----------------\r\n10   2200   02  \r\n99   2100   01\n\r\rConsider the above tables A, B and C. How many tuples does the result of the following SQL query contains?\r\r\nSELECT A.id \r\nFROM   A \r\nWHERE  A.age > ALL (SELECT B.age \r\n                    FROM   B \r\n                    WHERE  B. name = \"arun\")",
        "choices": [
            "4",
            "3",
            "0",
            "1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "16d4bee0-7ff4-42a6-87eb-6886fc61fc42"
    },
    {
        "question": "Question: In a B+ tree, if the search-key value is 12 bytes long, the block size is 1024 bytes and the block pointer is 6 bytes, then the maximum number of keys that can be accommodated in each non-leaf node of the tree is _____ .",
        "choices": [
            "57",
            "54",
            "58",
            "56"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "f8bfb2b4-e5b3-4cbe-8398-e3345980de36"
    },
    {
        "question": "Question: Which of the following is correct?",
        "choices": [
            "B-trees are for storing data on disk and B+ trees are for main memory.",
            "Range queries are faster on B+ trees.",
            "B-trees are for primary indexes and B+ trees are for secondary indexes.",
            "The height of a B+ tree is independent of the number of records."
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "0576d951-b91b-42b2-86a9-8fe3e306e3eb"
    },
    {
        "question": "Question: Consider the following relational schemes for a library database:\rBook (Title, Author, Catalog_no, Publisher, Year, Price)\rCollection (Title, Author, Catalog_no)\r\rwith in the following functional dependencies: \r\nI. Title Author --> Catalog_no\r\nII. Catalog_no --> Title, Author, Publisher, Year\r\nIII. Publisher Title Year --> Price \r\n\r\nAssume {Author, Title} is the key for both schemes. Which of the following statements is true?",
        "choices": [
            "Both Book and Collection are in BCNF",
            "Both Book and Collection are in 3NF only",
            "Book is in 2NF and Collection is in 3NF",
            "Both Book and Collection are in 2NF only"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "3aa8e9fc-24f8-40a8-b66e-daf297fc292d"
    },
    {
        "question": "Question: Database table by name Loan_Records is given below.\rBorrower    Bank_Manager   Loan_Amount\r\n Ramesh      Sunderajan     10000.00\r\n Suresh      Ramgopal       5000.00\r\n Mahesh      Sunderajan     7000.00\r\nWhat is the output of the following SQL query?\r\nSELECT Count(*) \r\nFROM  ( ( SELECT Borrower, Bank_Manager \r\n          FROM Loan_Records) AS S \r\n          NATURAL JOIN ( SELECT Bank_Manager, Loan_Amount \r\n                         FROM Loan_Records) AS T );",
        "choices": [
            "3",
            "9",
            "5",
            "6"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "1858dd12-c37f-4642-b908-9a95775e4e84"
    },
    {
        "question": "Question: The relation book (title, price) contains the titles and prices of different books. Assuming that no two books have the same price, what does the following SQL query list?\r\r\n  select title\r\n  from book as B\r\n  where (select count(*)\r\n     from book as T\r\n     where T.price > B.price) < 5",
        "choices": [
            "Titles of the four most expensive books",
            "Title of the fifth most inexpensive book",
            "Title of the fifth most expensive bookTitles of the five most expensive books",
            "Titles of the five most expensive books"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "bbfc9eb6-e019-4154-9f4e-e8329d122630"
    },
    {
        "question": "Question: Consider the following relation  \r\n  Cinema (theater, address, capacity)  \r\nWhich of the following options will be needed at the end of the SQL query \r\nSELECT P1. address\r\nFROM Cinema P1 \r\nSuch that it always finds the addresses of theaters with maximum capacity?",
        "choices": [
            "WHERE P1. Capacity> = All (select P2. Capacity from Cinema P2)",
            "WHERE P1. Capacity> = Any (select P2. Capacity from Cinema P2)",
            "WHERE P1. Capacity > All (select max(P2. Capacity) from Cinema P2)",
            "WHERE P1. Capacity > Any (select max (P2. Capacity) from Cinema P2)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "1aaaa80e-2348-4a5c-893d-8b98eeeae811"
    },
    {
        "question": "Question: Given a block can hold either 3 records or 10 key pointers. A database contains n records, then how many blocks do we need to hold the data file and the dense index",
        "choices": [
            "13n/30",
            "n/3",
            "n/10",
            "n/30"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "739fbcfb-32bf-40d3-a6b8-04a6c446e606"
    },
    {
        "question": "Question: Consider the relation Student (name, sex, marks), where the primary key is shown underlined, pertaining to students in a class that has at least one boy and one girl. What does the following relational algebra expression produce? (Note: r is the rename operator).\r\r\rThe condition in join is \"(sex = female ^ x = male ^ marks \u2264 m)\"",
        "choices": [
            "names of girl students with the highest marks",
            "names of girl students with more marks than some boy student",
            "names of girl students with marks not less than some boy students4)",
            "names of girl students with more marks than all the boy students"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "b7420424-bee5-4701-8093-b907635130f6"
    },
    {
        "question": "Question: What is the purpose of the WHERE clause in SQL?",
        "choices": [
            "To specify which columns to select",
            "To specify which table to select from",
            "To filter rows based on a specified condition",
            "To order the results"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "3965d3be-4393-4a43-b183-f5ff5660b57d"
    },
    {
        "question": "Question: BCNF is not used for cases where a relation has",
        "choices": [
            "Two (or more) candidate keys",
            "Two candidate keys and composite",
            "The candidate key overlap",
            "Two mutually exclusive foreign keys"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "7cf7eded-269c-4d9f-a266-59cc074a138e"
    },
    {
        "question": "Question: Consider the following relation schema pertaining to a students database: \r\nStudent (rollno, name, address)\r\nEnroll (rollno, courseno, coursename)\r\nwhere the primary keys are shown underlined. The number of tuples in the Student and Enroll tables are 120 and 8 respectively. What are the maximum and minimum number of tuples that can be present in (Student * Enroll), where \\'*\\' denotes natural join ?",
        "choices": [
            "8, 8",
            "120, 8",
            "960, 8",
            "960, 120"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "8b9fd9c1-97e2-488d-b818-0e57bb6ab850"
    },
    {
        "question": "Question: Consider a schema R(A,B,C,D) and functional dependencies A->B and C->D.\r\rThen the decomposition of R into R1(AB) and R2(CD) is",
        "choices": [
            "dependency preserving and lossless join",
            "lossless join but not dependency preserving",
            "dependency preserving but not lossless join",
            "not dependency preserving and not lossless join"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "e068a213-08f4-4d35-8d4c-50ebca1b47b3"
    },
    {
        "question": "Question: Given relations R(w,x) and S(y,z), the result of\r\r\nSELECT DISTINCT w, x\r\nFROM R, S\r\n\r\nIs guaranteed to be same as R, if",
        "choices": [
            "R has no duplicates and S is non-empty",
            "R and S have no duplicates",
            "S has no duplicates and R is non-empty",
            "R and S have the same number of tuples"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "f0fc9bc1-e99f-47bc-8087-34974f3e753a"
    },
    {
        "question": "Question: Consider the schema Sailors(sid, sname, rating, age) with the following datasidsnameratingage22Dustin74529Borg13331Pathy85532Robert82558Raghu101764Herald73571Vishnu101674King93585Archer32684Bob36496Flinch317\nFor the querySELECT S.rating, AVG(S.age) AS avgage FROM Sailors S\nWhere S.age >= 18\nGROUP BY S.rating\nHAVING 1 < (SELECT COUNT(*) FROM Sailors S2 where S.rating = S2.rating)\nThe number of rows returned is",
        "choices": [
            "6",
            "5",
            "4",
            "3"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "93881a2b-d11c-496b-a80e-ca68d8779401"
    },
    {
        "question": "Question: Consider the following statements S1 and S2 about the relational data model:\r S1: A relation scheme can have at most one foreign key.\r S2: A foreign key in a relation scheme R cannot be used to refer to tuples of R.\r \rWhich one of the following choices is correct?",
        "choices": [
            "Both S1 and S2 are true",
            "S1 is true and S2 is false",
            "S1 is false and S2 is true",
            "Both S1 and S2 are false"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "634d1c0e-3984-41bf-8e97-48986eab7aa9"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>  \nusing namespace std;\nclass A{\npublic:\n\tint a;\n\tA(){\n\t\tcout<<\"Constructor called\";\n\t}\n} a;\nint main(int argc, char const *argv[])\n{\n\treturn 0;\n}",
        "choices": [
            "Constructor called",
            "Nothing printed",
            "Error",
            "Segmentation fault"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C++ Programming",
        "task_id": "112438dd-ae63-494a-8675-02ed74ba12d7"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    using namespace std;    class BaseClass     {        protected:        int i;        public:        BaseClass(int x)         {            i = x;        }        ~BaseClass()         {        }    };    class DerivedClass: public BaseClass     {        int j;        public:        DerivedClass(int x, int y): BaseClass(y)        {            j = x;        }        ~DerivedClass()         {        }        void show()         {            cout << i << \" \" << j << endl;        }    };    int main()    {        DerivedClass ob(3, 4);        ob.show();        return 0;    }",
        "choices": [
            "3 4",
            "4 3",
            "4",
            "3"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C++ Programming",
        "task_id": "878558ac-934e-4bfe-ac07-37ed94847d9f"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    #include <string>    #include <algorithm>    using namespace std;    int main()     {        string s = \"spaces in text\";        s.erase(remove(s.begin(), s.end(), ' ' ), s.end() ) ;        cout << s << endl;    }",
        "choices": [
            "spaces",
            "spaces in",
            "spaces in text",
            "spacesintext"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C++ Programming",
        "task_id": "482344ba-c4f7-4186-b8ea-80ff7bf2f9fd"
    },
    {
        "question": "Question: What will be the output of the following code?\nclose all;\nfor x = 1.5 : .5 : 2;\ny=3; \nx=y+3\n clc\nend",
        "choices": [
            "No value will be stored",
            "The result will be printed",
            "The result will be printed twice but no value will remain in the Workspace",
            "The loop will not run"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Matlab",
        "task_id": "d8841667-0349-4f08-98ca-56a9b0248cd4"
    },
    {
        "question": "Question: What is the output of the following command?\nfunction wish= ful(p,varargin)\ncelldisp(p)\nwish=sin(varargin{1})\nend\np=ful(1:3)",
        "choices": [
            "Error in calling the function",
            "Error in celldisp",
            "Error in the function definiton",
            "Error in the wish variable"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Matlab",
        "task_id": "4d8b10af-4194-43ed-be89-2d90a0ab203a"
    },
    {
        "question": "Question: What will be the output of the following PHP code?\n    <?php    $fruits = array (\"apple\", \"mango\", \"peach\", \"pear\",    \"orange\");    $subset = array_slice ($fruits, 2);    print_r ($subset);    ?>",
        "choices": [
            "Array ( [0] => peach )",
            "Array ( [0] => apple [1] => mango [2] => peach )",
            "Array ( [0] => apple [1] => mango )",
            "Array ( [0] => peach [1] => pear [2] => orange )"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "PHP",
        "task_id": "439ec1e4-9d46-4338-bcdb-8a509993cf78"
    },
    {
        "question": "Question: What will be the output of the following PHP code?\n<?php    $str = \"Hello world. It's a beautiful day.\";    print_r (explode(\" \",$str));?>",
        "choices": [
            "Array ( [0] => Hello [0] => world. [0] => It\u2019s [0] => a [0] => beautiful [0] => day. )",
            "Array ( [0] => Hello [1] => world. [2] => It\u2019s [3] => a [4] => beautiful [5] => day. )",
            "Hello world. It\u2019s a beautiful day",
            "Array ( [1] => Hello [2] => world. [3] => It\u2019s [4] => a [5] => beautiful [6] => day. )"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "PHP",
        "task_id": "22c5b1af-9094-4499-a963-6e112de477d5"
    },
    {
        "question": "Question: What will be the output of the following PHP code?\n<?phpfunction one(){    echo \" this works\";    function two()    {        echo \"this too works\";    }}one();two();?>",
        "choices": [
            "error",
            "this works",
            "this worksthis too works",
            "this works this too works"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "PHP",
        "task_id": "0967cbb2-89fd-4da8-a067-e777ed8938b2"
    }
]