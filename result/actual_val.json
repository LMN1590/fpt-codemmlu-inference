[
    {
        "question": "Question: What will be the auxiliary space requirement of the following code?\n#include <bits/stdc++.h> \nusing namespace std; \nvoid func(int arr[], int left, int right) \n{     \n\twhile (left < right) \n\t{ \n\t\tint temp = arr[left]; \n\t\tarr[left] = arr[right]; \n\t\tarr[right] = temp; \n\t\tleft++; \n\t\tright--; \n\t} \n\u00a0\n}\t\n\u00a0\nvoid printArray(int arr[], int size) \n{ \n    for (int i = 0; i < size; i++) \n    cout << arr[i] << \" \"; \n} \n\u00a0\nint main() \n{ \n\tint arr[] = {1,4,3,5}; \n\tint n = sizeof(arr) / sizeof(arr[0]); \n\tfunc(arr, 0, n-1); \n\tprintArray(arr, n); \n\treturn 0; \n}",
        "choices": [
            "O(1)",
            "O(n)",
            "O(log n)",
            "O(n log n)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "60e5c023-0922-4e30-b742-be570dc89565"
    },
    {
        "question": "Question: What is the output of this program?\n   #include<stdio.h>   #include<pthread.h>\u00a0   sem_t st;   void *fun_t(void *arg);   void *fun_t(void *arg)   {       pthread_exit(\"Bye\");   }   int main()   {       pthread_t pt;       void *res_t;       if(pthread_create(&pt,NULL,fun_t,NULL) == -1)           perror(\"pthread_create\");       if(sem_init(&st,1,2) != 0)           perror(\"sem_init\");       if(pthread_join(pt,&res_t) == -1)           perror(\"pthread_join\");       if(sem_destroy(&st) != 0)           perror(\"sem_destroy\");       return 0;   }",
        "choices": [
            "this program will print nothing",
            "this program will give an error",
            "this program will give segmentation fault",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "ac7c128f-491b-4140-beda-2d7ad6644b85"
    },
    {
        "question": "Question: What is the output of this program\n   #include<stdio.h>   #include<pthread.h>\u00a0   void *fun_t(void *arg);   void *fun_t(void *arg)   {       pthread_exit(\"Bye\");       }   int main()   {       pthread_t pt;       void *res_t;       int ret;               ret = pthread_join(pt,&res_t);       printf(\"%d\\n\",ret);       return 0;   }",
        "choices": [
            "0",
            "-1",
            "2",
            "3"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "539aa5ef-c82a-4190-b85c-fd05635ec967"
    },
    {
        "question": "Question: What is the output of the following code?\n#include<stdio.h>\nint cnt =0;\nint my_function(int n, int sm)\n{\n      int i, tmp_sm;\n      for(i=1;i<=n;i++)\n      {\n          tmp_sm = recursive_sum_of_digits(i);\n          if(tmp_sm == sm)\n            cnt++;\n      }\n      return cnt;\n}\nint recursive_sum_of_digits(int n)\n{\n      if(n == 0)\n        return 0;\n      return n % 10 + recursive_sum_of_digits(n/10);\n}\nint main()\n{\n      int n = 20, sum = 3;\n      int ans = my_function(n,sum);\n      printf(\"%d\",ans);\n      return 0;\n}",
        "choices": [
            "0",
            "1",
            "2",
            "3"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "a41ec98e-d46e-425a-9ab0-c2a39525eb7e"
    },
    {
        "question": "Question: What will the below code do?\n\n\nvoid function(int& num, int pos) \n{\n   num |= (1 << pos); \n}\n\n``````C++",
        "choices": [
            "divide num by pos.",
            "Multiply num by pos.",
            "Add num with pos.",
            "set the given position (pos) of a number (num)."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "95e84e39-6d4c-48ba-a9a6-7ea6870a78c2"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n    #include <iostream>    using namespace std;    #define PI 3.14159    int main ()    {        float r = 2;        float circle;        circle = 2 * PI * r;        cout << circle;        return 0;    }",
        "choices": [
            "12.5664",
            "13.5664",
            "10",
            "15"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "2a4ed5ef-2461-489e-84f5-5940ae3ecb47"
    },
    {
        "question": "Question: What will be output of the following C code?\n#include <stdio.h>\nmain()\n{\n    int a=9, b=9;\n    a=b++;\n    b=a++;\n    b=++b; \n    printf(\"%d %d\",a,b);\n}",
        "choices": [
            "9,9",
            "10,10",
            "9,10",
            "10,9"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "5c3abe38-ec4f-49fc-8d01-d566d71b1843"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <stdio.h>\nint main()\n{\n   const int x;\n   x = 10;\n   printf(\"%d\", x);\n   return 0;\n}",
        "choices": [
            "10",
            "Garbage value",
            "Error",
            "Segmentation fault"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "4299396a-e254-4049-91ee-4bc3e600656b"
    },
    {
        "question": "Question: This program will allocate the memory of ___ bytes for pointer \u201cptr\u201d.\n   #include<stdio.h>   #include<stdlib.h>\u00a0   int main()   {       int *ptr;       ptr = realloc(0,sizeof(int)*10);       return 0;   }",
        "choices": [
            "0",
            "10",
            "40",
            "none of the mentioned"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "e5bdddeb-de13-4502-8550-2bfae7800c65"
    },
    {
        "question": "Question: Which is the Bit Toggling operator below.?",
        "choices": [
            "Bitwise OR operator( | )",
            "Bitwise XOR Operator (^)",
            "Bitwise AND Operator(&)",
            "TILDE operator(~)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "e1307e3e-1b17-4a09-a9af-84064e794124"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    int main()    {        int i = 10;        int *p = &i;        foo(&p);        printf(\"%d \", *p);        printf(\"%d \", *p);    }    void foo(int **const p)    {        int j = 11;        *p = &j;        printf(\"%d \", **p);    }",
        "choices": [
            "11 11 11",
            "11 11 Undefined-value",
            "Compile time error",
            "Segmentation fault/code-crash"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "d0930701-2067-4383-9ec3-7b3d64f5d12b"
    },
    {
        "question": "Question: What will be the output of the following C code?\n    #include <stdio.h>    void main()    {        char *s= \"hello\";        char *p = s + 2;        printf(\"%c\\t%c\", *p, s[1]);    }",
        "choices": [
            "l e",
            "h e",
            "l l",
            "h l"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "0c108668-ff77-48af-9f61-e3726a7c7ad9"
    },
    {
        "question": "Question: What will be the output of the following C code if it is executed on a 32 bit processor?\n#include<stdio.h>\n#include<stdlib.h>\nint main()\n{\n    int *p;\n    p = (int *)malloc(20);\n    printf(\"%d\\n\", sizeof(p));\n    free(p);\n    return 0;\n}",
        "choices": [
            "2",
            "4",
            "8",
            "Junk value"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C Programming Language",
        "task_id": "ee6762c4-f91a-41f7-931e-8ec6bfe9d644"
    },
    {
        "question": "Question: One of the purposes of using intermediate code in compilers is to",
        "choices": [
            "make parsing and semantic analysis simpler.",
            "improve error recovery and error reporting.",
            "increase the chances of reusing the machine-independent code optimizer in other compilers.",
            "improve the register allocation."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Compiler Design",
        "task_id": "72bef841-4127-47fe-9d81-5b59b128ee7e"
    },
    {
        "question": "Question: What is the correct way to create an object called myObj of MyClass?",
        "choices": [
            "class myObj = new MyClass();",
            "MyClass myObj = new MyClass();",
            "new myObj = MyClass();",
            "class MyClass = new myObj();"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C# Programming",
        "task_id": "3c520cf0-eb51-4ead-b9c4-4700bb349c80"
    },
    {
        "question": "Question: Write an SQL query to retrieve the names of employees who joined in the year 2021.",
        "choices": [
            "SELECT name FROM employees WHERE JOIN_YEAR = 2021;",
            "SELECT name FROM employees WHERE JOIN_DATE LIKE '2021%';",
            "SELECT name FROM employees WHERE YEAR(JOIN_DATE) = 2021;",
            "SELECT name FROM employees WHERE JOIN_DATE BETWEEN '2021-01-01' AND '2021-12-31';"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "a58afbd9-a9b3-4f26-9662-e001643fcc0f"
    },
    {
        "question": "Question: What does the SQL keyword \"SELECT\" do?",
        "choices": [
            "Adds new records to a table",
            "Updates existing records in a table",
            "Retrieves data from a database",
            "Deletes specific rows from a table"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "62674c7b-5bb4-414b-9a4e-1acba1f1644b"
    },
    {
        "question": "Question: Which MYSQL statement is used to insert new data in a database?",
        "choices": [
            "INSERT NEW",
            "INSERT INTO",
            "ADD RECORD",
            "ADD NEW"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "6e9fa445-bf30-4c24-b6fb-45dc45012903"
    },
    {
        "question": "Question: Which SQL statement is used to create a new table in the database?",
        "choices": [
            "ALTER TABLE",
            "CREATE TABLE",
            "NEW TABLE",
            "ADD TABLE"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "8f39ce00-fad3-4014-b096-fad107cd556b"
    },
    {
        "question": "Question: What is a valid SQL statement to delete all records in a table called 'cars'?",
        "choices": [
            "DELETE TABLE cars",
            "EMPTY TABLE cars",
            "TRUNCATE TABLE cars",
            "DROP TABLE cars;"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "38d71179-7c4f-45a5-8df3-97404b7caca6"
    },
    {
        "question": "Question: Which SQL statement is used to begin a transaction?",
        "choices": [
            "BEGIN TRANSACTION",
            "START TRANSACTION",
            "INITIATE TRANSACTION",
            "TRANSACTION BEGIN"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "SQL Commands",
        "task_id": "0c7a3351-17ec-44f3-8d31-f69e16f8c722"
    },
    {
        "question": "Question: Which service can be used for application authenthication?",
        "choices": [
            "Amazon S3",
            "AWS AppSync",
            "Amazon Cognito",
            "AWS X-Ray"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "AWS",
        "task_id": "5fa99398-2eb1-4dfc-a67d-1d68e2bb1467"
    },
    {
        "question": "Question: Suppose you are browsing the world wide web using a web browser and trying to access the web servers. What is the underlying protocol and port number that are being used?",
        "choices": [
            "UDP, 80",
            "TCP, 80",
            "TCP, 25",
            "UDP, 25"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "d29ab336-c21f-4b4c-b6b5-58ec3ae45640"
    },
    {
        "question": "Question: The subnet mask 255.255.255.192",
        "choices": [
            "extends the network portion to 16 bits",
            "extends the network portion to 26 bits",
            "extends the network portion to 36 bits",
            "has no effect on the network portion of an IP address"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "740cd366-dfd3-4343-8054-9c3b789b6283"
    },
    {
        "question": "Question: On a TCP connection, current congestion window size is Congestion Window = 4 KB. The window size advertised by the receiver is Advertise Window = 6 KB. The last byte sent by the sender is LastByteSent = 10240 and the last byte acknowledged by the receiver is LastByteAcked = 8192. The current window size at the sender is",
        "choices": [
            "2048 bytes",
            "4096 bytes",
            "6144 bytes",
            "8192 bytes"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "5e6eea7a-4bb0-4115-a241-ba4b19c23d76"
    },
    {
        "question": "Question: Consider the data given in above question.\r\rConsider the correct spanning tree for the previous question. Let host H1 send out a broadcast ping packet. Which of the following options represents the correct forwarding table on B3?[2 marks]\r(A)\r   \u00a0Hosts \u00a0Port   \u00a0H1, H2, H3, H4 \u00a03   \u00a0H5, H6, H9, H10 \u00a01   \u00a0H7, H8, H11, H12 \u00a02   \r(B)\r   \u00a0Hosts \u00a0Port   \u00a0H1, H2 \u00a04   \u00a0H3, H4 \u00a03   \u00a0H5, H6 \u00a01   \u00a0H7, H8, H9, H10,H11,H12 \u00a02   \r(C)\r   \u00a0Hosts \u00a0Port   H3, H4 \u00a03   H5, H6, H9, H10 \u00a01   \u00a0H1, H2 \u00a04   \u00a0H7, H8, H11, H12 \u00a02   \r(D)\r   \u00a0Hosts \u00a0Port   \u00a0H1, H2, H3, H4 \u00a03   \u00a0H5, H7, H9, H10 \u00a01   \u00a0H7, H8, H11, H12 \u00a04",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "c6284184-a218-4746-ac5b-dee810e266f9"
    },
    {
        "question": "Question: The address of a class B host is to be split into subnets with a 6-bit subnet number. What is the maximum number of subnets and the maximum number of hosts in each subnet?",
        "choices": [
            "62 subnets and 262142 hosts.",
            "64 subnets and 262142 hosts.",
            "62 subnets and 1022 hosts.",
            "64 subnets and 1024 hosts."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "c72b7ccb-d05a-48f9-804c-c398eea7402b"
    },
    {
        "question": "Question: Silly Window Syndrome is related to",
        "choices": [
            "Error during transmission",
            "File transfer protocol",
            "Degrade in TCP performance",
            "Interface problem"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Networking Fundamentals",
        "task_id": "97a3d2c5-74ac-4432-ba44-540014b7c057"
    },
    {
        "question": "Question: In RSA public key cryptosystem suppose n = p \u2217 q where p and q are primes. (e, n) and (d, n) are public and private keys respectively. Let M be an integer such that o < M < n and \u03c6(n) = (p \u2013 1)(q \u2013 1). Which of the following equations represent RSA public key cryptosystem ?\r\r\n     I. C \u2261 Me(mod n)         \r\n        M \u2261 (C)d(mod n) \r\n    II.ed \u2261 1(mod n)\r\n   III.ed \u2261 1(mod \u03c6(n))           \r\n    IV. C \u2261 Me(mod \u03c6(n))\r\n        M \u2261 Cd(mod \u03c6(n))\r\nCodes :",
        "choices": [
            "I and II",
            "I and III",
            "II and III",
            "I and IV"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Cryptography",
        "task_id": "5492505b-5869-4ffb-9baf-a95b167f4ddd"
    },
    {
        "question": "Question: Which one of the following statements is incorrect?",
        "choices": [
            "Pareto analysis is a statistical method used for analyzing causes, and is one of the primary tools for quality management.",
            "Reliability of a software specifies the probability of failure-free operation of that software for a given time duration.",
            "The reliability of a system can also be specified as the Mean Time To Failure (MTTF).",
            "In white-box testing, the test cases are decided from the specifications or the requirements"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "85e2359d-77df-4e88-8c48-0d7542beb9a1"
    },
    {
        "question": "Question: Which one of the following statements, related to the requirements phase in Software Engineering, is incorrect?",
        "choices": [
            "\u201cRequirement validation\u201d is one of the activities in the requirements phase.",
            "\u201cPrototyping\u201d is one of the methods for requirement analysis.",
            "\u201cModelling-oriented approach\u201d is one of the methods for specifying the functional specifications",
            "\u201cFunction points\u201d is one of the most commonly used size metric for requirements."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "680e361f-376c-458d-96dd-9be82648e96b"
    },
    {
        "question": "Question: Match the problem domains in GROUP I with the solution technologies in GROUP II\r\rGROUP I                                         GROUP II\r\n(P) Service oriented computing                 (1) Interoperability\r\n(Q) Heterogeneous communicating systems        (2) BPMN\r\n(R) Information representation                 (3) Publish-find-bind\r\n(S) Process description                        (4) XML",
        "choices": [
            "P-1, Q-2, R-3, S-4",
            "P-3, Q-4, R-2, S-1",
            "P-3, Q-1, R-4, S-2",
            "P-4, Q-3, R-2, S-1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Engineering",
        "task_id": "16ac1d8c-8988-4d63-8451-2203080ceb59"
    },
    {
        "question": "Question: An object is an unordered collection of _______.",
        "choices": [
            "values",
            "names",
            "Properties",
            "All of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "926b2fb5-71bf-4258-b673-ad4246529321"
    },
    {
        "question": "Question: How do we add a comment in CSS file?",
        "choices": [
            "Geeksforgeeks",
            "/ Geeksforgeeks /",
            "/*Geeksforgeeks*/",
            "//*Geeksforgeeks*//"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "2ad6567b-7941-4722-89b2-bed250836630"
    },
    {
        "question": "Question: What does Garbage-collection mean in the context of javascript",
        "choices": [
            "Developers don\\'t need to manage resources manually. Everything happens manually",
            "The mechanism in js which automatically removes unnecessary things from the memory",
            "Functions are simply treated as variables",
            "None of the above"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "0fe57587-6ba5-40dc-9d79-59d86b10bceb"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
        "choices": [
            "  mean = sum(numbers) / len(numbers)\n  return sum(abs(num - mean) for num in numbers) / len(numbers)",
            "    if not numbers:\n        return float('nan')\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "    mean = sum(numbers) / len(numbers)\n    return sum((num - mean) ** 2 for num in numbers) / len(numbers)",
            "  median = sorted(numbers)[len(numbers) // 2]\n  return sum(abs(num - median) for num in numbers) / len(numbers)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Programming Languages",
        "task_id": "8de79d53-c88a-4853-a90f-bc876ddcc0cb"
    },
    {
        "question": "Question: Which properties in CSS used to selects an animation defined in the keyframes rule ?",
        "choices": [
            "animation",
            "animation-name",
            "animation-element",
            "None of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "HTML",
        "task_id": "584689b4-3693-41da-8ecb-ae9738a9604b"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nk = int(input())\nc = 0\na = [0]*(k+1)\na[0] = 7%k\n\nif k%2 == 0 or k%5 == 0:\n\tprint('-1')\nelse:\n\tfor i in range(1,k+1):\n\t\tc += 1 \n\t\ta[i+1] = (10*a[i] + 7)%k\n\t\tif a[i+1] == 0:\n\t\t\tbreak\n\tprint(c)",
        "choices": [
            "Internal error",
            "Time Limit Exceeded",
            "Runtime Error",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a638817e-0f7f-47b6-b0f0-039f0b20b16f"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s. Return a list of integers representing the size of these parts.\n\nIncomplete Solution:\nclass Solution:\n  def partitionLabels(self, s: str) -> List[int]:\n    ans = []\n    letterToRightmostIndex = {c: i for i, c in enumerate(s)}\n\n    l = 0  \n    r = 0  \n\n    for i, c in enumerate(s):\n      r = max(r, letterToRightmostIndex[c])\n      if i == r:\n        _______________\n        ans.append(r - l + 1)\n        l = r + 1\n\n    return ans",
        "choices": [
            "        ans.append(r - l + 1)",
            "        ans.append(r - i)",
            "        ans.append(i - l + 1)",
            "        ans.append(i + 1)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "657a664d-1fa8-44ed-b383-1515bb792780"
    },
    {
        "question": "Question: What will be the output of the following Python code snippet?\nprint('ab'.zfill(5))",
        "choices": [
            "000ab",
            "00ab0",
            "0ab00",
            "ab000"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "39dc3c93-144f-48ca-be4c-316ca9a0cf68"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations. Implement the PeekingIterator class: Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\n\nIncomplete Solution:\nclass PeekingIterator:\n  def __init__(self, iterator: Iterator):\n    self.iterator = iterator\n    self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n\n  def peek(self) -> int:\n    \"\"\"\n    _______________\n    Returns the next element in the iteration without advancing the iterator.\n    \"\"\"\n    return self.buffer\n\n  def next(self) -> int:\n    next = self.buffer\n    self.buffer = self.iterator.next() if self.iterator.hasNext() else None\n    return next\n\n  def hasNext(self) -> bool:\n    return self.buffer is not None",
        "choices": [
            "    Returns the next element in the iteration without moving the iterator.",
            "    Shows the next element in the iteration without advancing the position.",
            "    Provides a preview of the next element without iterating forward.",
            "    Returns the next element in the iteration without advancing the iterator."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "8809d353-f279-401a-8da2-c7eb9747921a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom fractions import gcd\nfrom functools import reduce\n\ndef gcds(*numbers):\n    return reduce(gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(gcd, numbers)\n\n# INPUT\nn, x = map(int, input().split())\ncapitals = list(map(int, input().split()))\n\n# PROCESS\ndistance_cap = list(map(lambda c: abs(x-c), capitals))\nanswer = gcd_list(distance_cap)\n\n# OUTPUT\nprint(answer)\n\n\n",
        "choices": [
            "Memory Limit Exceeded",
            "Internal error",
            "No abnormally found",
            "Runtime Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a3189137-2e2c-476f-8860-950d326f16c1"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def gcd(a, b):\n2     if b == 0:\n3         return a\n4     else:\n5         return gcd(a % b, b)",
        "choices": [
            "Modify line 4:\n```return gcd(b, a % b)```",
            "Modify line 2:\n```return gcd(b, a % b)```",
            "Modify line 4:\n```       return gcd(b, a % b)```\n"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "678d3b97-fb96-4414-a39b-3320706c7cca"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions: Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.\n\nIncomplete Solution:\nclass Solution:\n  def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:\n    divisorLcm = math.lcm(divisor1, divisor2)\n    l = 0\n    r = 2**31 - 1\n\n    def isPossible(m: int) -> bool:\n      cnt1 = m - m // divisor1\n      cnt2 = m - m // divisor2\n      totalCnt = m - m // divisorLcm\n      _______________\n      return cnt1 >= uniqueCnt1 and cnt2 >= uniqueCnt2 and \\\n          totalCnt >= uniqueCnt1 + uniqueCnt2\n\n    while l < r:\n      m = (l + r) // 2\n      if isPossible(m):\n        r = m\n      else:\n        l = m + 1\n\n    return l",
        "choices": [
            "      return cnt1 >= uniqueCnt1 and cnt1 >= uniqueCnt2 and \\",
            "      return cnt1 + cnt2 >= uniqueCnt1 + uniqueCnt2 and \\",
            "      return cnt1 >= uniqueCnt1 or cnt2 >= uniqueCnt2 and \\",
            "      return cnt1 >= uniqueCnt1 and cnt2 >= uniqueCnt2 and \\"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "fc7e2073-a009-4b2c-b67d-e650278718a1"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Notice\u00a0that there may exist\u00a0multiple valid ways for the\u00a0insertion, as long as the tree remains a BST after insertion. You can return any of them.\n\nIncomplete Solution:\nclass Solution:\n  def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:\n    if not root:\n      return TreeNode(val)\n    _______________\n    if root.val > val:\n      root.left = self.insertIntoBST(root.left, val)\n    else:\n      root.right = self.insertIntoBST(root.right, val)\n    return root",
        "choices": [
            "    if not val > root.val:",
            "    if val < root.val:",
            "    if val <= root.val:",
            "    if root.val > val:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "50499889-64b0-45ed-978c-ee0079c5922b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k. We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase. Return the reformatted license key.\n\nIncomplete Solution:\nclass Solution:\n  def licenseKeyFormatting(self, s: str, k: int) -> str:\n    ans = []\n    length = 0\n\n    for i in reversed(range(len(s))):\n      if s[i] == '-':\n        continue\n      _______________\n      if length > 0 and length % k == 0:\n        ans += '-'\n      ans += s[i].upper()\n      length += 1\n\n    return ''.join(reversed(ans))",
        "choices": [
            "      if length and length % k == 0:",
            "      if length > 0 and length % k == 0:",
            "      if length and not length % k:",
            "      if length >= k:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e1665c61-6298-443d-87d4-20e3ec7551f5"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
        "choices": [
            "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
            "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if ord(i)%2 == 0])",
            "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 1])",
            "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower()])"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d1db8fd8-966e-479a-b064-60a2ed1644bb"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "choices": [
            "  from math import floor, ceil\n  if value.count('.') == 1:\n      value = value.rstrip('0')\n      num = float(value)\n      if value[-2:] == '.5':\n          res = round(num)\n      else:\n          res = int(num)\n  else:\n      res = int(value)\n  return res",
            "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
            "  from math import floor, ceil\n  if value.count('.') == 1:\n      value = value.rstrip('0')\n      num = float(value)\n      if value[-2:] == '.5':\n          res = ceil(num)\n      else:\n          res = round(num)\n  else:\n      res = int(value)\n  return res",
            "  from math import floor, ceil\n  if value.count('.') == 1:\n      value = value.rstrip('0')\n      num = float(value)\n      if num >= 0:\n          res = ceil(num)\n      else:\n          res = floor(num)\n  else:\n      res = int(value)\n  return res"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a880ec4c-cfc4-427c-b54f-af9211e94205"
    },
    {
        "question": "Question: Fill in the line of the following Python code for calculating the factorial of a number.\ndef fact(num):\n    if num == 0: \n        return 1\n    else:\n        return _____________________",
        "choices": [
            "num*fact(num-1)",
            "(num-1)*(num-2)",
            "num*(num-1)",
            "fact(num)*fact(num-1)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "5fc5bedb-6cf9-4331-93e4-077b76b59b28"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer n, return a binary string representing its representation in base -2. Note that the returned string should not have leading zeros unless the string is \"0\".\n\nIncomplete Solution:\nclass Solution:\n  def baseNeg2(self, n: int) -> str:\n    ans = []\n\n    while n != 0:\n      ans.append(str(n & 1))\n      _______________\n      n = -(n >> 1)\n\n    return ''.join(reversed(ans)) if ans else '0'",
        "choices": [
            "      n = -(n // 2)",
            "      n = ~n >> 1",
            "      n = -(n >> 1)",
            "      n = -n // 2"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "7b0918e1-64cd-41eb-b6f1-f4fcf7ed07ef"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn=int(input())\n\na,b=input().split()\na=a[:n]\nb=b[:n]\nn=0\nfor i in a:\n\tprint(a[n],end='')\n\tprint(b[n],end='')\n\tn+=1\nprint()",
        "choices": [
            "Memory Limit Exceeded",
            "No abnormally found",
            "Internal error",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "e623a99a-cd06-49b2-afea-b913a0f4a9ba"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 2D 0-indexed array of strings, access_times, with size n. For each i where 0 <= i <= n - 1, access_times[i][0] represents the name of an employee, and access_times[i][1] represents the access time of that employee. All entries in access_times are within the same day. The access time is represented as four digits using a 24-hour time format, for example, \"0800\" or \"2250\". An employee is said to be high-access if he has accessed the system three or more times within a one-hour period. Times with exactly one hour of difference are not considered part of the same one-hour period. For example, \"0815\" and \"0915\" are not part of the same one-hour period. Access times at the start and end of the day are not counted within the same one-hour period. For example, \"0005\" and \"2350\" are not part of the same one-hour period. Return a list that contains the names of high-access employees with any order you want.\n\nIncomplete Solution:\nclass Solution:\n  def findHighAccessEmployees(self, access_times: List[List[str]]) -> List[str]:\n    ans = set()\n\n    access_times.sort()\n\n    for i in range(len(access_times) - 2):\n      name = access_times[i][0]\n      if name in ans:\n        continue\n      if name != access_times[i + 2][0]:\n        continue\n      _______________\n      if int(access_times[i + 2][1]) - int(access_times[i][1]) < 100:\n        ans.add(name)\n\n    return list(ans)",
        "choices": [
            "      if int(access_times[i + 1][1]) - int(access_times[i][1]) < 100:",
            "      if int(access_times[i + 2][1]) - int(access_times[i][1]) < 100:",
            "      if int(access_times[i][1]) - int(access_times[i - 2][1]) < 100:",
            "      if int(access_times[i + 2][1]) - int(access_times[i - 1][1]) < 100:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c1f7ea1c-080b-4561-9956-cf53fe49b470"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom networkx import*\ndef main():\n    g=Graph()\n    for a in[*open(0)][1:]:\n        a,b=map(int,a.split())\n        g.add_edge(a,b+.5)\n    x=0\n    for c in connected_components(g):\n        s=g.subgraph(c)\n        a,b=map(len,bipartite.sets(s))\n        x+=a*b-s.size()\n    print(x)\nmain()",
        "choices": [
            "No abnormally found",
            "Internal error",
            "Compile Error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4dd74e7c-c4c2-4ce4-ad31-71054a8ae398"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
        "choices": [
            "    if n < 4:\n        return [0, 0, 2, 0][n]\n    results = [0, 0, 2, 0, 1]  # Extra initial condition\n    for _ in range(5, n + 1):\n        results.append(sum(results[-4:]))\n        results.pop(0)\n    return results[-1]",
            "    if n < 4:\n        return [0, 0, 2, 0][n]\n    results = [0, 0, 2, 0]\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-2])\n        results.pop(0)\n    return results[-1]",
            "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
            "    if n < 4:\n        return [0, 0, 2, 0][n]\n    results = [0, 0, 2, 1] \n    for _ in range(4, n + 1):\n        results.append(sum(results))\n        results.pop(0)\n    return results[-1]\n"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "6617abbf-2936-4bc9-a0dc-e1861879ae96"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef main():\n    import sys\n    from collections import deque\n\n    input = sys.stdin.readline\n    sys.setrecursionlimit(1000000)\n\n    n = int(input())\n\n    E = [[] for i in range(n)]\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        E[a-1].append(b-1)\n        E[b-1].append(a-1)\n\n    mod = 10 ** 9 + 7\n    N = n + 1\n\n    #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n    inv_t = [0]+[1]\n    for i in range(2, N):\n        inv_t += [inv_t[mod % i] * (mod - int(mod / i)) % mod]\n\n    #\u968e\u4e57\u8a08\u7b97\n    kai = [1, 1]\n    rev_kai = [1, inv_t[1]]\n    for i in range(2, N):\n        kai.append(kai[-1] * i % mod)\n        rev_kai.append(rev_kai[-1] * inv_t[i] % mod)\n\n    # \u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u8a08\u7b97\n    def cmb(n, r):\n        if n == 0 or r == 0:\n            return 1\n        else:\n            return kai[n] * rev_kai[r] * rev_kai[n-r] % mod\n\n    down = [{} for i in range(n+1)]\n    up = [0 for i in range(n+1)]\n    down_sum = [0 for i in range(n)]\n    down_mul = [{} for i in range(n)]\n\n    def dfs_down(cur, pre):\n        if E[cur] == [pre]:\n            down[pre][cur] = [1, 1]\n        ns = []\n        cnt = 1\n        ns_append = ns.append\n        for e in E[cur]:\n            if e != pre:\n                if e not in down[cur]:\n                    dfs_down(e, cur)\n                ni, cnti = down[cur][e]\n                ns_append(ni)\n                cnt = cnt * cnti % mod\n        s = sum(ns)\n        S = s\n        for ni in ns:\n            cnt = cnt * cmb(s, ni) % mod\n            s -= ni\n        down[pre][cur] = [S+1, cnt]\n    \n    def preprocess():\n        for i in range(n):\n            ns = []\n            cnt = 1\n            cnts = []\n            l = [1]\n            r = [1]\n            cnts_append = cnts.append\n            ns_append = ns.append\n            l_append = l.append\n            r_append = r.append\n            downi = down[i]\n            downmuli = down_mul[i]\n            for e in downi:\n                ni, cnti = downi[e]\n                ns_append(ni)\n                cnts_append(cnti)\n            for j in range(len(cnts)):\n                l_append(l[-1] * cnts[j] % mod)\n                r_append(r[-1] * cnts[-j-1] % mod)\n            for j, e in enumerate(downi):\n                if len(r) >= 2:\n                    downmuli[e] = l[j] * r[-j-2] % mod\n                else:\n                    downmuli[e] = 1\n\n            s = sum(ns)\n            S = s\n            for ni in ns:\n                cnt = cnt * cmb(s, ni) % mod\n                s -= ni\n            down_sum[i] = [S, cnt, l[-1]]\n    \n    def dfs_up(cur, pre):\n        stack = deque([[cur, pre]])\n        while stack:\n            cur, pre = stack.pop() \n            if cur != 0:\n                ni = 0\n                cnt = 1\n                if up[pre]:\n                    ni, cnt = up[pre]\n                # \u81ea\u5206\u4ee5\u5916\u306e\u5b50\u306b\u3064\u3044\u3066\u8a08\u7b97\n                # \u3042\u3089\u304b\u3058\u3081\u7a4d\u3092\u3068\u3063\u3066\u304a\u3051\u3070\u3001\u6bce\u56defor \u6587\u56de\u3055\u306a\u304f\u3066\u826f\u3044\n                n_cur, cnt_cur = down[pre][cur]\n                n_sum, cnt_sum, _ = down_sum[pre]\n                cnt = cnt * down_mul[pre][cur] % mod\n                cnt = cnt * cnt_sum % mod\n                cnt = cnt * kai[n_sum - n_cur] % mod\n                cnt = cnt * kai[n_cur] % mod\n                cnt = cnt * rev_kai[n_sum] % mod\n                cnt = cnt * cmb(n_sum-n_cur+ni, ni) % mod\n                s = n_sum-n_cur+ni\n\n                up[cur] = [s+1, cnt]\n            for e in E[cur]:\n                if e != pre:\n                    stack.append([e, cur])\n\n\n    dfs_down(0, n)\n    preprocess()\n    dfs_up(0, n)\n\n\n    for i in range(n):\n        ni = 0\n        cnt = 1\n        if up[i]:\n            ni, cnt = up[i]\n        n_sum, cnt_sum, cnt_all = down_sum[i]\n        cnt = cnt * cnt_sum % mod\n        cnt = cnt * cnt_all % mod\n        cnt = cnt * cmb(n_sum + ni, ni) % mod\n        print(cnt)\n\nif __name__ == '__main__':\n    main()\n",
        "choices": [
            "Runtime Error",
            "Internal error",
            "Memory Limit Exceeded",
            "Time Limit Exceeded"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f1478028-f1d9-4c16-8ec9-f4e85204e118"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def knapsack(capacity, items):\n2     from collections import defaultdict\n3     memo = defaultdict(int)\n4     for i in range(1, len(items) + 1):\n5         weight, value = items[i - 1]\n6         for j in range(1, capacity + 1):\n7             memo[i, j] = memo[i - 1, j]\n8             if weight < j:\n9                 memo[i, j] = max(\n10                     memo[i, j],\n11                     value + memo[i - 1, j - weight]\n12                 )\n13     return memo[len(items), capacity]",
        "choices": [
            "Modify line 7:\n```           if weight <= j:```\n",
            "Modify line 5:\n```for j in range(weight + 1)```",
            "Modify line 7:\n```if j >= weight:```",
            "Modify line 2:\n```memo = defaultdict(lambda: defaultdict(int))```"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "51f70864-84f9-4953-b56e-335584e00994"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: An integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic. Given an integer n, return true if n is strictly palindromic and false otherwise. A string is palindromic if it reads the same forward and backward.\n\nIncomplete Solution:\nclass Solution:\n  def isStrictlyPalindromic(self, n: int) -> bool:\n    _______________\n    return False",
        "choices": [
            "    return not True",
            "    x = False\nreturn x",
            "    return False"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "a0500496-787f-483f-af85-9ddb01871872"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string \"abc\" is not special, whereas the strings \"ddd\", \"zz\", and \"f\" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.\n\nIncomplete Solution:\nclass Solution:\n  def maximumLength(self, s: str) -> int:\n    n = len(s)\n    runningLen = 0\n    prevLetter = '@'\n    counts = [[0] * (n + 1) for _ in range(26)]\n\n    for c in s:\n      if c == prevLetter:\n        runningLen += 1\n        _______________\n        counts[ord(c) - ord('a')][runningLen] += 1\n      else:\n        runningLen = 1\n        counts[ord(c) - ord('a')][runningLen] += 1\n        prevLetter = c\n\n    def getMaxFreq(count: List[int]) -> int:\n      \"\"\"Returns the maximum frequency that occurs more than three times.\"\"\"\n      times = 0\n      for freq in range(n, 0, -1):\n        times += count[freq]\n        if times >= 3:\n          return freq\n      return -1\n\n    return max(getMaxFreq(count) for count in counts)",
        "choices": [
            "        counts[c.lower().index(c)][runningLen] += 1",
            "        counts[chr.index(c)][runningLen] += 1",
            "        counts[ord(c) - ord('a')][runningLen] += 1",
            "        counts[int(ord(c) - 97)][runningLen] += 1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b6443ff7-4896-4735-a690-61b68083a8c5"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'. You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows: The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2. Return the phone number after formatting.\n\nIncomplete Solution:\nclass Solution:\n  def reformatNumber(self, number: str) -> str:\n    ans = []\n\n    number = number.replace(\"-\", \"\").replace(\" \", \"\")\n\n    i = 0  \n    while i + 4 < len(number):\n      ans.append(number[i:i + 3] + '-')\n      i += 3\n\n    countFinalDigits = len(number) - i\n    if countFinalDigits < 4:\n      ans.append(number[i:])\n    else:  \n      _______________\n      ans.append(number[i:i + 2] + '-' + number[i + 2:])\n\n    return ''.join(ans)",
        "choices": [
            "      ans.append(number[i:i + 1] + '-' + number[i + 1:])",
            "      ans.append(number[i:i + 4] + '-' + number[i + 4:])",
            "      ans.append(number[i:i + 3] + '-' + number[i + 3:])",
            "      ans.append(number[i:i + 2] + '-' + number[i + 2:])"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1fa28824-c1b6-45bb-8acd-43b6b13eaeba"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "choices": [
            "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    return l % 2 != 0",
            "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
            "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    return l % 3 != 0",
            "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    return l % 2 == 1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d4509d0d-64b5-4fe0-bf7f-a125cf3a69f3"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n#99c\nimport math\n\nN = int(input()) #<=100000\n\n#\u5f15\u304d\u7b97\u3092\u8db3\u3057\u7b97\u3067\u4e0b\u304b\u3089\u6c42\u3081\u308b\n\n#\u76f4\u3067\u5f15\u304d\u51fa\u305b\u308b\u4e00\u89a7\u306eset\u3092\u4f5c\u308b\u3002\nsingle_withdraw_set = set()\nsingle_withdraw_set.add(1)\nsingle_withdraw_set |= {6**i for i in range(1,2 + int(math.log(N,6)))}\nsingle_withdraw_set |= {9**i for i in range(1,2 + int(math.log(N,9)))}\n#print(single_withdraw_set)\n\n#\u4f55\u56de\u3067\u5f15\u304d\u51fa\u305b\u308b\u304b\u306edict\u3002\u3053\u306e\u5f8c\u306e\u8a08\u7b97\u3067\u30de\u30a4\u30ca\u30b9\u5024\u3092\u53c2\u7167\u3059\u308b\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u4f5c\u3063\u3066\u304a\u304f\u3002\nwithdraw_dict = {int(-i):10**9+7 for i in range(1,1 + max(single_withdraw_set)) }\nwithdraw_dict[0] = 0\n\n#\u6700\u4f4e\u306e\u5f15\u304d\u51fa\u3057\u56de\u6570\u30921\u5186\u304b\u3089\u8a08\u7b97\u3057\u3066\u3044\u304f\nfor i in range(1,N+1):\n    if i in single_withdraw_set:\n        #1\u56de\u3067\u5f15\u304d\u51fa\u305b\u308bset\u306b\u3042\u308b\u306a\u3089\u5f53\u71361\u56de\n        withdraw_dict[i] = 1\n    else:\n        #\u306a\u3051\u308c\u3070 (\u73fe\u72b6\u306e\u5024 - 1\u56de\u3067\u5f15\u304d\u51fa\u3057\u53ef\u80fd\u306a\u5024)\u306e\u4e2d\u30671\u756a\u5c11\u306a\u3044\u5024 + 1 \n        withdraw_dict[i] = 1 + min([withdraw_dict[i-j] for j in single_withdraw_set])\n    \n    #print(i,\":\",withdraw_dict[i])\n    \n#print(withdraw_dict)\nprint(withdraw_dict[N])",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "No abnormally found",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ff39c6e5-7063-4caf-818e-32fc5caacf92"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums. You then do the following steps: Return the final value of original.\n\nIncomplete Solution:\nclass Solution:\n  def findFinalValue(self, nums: List[int], original: int) -> int:\n    numsSet = set(nums)\n    while original in numsSet:\n      _______________\n      original *= 2\n    return original",
        "choices": [
            "      original *= 2",
            "      original = original * 2",
            "      original += original",
            "      original <<= 1"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "3bece42f-2a30-4d14-a5a8-3deeb3a196c8"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 def reverse_linked_list(node):\n2     prevnode = None\n3     while node:\n4         nextnode = node.successor\n5         node.successor = prevnode\n6         node = nextnode\n7     return prevnode",
        "choices": [
            "Insert at line 5:\n```       prevnode = node```\n",
            "Modify line 2:\n```while node is not None:```",
            "Modify line 3:\n```nextnode = node.next```",
            "Modify line 1:\n```prevnode = node```"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "21e46e27-32ee-45c1-94aa-01353968f09b"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given an integer array prices representing the prices of various chocolates in a store. You are also given a single integer money, which represents your initial amount of money. You must buy exactly two chocolates in such a way that you still have some non-negative leftover money. You would like to minimize the sum of the prices of the two chocolates you buy. Return the amount of money you will have leftover after buying the two chocolates. If there is no way for you to buy two chocolates without ending up in debt, return money. Note that the leftover must be non-negative.\n\nIncomplete Solution:\nclass Solution:\n  def buyChoco(self, prices: List[int], money: int) -> int:\n    min1 = math.inf\n    min2 = math.inf\n\n    for price in prices:\n      _______________\n      if price <= min1:\n        min2 = min1\n        min1 = price\n      elif price < min2:\n        min2 = price\n\n    minCost = min1 + min2\n    return money if minCost > money else money - minCost",
        "choices": [
            "      if price < min1:",
            "      if price <= min1:",
            "      if price <= min1 * 0.99:",
            "      if price < min1 + 1:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f0e96468-87ef-43c9-916d-c95e09fbe125"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There is an undirected graph of n nodes. You are given a 2D array edges, where edges[i] = [ui, vi, lengthi] describes an edge between node ui and node vi with a traversal time of lengthi units. Additionally, you are given an array disappear, where disappear[i] denotes the time when the node i disappears from the graph and you won't be able to visit it. Notice that the graph might be disconnected and might contain multiple edges. Return the array answer, with answer[i] denoting the minimum units of time required to reach node i from node 0. If node i is unreachable from node 0 then answer[i] is -1.\n\nIncomplete Solution:\nclass Solution:\n  def minimumTime(self, n: int, edges: List[List[int]], disappear: List[int]) -> List[int]:\n    graph = [[] for _ in range(n)]\n\n    for u, v, w in edges:\n      graph[u].append((v, w))\n      graph[v].append((u, w))\n\n    return self._dijkstra(graph, 0, disappear)\n\n  def _dijkstra(self, graph: List[List[Tuple[int, int]]], src: int, disappear: List[int]) -> List[int]:\n    dist = [math.inf] * len(graph)\n\n    dist[src] = 0\n    minHeap = [(dist[src], src)]  \n\n    while minHeap:\n      d, u = heapq.heappop(minHeap)\n      if d > dist[u]:\n        continue\n      for v, w in graph[u]:\n        _______________\n        if d + w < disappear[v] and d + w < dist[v]:\n          dist[v] = d + w\n          heapq.heappush(minHeap, (dist[v], v))\n\n    return [d if d != math.inf else -1\n            for d in dist]",
        "choices": [
            "        if d + w < disappear[v] and d + w <= dist[v]:",
            "        if d + w < disappear[v] and d + w != dist[v]:",
            "        if d + w <= disappear[v] and d + w < dist[v]:",
            "        if d + w < disappear[v] and d + w < dist[v]:"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4d255d00-8147-4d6c-9dd5-206f05a7f637"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly. Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.\n\nIncomplete Solution:\nclass Solution:\n  def canBeTypedWords(self, text: str, brokenLetters: str) -> int:\n    ans = 0\n    _______________\n    broken = set(brokenLetters)\n\n    for word in text.split():\n      ans += all(c not in broken for c in word)\n\n    return ans",
        "choices": [
            "    broken = list(brokenLetters)",
            "    broken = {i for i in brokenLetters}",
            "    broken = set(brokenLetters)",
            "    broken = frozenset(brokenLetters)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "9013b4da-98b2-494d-9b82-cc057611b077"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound. An integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0. You may return the answer in any order. In your answer, each value should occur at most once.\n\nIncomplete Solution:\nclass Solution:\n  def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:\n    xs = {x**i for i in range(20) if x**i < bound}\n    ys = {y**i for i in range(20) if y**i < bound}\n_______________\n    return list({i + j for i in xs for j in ys if i + j <= bound})",
        "choices": [
            "return list({2*i + j for i in xs for j in ys if 2*i + j <= bound})",
            "return list({i - j for i in xs for j in ys if i - j <= bound})",
            "",
            "return list({i * j for i in xs for j in ys if i * j <= bound})"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "acc8d888-83a1-469b-8d71-51091e955d0c"
    },
    {
        "question": "Question: What will be the output of the following Python code snippet?\na = {}\na[1] = 1\na['1'] = 2\na[1.0]=4\ncount = 0\nfor i in a:\n    count += a[i]\nprint(count)",
        "choices": [
            "An exception is thrown",
            "3",
            "6",
            "2"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1ce80a58-0a1e-4b45-adf4-e04156d7bbdd"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\n\nIncomplete Solution:\nclass Solution:\n  def largestTriangleArea(self, points: List[List[int]]) -> float:\n    ans = 0\n\n    for Ax, Ay in points:\n      for Bx, By in points:\n        for Cx, Cy in points:\n          _______________\n          ans = max(ans, 0.5 * abs((Bx - Ax) * (Cy - Ay) -\n                                   (Cx - Ax) * (By - Ay)))\n\n    return ans",
        "choices": [
            "          ans = max(ans, 0.5 * abs((Bx - Ax) * (Cy - Ay) -",
            "          ans = max(ans, 0.5 * abs((Ay - By) * (Cx - Bx) +\n                                   (Cy - By) * (Bx - Ax))",
            "          ans = max(ans, 0.5 * abs((Cx - Ax) * (By - Ay) -\n                                   (Cy - By) * (Bx - Ax))",
            "          ans = max(ans, 0.5 * abs((Ax - Bx) * (Cy - By) -\n                                   (Ay - By) * (Cx - Bx))"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "4f3b70a4-ff23-43f7-a77a-dbacd74314bd"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. As a reminder, a binary search tree is a tree that satisfies these constraints:\n\nIncomplete Solution:\nclass Solution:\n  def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n    prefix = 0\n\n    def reversedInorder(root: Optional[TreeNode]) -> None:\n      nonlocal prefix\n      if not root:\n        return\n\n      reversedInorder(root.right)\n      _______________\n      prefix += root.val\n      root.val = prefix\n      reversedInorder(root.left)\n\n    reversedInorder(root)\n    return root",
        "choices": [
            "      prefix = sum([prefix, root.val])",
            "      prefix += root.val",
            "      prefix += (root.val)",
            "      prefix = prefix + root.val"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "c7059d94-e6b6-46fd-be0f-ecca4ccae254"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: A password is said to be strong if it satisfies all the following criteria: Given a string password, return true if it is a strong password. Otherwise, return false.\n\nIncomplete Solution:\nclass Solution:\n  def strongPasswordCheckerII(self, password: str) -> bool:\n    _______________\n    if len(password) < 8:\n      return False\n    if not any(c.islower() for c in password):\n      return False\n    if not any(c.isupper() for c in password):\n      return False\n    if not any(c.isdigit() for c in password):\n      return False\n    if not any(\"!@\n      return False\n    return all(a != b for a, b in zip(password, password[1:]))",
        "choices": [
            "    if password.rfind(password[0], 1) < 8:",
            "    if password.count(' ') >= 8 - len(password):",
            "    if len(password) < 8:",
            "    if len(set(password)) < 8:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f4246a86-f3cb-4195-9982-228282d2ea95"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nfrom itertools import accumulate\n\nN = int(input())\nA = list(map(int,input().split()))\nA = sorted(A)\nS = list(accumulate(A))\nAS = []\nflg = False\ncount = 0\n\nfor i in range(N-1):\n  AS.append(S[i]*2 - A[i+1])\nfor j in range(N-2,-1,-1):\n  if AS[j] < 0:\n    count = j+1\n    break\nprint(len(A)-count)",
        "choices": [
            "No abnormally found",
            "Internal error",
            "Compile Error",
            "Runtime Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "7e6d7ab9-ecd7-4f2e-b98f-1783b1884074"
    },
    {
        "question": "Question: Which solution below is the most likely completion the following \ncode snippet to achieve the desired goal?\n\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
        "choices": [
            "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa == 3.7:\n            letter_grade.append(\"A\")\n        elif gpa == 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa == 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa == 2.7:\n            letter_grade.append(\"B\")\n        elif gpa == 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa == 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa == 1.7:\n            letter_grade.append(\"C\")\n        elif gpa == 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa == 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa == 0.7:\n            letter_grade.append(\"D\")\n        elif gpa == 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"D-\") \n    return letter_grade"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "6892eafb-e9e0-43d0-ba98-d77ea398cc12"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has. Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have. Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\n\nIncomplete Solution:\nclass Solution:\n  def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n    _______________\n    diff = (sum(aliceSizes) - sum(bobSizes)) // 2\n    bobSizesSet = set(bobSizes)\n\n    for aliceSize in aliceSizes:\n      target = aliceSize - diff\n      if target in bobSizesSet:\n        return [aliceSize, target]",
        "choices": [
            "    diff = (sum(aliceSizes) + sum(bobSizes)) // 2",
            "    diff = (sum(aliceSizes) - sum(bobSizes)) / 2",
            "    diff = abs(sum(aliceSizes) - sum(bobSizes)) // 2",
            "    diff = (sum(aliceSizes) - sum(bobSizes)) // 2"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b7475bad-fa7a-42a2-bb92-f135273eb3fd"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed integer array nums and an integer k. A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray. Return the length of the longest possible equal subarray after deleting at most k elements from nums. A subarray is a contiguous, possibly empty sequence of elements within an array.\n\nIncomplete Solution:\nclass Solution:\n  def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n    ans = 0\n    count = collections.Counter()\n\n    l = 0\n    for r, num in enumerate(nums):\n      count[num] += 1\n      ans = max(ans, count[num])\n      _______________\n      while r - l + 1 - k > ans:\n        count[nums[l]] -= 1\n        l += 1\n\n    return ans",
        "choices": [
            "      while r - (l + k) + 1 > ans:",
            "      while (r - l + 1) - k > ans:",
            "      while r - l + 1 - k > ans:",
            "      while r - l - k + 1 > ans:"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "b772919e-b78c-4545-9232-e11b171742e9"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN, K = LIST()\nS = input()\n\nstand = []\nreverse = []\nstate = None\ncount = 0\ntmp = None\nfor i in S:\n\tif i == \"0\":\n\t\tstate = \"stand\"\n\telse:\n\t\tstate = \"reverse\"\n\tif tmp == \"stand\" and state == \"reverse\":\n\t\tstand.append(count)\n\t\tcount = 1\n\telif tmp == \"reverse\" and state == \"stand\":\n\t\treverse.append(count)\n\t\tcount = 1\n\telse: # \u72b6\u614b\u304c\u524d\u3068\u540c\u3058\n\t\tcount += 1\n\ttmp = state\nif state == \"stand\":\n\tstand.append(count)\nelse:\n\treverse.append(count)\n\nif \"0\" not in S:\n\tprint(len(S))\nelse:\n\tif K >= len(stand): # \u5168\u54e1\u9006\u7acb\u3061\u306b\u3067\u304d\u308b\n\t\tprint(len(S))\n\telse:\n\t\tif len(stand) > len(reverse):\n\t\t\treverse.append(0)\n\t\t\treverse.insert(0, 0)\n\t\tif len(stand) == len(reverse) and S[0] == \"0\":\n\t\t\treverse.insert(0, 0)\n\t\tif len(stand) == len(reverse) and S[0] == \"1\":\n\t\t\treverse.append(0)\n\t\t# print(stand)\n\t\t# print(reverse)\n\t\tmax_ = 0\n\t\tfor i in range(max(1, 1+len(reverse)-(K+1))):\n\t\t\t# print(reverse[i:i+K+1],stand[i:i+K])\n\t\t\ttmp = sum(reverse[i:i+K+1])+sum(stand[i:i+K])\n\t\t\tif tmp > max_:\n\t\t\t\tmax_ = tmp\n\t\tprint(max_)",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "922c69db-5203-4d8b-8979-ee37a974f4b0"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times.\u00a0The occurrences\u00a0may overlap. Return any duplicated\u00a0substring that has the longest possible length.\u00a0If s does not have a duplicated substring, the answer is \"\".\n\nIncomplete Solution:\nclass Solution:\n  def longestDupSubstring(self, s: str) -> str:\n    kMod = 1_000_000_007\n    bestStart = -1\n    l = 1\n    r = len(s)\n\n    def val(c: str) -> int:\n      return ord(c) - ord('a')\n\n    def getStart(k: int) -> Optional[int]:\n      maxPow = pow(26, k - 1, kMod)\n      hashToStart = collections.defaultdict(list)\n      h = 0\n\n      for i in range(k):\n        h = (h * 26 + val(s[i])) % kMod\n      hashToStart[h].append(0)\n\n      for i in range(k, len(s)):\n        startIndex = i - k + 1\n        _______________\n        h = (h - maxPow * val(s[i - k])) % kMod\n        h = (h * 26 + val(s[i])) % kMod\n        if h in hashToStart:\n          currSub = s[startIndex:startIndex + k]\n          for start in hashToStart[h]:\n            if s[start:start + k] == currSub:\n              return startIndex\n        hashToStart[h].append(startIndex)\n\n    while l < r:\n      m = (l + r) // 2\n      start: Optional[int] = getStart(m)\n      if start:\n        bestStart = start\n        l = m + 1\n      else:\n        r = m\n\n    if bestStart == -1:\n      return ''\n    if getStart(l):\n      return s[bestStart:bestStart + l]\n    return s[bestStart:bestStart + l - 1]",
        "choices": [
            "        h = (h - maxPow * val(s[i - k]) + kMod) % kMod",
            "        h = (h - maxPow * val(s[i - k])) % kMod",
            "        h = (h - maxPow * val(s[i - k - 1])) % kMod",
            "        h = (h - val(s[i - k]) * (maxPow // 2)) % kMod"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "8183a084-0aa3-467b-b6ba-7b224c27fc0f"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\n\"\"\"\n\u6b63\u5247\u4e8c\u90e8\u30b0\u30e9\u30d5\u306e\u8fba\u5f69\u8272\n\"\"\"\n\nimport numpy as np\n\nN,M = map(int,input().split())\ngrid = [[int(x) for x in input().split()] for _ in range(N)]\n\nedge = []\nfor i,row in enumerate(grid):\n    for j,x in enumerate(row):\n        edge.append(((x-1)//M,N+i))\n\ngraph = [dict() for _ in range(N+N)] # \u9802\u70b9\u3054\u308d\u306b\u3001\u8272->\u76f8\u624b\nrest_color = [set(range(M)) for _ in range(N+N)]\n\nfor u,v in edge:\n    c = rest_color[u].pop()\n    if c in rest_color[v]:\n        graph[u][c] = v\n        graph[v][c] = u\n        rest_color[v].remove(c)\n        continue\n    # \u4ea4\u4e92\u9053\u3092\u4f5c\u3063\u3066\u8272c,d\u3068\u5f53\u3066\u3066\u3044\u304f\n    d = rest_color[v].pop()\n    cd = c + d\n    V = [u,v]\n    next_c = c\n    while next_c not in rest_color[v]:\n        v = graph[v][next_c]\n        V.append(v)\n        next_c = cd - next_c\n    rest_color[v].remove(next_c)\n    rest_color[v].add(cd - next_c)\n    for i,(u,v) in enumerate(zip(V,V[1:])):\n        if i%2 == 0:\n            graph[u][c] = v\n            graph[v][c] = u\n        else:\n            graph[u][d] = v\n            graph[v][d] = u\n\nafter = [[None] * M for _ in range(N)]\n\nfor i,row in enumerate(grid):\n    mod_to_x = [[] for _ in range(N)]\n    for x in row:\n        mod_to_x[(x-1)//M].append(x)\n    for color in range(M):\n        after[i][color] = mod_to_x[graph[i][color] - N].pop()\n",
        "choices": [
            "Runtime Error",
            "Internal error",
            "No abnormally found",
            "Memory Limit Exceeded"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "66f5fad3-7b35-4f3e-9897-63d6c0054f48"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Design a data structure that supports adding new words and finding if a string matches any previously added string. Implement the WordDictionary class:\n\nIncomplete Solution:\nclass TrieNode:\n  def __init__(self):\n    self.children: Dict[str, TrieNode] = {}\n    self.isWord = False\n\n\nclass WordDictionary:\n  def __init__(self):\n    self.root = TrieNode()\n\n  def addWord(self, word: str) -> None:\n    node: TrieNode = self.root\n    for c in word:\n      node = node.children.setdefault(c, TrieNode())\n    node.isWord = True\n\n  def search(self, word: str) -> bool:\n    return self._dfs(word, 0, self.root)\n\n  def _dfs(self, word: str, s: int, node: TrieNode) -> bool:\n    if s == len(word):\n      return node.isWord\n    if word[s] != '.':\n      child: TrieNode = node.children.get(word[s], None)\n      _______________\n      return self._dfs(word, s + 1, child) if child else False\n    return any(self._dfs(word, s + 1, child) for child in node.children.values())",
        "choices": [
            "      child and self._dfs(word, s + 1, child) or False",
            "      if child: return self._dfs(word, s + 1, child); return False",
            "      return self._dfs(word, s + 1, child) if child else False",
            "      return self._dfs(word, s + 1, child) if child is not None else False"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "ee4cb41d-620f-4c77-ac34-3524ade23dab"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once. Return the minimum number of substrings in such a partition. Note that each character should belong to exactly one substring in a partition.\n\nIncomplete Solution:\nclass Solution:\n  def partitionString(self, s: str) -> int:\n    ans = 1\n    used = 0\n\n    for c in s:\n      i = ord(c) - ord('a')\n      _______________\n      if used >> i & 1:\n        used = 1 << i\n        ans += 1\n      else:\n        used |= 1 << i\n\n    return ans",
        "choices": [
            "      if (used >> i) & 1:",
            "      if used >> i & 1:",
            "      if (used >> i) % 2:",
            "      if used and (used >> i) & 1:"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "d40966fb-f71c-4f51-9628-eaee6063d6cd"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values. We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images. Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased. Return the largest possible overlap.\n\nIncomplete Solution:\nclass Solution:\n  def largestOverlap(self, A: List[List[int]], B: List[List[int]]) -> int:\n    n = len(A)\n    magic = 100\n    onesA = []\n    onesB = []\n    dict = collections.defaultdict(int)\n\n    for i in range(n):\n      for j in range(n):\n        if A[i][j] == 1:\n          onesA.append([i, j])\n        if B[i][j] == 1:\n          onesB.append([i, j])\n\n    for a in onesA:\n      for b in onesB:\n        _______________\n        dict[(a[0] - b[0]) * magic + (a[1] - b[1])] += 1\n\n    return max(dict.values()) if dict else 0",
        "choices": [
            "        dict[(a[0] - b[0]) * magic + (a[1] - b[1])] += 1",
            "        dict[(a[0] + b[0]) * magic + (a[1] + b[1])] += 1",
            "        dict[(a[0] - b[0]) * magic - (a[1] - b[1])] += 1"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2
        ],
        "label": "Python Basics",
        "task_id": "974fd6c0-2abd-41c6-89a9-b7d383f4bd58"
    },
    {
        "question": "Question: What will be the output of the following Python code snippet?\nfor i in '':\n    print (i)",
        "choices": [
            "None",
            "(nothing is printed)",
            "error",
            "none of the mentioned"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "f48ca4d9-4505-4a59-bcf9-f01eab94b238"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nn = int(input())\np = 10**9 + 7\n\ndef fact(n, p):\n    n_ = [1]\n    for i in range(1, n+1):\n         n_.append((n_[-1]*i) % p)\n    return n\n\ndef invfact(n, f, p):\n    m = [pow(f[n], p-2, p)]\n    for i in range(n, 0, -1):\n        m.append(m[-1] * i % p)\n    return m\n\nans = 0\nm = n - 1\nf = fact(m, p)\nrf = invfact(m, f, p)\nrf.reverse()\nperm = 0\n\nfor k in range((n+1)//2, n):\n    perm_ = f[k-1] * rf[2*k-n] %p * f[k] % p\n    ans += (perm_ - perm) %p * k % p\n    ans %= p\n    perm = perm_\n\nprint(ans)",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "Compile Error",
            "Internal error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "a49f0170-439f-4aae-abee-82b30e71e8db"
    },
    {
        "question": "Question: What will be the output of the following Python code, if the code is run on Windows operating system?\nimport sys\nif sys.platform[:2]== 'wi':\n\tprint(\"Hello\")",
        "choices": [
            "Error",
            "Hello",
            "No output",
            "Junk value"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "fbab0c0b-267c-4361-9b5f-e172213c66fe"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an array arr that represents a permutation of numbers from 1 to n. You have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1. You are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction. Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.\n\nIncomplete Solution:\nclass Solution:\n  def findLatestStep(self, arr: List[int], m: int) -> int:\n    if len(arr) == m:\n      return len(arr)\n\n    ans = -1\n    step = 0\n    _______________\n    sizes = [0] * (len(arr) + 2)\n\n    for i in arr:\n      step += 1\n      if sizes[i - 1] == m or sizes[i + 1] == m:\n        ans = step - 1\n      head = i - sizes[i - 1]\n      tail = i + sizes[i + 1]\n      sizes[head] = tail - head + 1\n      sizes[tail] = tail - head + 1\n\n    return ans",
        "choices": [
            "    sizes = [0] * (len(arr) + 2)",
            "    sizes = [0 for _ in range(len(arr) + 2)]",
            "    sizes = [0]*(len(arr)<<1)",
            "    sizes = [0] * (len(arr) + 1)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "1cc320da-af2c-46c4-af73-2d9ddc687df2"
    },
    {
        "question": "Question: What will be the output of the following Python code snippet?\nprint('abcefd'.replace('cd', '12'))",
        "choices": [
            "ab1ef2",
            "abcefd",
            "ab1efd",
            "ab12ed2"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "13b61b78-12f7-4563-ac29-8134bb2cdaa0"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nH,W = map(int, input().split())\nfields = [list(input()) for i in range(H)]\n\nfor f in fields:\n    cnt += f.count(\"#\")\nif cnt == H + W - 1: \n    print(\"Possible\")\nelse:\n    print(\"Impossible\")",
        "choices": [
            "Time Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Internal error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Python Basics",
        "task_id": "8730579b-762f-4e49-990f-244019cc47bf"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner scn = new Scanner(System.in);\n    int N = scn.nextInt();\n    scn.nextLine();\n\n    long anagCombi = 0;\n\n    ArrayList<String> sorted = new ArrayList<>();\n    for (int i = 0; i < N; i++) {\n      String s = scn.nextLine();\n      Character[] chars = new Character[10];\n      for (int j = 0; j < 10; j++) {\n        chars[j] = s.charAt(j);\n      }\n\n      Arrays.sort(chars, new Comparator<Character>() {\n        public int compare(Character c1, Character c2) {\n          int cmp = Character.compare(Character.toLowerCase(c1.charValue()), Character.toLowerCase(c2.charValue()));\n          if (cmp != 0)\n            return cmp;\n          return Character.compare(c1.charValue(), c2.charValue());\n        }\n      });\n      StringBuilder sb = new StringBuilder(chars.length);\n      for (char c : chars) {\n        sb.append(c);\n      }\n      sorted.add(sb.toString());\n\n    }\n\n    Collections.sort(sorted);\n    sorted.add(\"dummy\");\n    String prev = sorted.get(0);\n    long sameCount = 1L;\n    for (int i = 1; i < sorted.size(); i++) {\n      if (sorted.get(i).equals(prev)) {\n        sameCount++;\n      } else {\n        if (sameCount == 2) {\n          anagCombi += 1;\n        }\n        if (sameCount > 2) {\n          anagCombi += fact(sameCount) / (2L * fact(sameCount - 2L));\n        }\n        prev = sorted.get(i);\n        sameCount = 1L;\n\n      }\n    }\n\n    System.out.printf(\"%d\", anagCombi);\n\n  }\n\n  public static long fact(long a) {\n    if (a == 0) {\n      return 1L;\n    }\n    return a * fact(a - 1);\n  }\n\n}\n",
        "choices": [
            "Compile Error",
            "No abnormally found",
            "Runtime Error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "29032787-f6ee-421e-933b-7f75d6f1b1f6"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\n \n \npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t//int Q = Integer.parseInt(sc.next());\n\t\t//long L = Long.parseLong(sc.next());\n\t\t//char[] c = sc.next().toCharArray();\n\t\tint INF = Integer.MAX_VALUE;\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint N = Integer.parseInt(sc.next());\n\t\tint M = Integer.parseInt(sc.next());\n\t\tlong MOD = 1_000_000_007;\n\t\t\n\t\t//\u7d20\u56e0\u6570\u5206\u89e3\n\t\tList<int[]> primes = new ArrayList<>();\n\t\t\n\t\t\n\t\tint now_prime = 2;\n\t\tint now_M = M;\n\t\twhile(now_prime*now_prime<=M){\n\t\t\tif(now_M%now_prime == 0){\n\t\t\t\tnow_M /= now_prime;\n\t\t\t\tint[] prime = new int[2];\n\t\t\t\tprime[0] = now_prime;\n\t\t\t\tprime[1] = 1;\n\t\t\t\twhile(now_M%now_prime == 0){\n\t\t\t\t\tnow_M /= now_prime;\n\t\t\t\t\tprime[1]++;\n\t\t\t\t}\n\t\t\t\tprimes.add(prime);\n\t\t\t\t\n\t\t\t}\n\t\t\tnow_prime++;\n\t\t}\n\t\tif (now_M>1){\n\t\t\tint[] prime = new int[2];\n\t\t\tprime[0] = now_M;\n\t\t\tprime[1] = 1;\n\t\t\tprimes.add(prime);\n\t\t}\n\t\t\n\t\tlong ans = 1;\n\t\t\n\t\t//\u4e8c\u9805\u4fc2\u6570\u6f14\u7b97\u7528\u524d\u51e6\u7406\n\t\tlong[] fac = new long[2*N];\n\t\tfac[0] = 1;\n\t\tfac[1] = 1;\n\t\tlong[] inv = new long[2*N];\n\t\tinv[1] = 1;\n\t\tlong[] finv = new long[2*N];\n\t\tfinv[0] = 1;\n\t\tfinv[1] = 1;\n\t\tfor(int i=2;i<2*N;i++){\n\t\t\tfac[i] = (fac[i-1]*i)%MOD;\n\t\t\tinv[i] = MOD - inv[(int) (MOD%i)]*(MOD/i)%MOD;\n\t\t\tfinv[i] = (finv[i-1] * inv[i]) % MOD;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tfor(int[] prime : primes){\n\t\t\t//\u56e0\u6570K\u500b\u306eN\u5206\u5272\u3092\u6c42\u3081\u308b\n\t\t\tint K = prime[1];\n\t\t\tans *= (fac[N+K-1] * (finv[K] * finv[N-1])%MOD)%MOD;\n\t\t\tans %= MOD;\n\t\t}\n\t\tans %= MOD;\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n}\n\n",
        "choices": [
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Runtime Error",
            "Internal error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "2de17c4d-ab20-4ab8-ab83-8934f3a665d3"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint N = input.nextInt();\n\t\tint[] dp = new int[N+1];\n\t\tint[] arr = new int[N];\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tarr[i] = input.nextInt();\n\t\t\tdp[arr[i]]++;\n\t\t}\n\t\tlong TOTAL = 0;\n\t\tfor (int i = 1; i <= N; i++) {\n\t\t\tTOTAL+=C2(dp[i]);\n\t\t}\n\t\tfor (int k = 0; k < N; k++) {\n\t\t\tlong Temp = TOTAL-C2(dp[arr[k]]);\n\t\t\tTemp+=C2(dp[arr[k]]-1);\n\t\t\tSystem.out.println(Temp);\n\t\t}\n\t}\n\tpublic static long C2(long N) {\n\t\treturn N*(N-1)/2;\n\t}\n}",
        "choices": [
            "Memory Limit Exceeded",
            "Runtime Error",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "df1e50d5-ce61-429c-b0d3-bff5c1eb1273"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tstatic int n,m,v,p;\n\tstatic int a[];\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t n = sc.nextInt();\n\t\t m = sc.nextInt();\n\t\t v = sc.nextInt();\n\t\t p = sc.nextInt();\n\t\t a = new int[n];\n\t\tfor(int i=0;i<n;i++) {\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tArrays.sort(a);\n\t\t\n\t\tint ans = n-binarySearch(0,n-1);\n\t\tSystem.out.println(ans);\n\t\t\n\t}\n\tstatic int binarySearch(int lo,int hi) {\n\t\tint mid = (lo+hi)/2;\n\t\tif(works(mid)) {\n\t\t\tif(!works(mid-1)) {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\treturn binarySearch(lo,mid-1);\n\t\t}\n\t\telse {\n\t\t\tif(works(mid+1)) {\n\t\t\t\treturn mid+1;\n\t\t\t}\n\t\t\treturn binarySearch(mid+2,hi);\n\t\t}\n\t\t\n\t}\n\tstatic boolean works(int x) {\n\t\tlong totUsed =0;\n\t\tint numGreater =0;\n\t\tint numMid= 0;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\t\n\t\t\tif(a[i]<=a[x]) {\n\t\t\t\ttotUsed+=m;\n\t\t\t}\n\t\t\telse if(a[i]<=(a[x]+m)) {\n\t\t\t\tnumMid++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnumGreater++;\n\t\t\t\ttotUsed+=m;\n\t\t\t}\n\t\t}\n\t\tlong k = (long) (m)*(v);\n\t\tif(numGreater>=p) return false;\n\t\t\n\t\tint add = Math.min(p-1-numGreater,numMid);\n\t\tnumMid-=add;\n\t\tfor(int i=0;i<n;i++) {\n\t\t\tif(a[i]>a[x]) {\n\t\t\t\tif(a[i]<=(a[x]+m)) {\n\t\t\t\t\tif(numMid>0) {\n\t\t\t\t\t\tnumMid--;\n\t\t\t\t\t\ttotUsed+=a[x]+m-a[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttotUsed+=(long) m*add;\n\t\t\n\t\treturn totUsed>=k;\n\t\t\n\t}\n}\n",
        "choices": [
            "Internal error",
            "Compile Error",
            "Runtime Error",
            "Time Limit Exceeded"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "c071e350-0fb3-4dc7-8bf9-3a2a18a576a8"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\nimport java.util.Arrays;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception{\n\t\tScanner scn = new Scanner(System.in);\n\t\tint n = scn.nextInt();\n      \tString ans = \"Yes\";\n\t\tString[] w = new String[n];\n\t\tfor(int i=0; i<w.length; ++i){\n\t\t\tw[i] = scn.next();\n\t\t}\n      \tString[] ww = new String[n];\n      \tfor(int i=0; i<w.length; ++i){\n\t\t\tww[i] = w[i];\n\t\t}\n      \tArrays.sort(ww);\n      \tfor(int i=1; i<w.length; ++i){\n\t\t\tif(ww[i].equals(ww[i-1])){\n              ans = \"No\";\n            }\n\t\t}\n      \tfor(int i=1; i<w.length; ++i){\n          char[] last = list[i-1].toCharArray();\n          char[] first = list[i].toCharArray();\n          if(last[last.length-1] != first[0]){\n            ans = \"No\";\n          }\n        }\n      \tSystem.out.println(ans);\n\t}\n}",
        "choices": [
            "Runtime Error",
            "Time Limit Exceeded",
            "No abnormally found",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "0847c4ae-09af-447e-912e-92cba4867308"
    },
    {
        "question": "Question: What will be the output of the following Java code?\n    class static_out     {        static int x; \tstatic int y;        void add(int a, int b)        {            x = a + b;            y = x + b;        }    }        public class static_use     {        public static void main(String args[])        {            static_out obj1 = new static_out();            static_out obj2 = new static_out();               int a = 2;            obj1.add(a, a + 1);            obj2.add(5, a);            System.out.println(obj1.x + \" \" + obj2.y);             }   }",
        "choices": [
            "7 7.4",
            "6 6.4",
            "7 9",
            "9 7"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "809274df-044f-4a37-ab16-f80cd89225a2"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class SelectionDemo {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint D = sc.nextInt();\n\t\tint T = sc.nextInt();\n\t\tint S = sc.nextInt();\n\t\t\n\t\tif(T*S >= D) {\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}\n\t\telse {\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n\n}",
        "choices": [
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Internal error",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "d7a2b520-9a97-476e-8b20-8ca9d6222397"
    },
    {
        "question": "Question: What will be the output of the following Java code?\n    class Output     {        public static void main(String args[])         {           try            {               int a = 0;               int b = 5;               int c = a / b;               System.out.print(\"Hello\");           }           finally            {               System.out.print(\"World\");           }         }    }",
        "choices": [
            "Hello",
            "World",
            "HelloWOrld",
            "Compilation Error"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "805b2867-71b3-43f7-8ea9-a6a2b4b99bfe"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\n import java.util.*;\nclass Data{\n    private long a;\n    private long b;\n    public Data(long a, long b) {\n        this.a = a;\n        this.b = b;\n    }\n    public long getA() {\n        return a;\n    }\n    public long getB() {\n        return b;\n    }\n}\npublic class Main {    \n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tlong [] in = new long [a];\n        long [] in2 = new long [a];\n        long t = 0;\n        for(int i=0;i<a;i++){\n                             in[i] = sc.nextLong();\n                             in2[i] = sc.nextLong()-in[i];\n                            }\n        Data [] d = new Data [a];\n         for(int i=0;i<a;i++){d[i] = new Data(in[i],in2[i]);                            \n                             }\n        Arrays.sort(d, new Comparator<Data>() {\n            public long compare(Data d1, Data d2) {\n                return d1.getB() - d2.getB();\n            }\n        });\n\t\tString s = \"Yes\";        \n        for(int i=0;i<a;i++){if(in2[i]<t){s=\"No\";break;\n                                         }\n                             else{t+=in2[i];}\n                            }        \n\t\tSystem.out.println(s);\n\t}\n}",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "2b256471-b83d-4384-9b01-cf05877cca36"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\n\n\nclass Main {\n\tpublic static void main (String args[]){\n\t\t Scanner scan = new Scanner(System.in);\n\t\t int N = scan.nextInt();\n\t\t \n\t\t if(N==1){\n\t\t\t System.out.println(\"Hello World\");\n\t\t }\n\t\t \n\t\t if(N==2){\n\t\t\t int A = scan.nextInt();\n\t\t\t int B = scan.nextInt();\n\t\t\t \n\t\t\t System.out.println(A+B);\n\t\t }\n\t }\n}\n",
        "choices": [
            "Internal error",
            "No abnormally found",
            "Memory Limit Exceeded",
            "Compile Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "1e15184a-1430-44c2-94ac-59c2137cf5ec"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    static Scanner sc;\n    public static void main(String[] args) {\n        sc = new Scanner(System.in);\n        int N = sc.nextInt();\n        int K = sc.nextInt();\n        long[] H = new long[N];\n        for(int i = 0; i < N; i++) {\n            H[i] = sc.nextLong();\n        }\n\n        if(N == K) {\n            System.out.println(\"0\");\n            return;\n        }\n\n        long[][] dp = new long[N][N-K+1];\n        for(int i = 0; i < N; i++) {\n            dp[i][0] = 0;\n            dp[i][1] = H[i];\n        }\n\n        for(int l = 2; l <= N-K; l++) {\n            for(int k = 0; k < N; k++) {\n                if(k + 1 >= l) {\n                    long min = -1;\n                    for(int i = 0; i < k; i++) {\n                        if(dp[i][l-1] != -1) {\n                            long tmp = dp[i][l-1] + Math.max(0, H[k] - H[i]);\n                            if(min == -1 || tmp < min) {\n                                min = tmp;\n                            }\n                        }\n                    }\n                    dp[k][l] = min;\n                } else {\n                    dp[k][l] = -1;\n                }\n            }\n        }\n\n        long result = -1;\n        for(int i = (N - K) - 1; i < N; i++) {\n            if(result == -1 || dp[i][N-K] < result) {\n                result = dp[i][N-K];\n            }\n        }\n        System.out.println(result);\n    }\n}\n",
        "choices": [
            "Runtime Error",
            "Compile Error",
            "Memory Limit Exceeded",
            "No abnormally found"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "dbf5df03-a7f2-4db8-8037-9aa2a1574b81"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 import java.util.ArrayDeque;\n3 public class BREADTH_FIRST_SEARCH {\n4     public static Set<Node> nodesvisited = new HashSet<>();\n5     public static boolean breadth_first_search(Node startnode, Node goalnode) {\n6         Deque<Node> queue = new ArrayDeque<>();\n7         queue.addLast(startnode);\n8         nodesvisited.add(startnode);\n9         while (true) {\n10             Node node = queue.removeFirst();\n11             if (node == goalnode) {\n12                 return true;\n13             } else {\n14                 for (Node successor_node : node.getSuccessors()) {\n15                     if (!nodesvisited.contains(successor_node)) {\n16                         queue.addFirst(successor_node);\n17                         nodesvisited.add(successor_node);\n18                     }\n19                 }\n20             }\n21         }\n22     }\n23 }",
        "choices": [
            "Modify line 9:\n```while (!queue.isEmpty()) {```",
            "Modify line 8:\n```       while (!queue.isEmpty()) {```\nInsert at line 20:\n```        return false;```\n",
            "Modify line 8:\n```if (!nodesvisited.contains(startnode)) {\n    nodesvisited.add(startnode);\n}```",
            "Modify line 7:\n```queue.add(startnode);```"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f59dff8e-7bf9-4e7e-9490-49069077cc51"
    },
    {
        "question": "\nQuestion: The implementation below is producing incorrect results. \nWhich solution below correctly identifies the bug and repairs it to achieve the desired goal?\n1 import java.util.*;\n2 public class TO_BASE {\n3     public static String to_base(int num, int b) {\n4         String result = \"\";\n5         String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n6         int i;\n7         while (num > 0) {\n8             i = num % b;\n9             num = num / b; \n10             result = result + String.valueOf(alphabet.charAt(i));\n11         }\n12         return result;\n13     }\n14 }",
        "choices": [
            "Modify line 9:\n```           result = String.valueOf(alphabet.charAt(i))+result;```\n",
            "Modify line 8:\n```i = (num % b) % alphabet.length();```",
            "Modify line 10:\n```result = alphabet.charAt(i) + result;```",
            "Modify line 7:\n```        while (num >= b) {```"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "f01d0a2b-fa11-4a00-9c1c-381196564032"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tlong N = sc.nextInt();\n\t\tlong K = sc.nextInt();\n\t\tlong ans = 0;\n\t\tlong nSum = (N+1)*N/2+1;\n\n\t\tfor(long k = K; k<=N+1; k++) {\n\t\t\tans+=((2*N+1-k)*k/2-(k-1)*k/2+1);\n\t\t\tans%=Math.pow(10,9)+7;\n//\t\t\tSystem.out.println(ans);\n\t\t}\n\n\t\tans%=Math.pow(10,9)+7;\n\n\t\tSystem.out.println(ans);\n\n\n\t}\n\t//\t//\u4e8c\u5206\u63a2\u7d22\n\t//k <= num \u3068\u306a\u308b\u6700\u5c0f\u306e\u914d\u5217\u8981\u7d20k\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n\tstatic private int binarySearch(long num, long[] orderedArray){\n\t\tint lowerBorder = -1;\n\t\tint upperBorder = orderedArray.length;\n\t\tint mid;\n\n\t\twhile(upperBorder - lowerBorder >1) {\n\t\t\tmid = (upperBorder + lowerBorder)/2;\n\t\t\tif(orderedArray[mid]<=num) {\n\t\t\t\tlowerBorder = mid;\n\t\t\t}else {\n\t\t\t\tupperBorder = mid;\n\t\t\t}\n\t\t}\n\t\treturn lowerBorder;\n\t}\n\n\t//\u4e8c\u5206\u63a2\u7d22\n\t//k <= num \u3068\u306a\u308b\u6700\u5c0f\u306eList\u8981\u7d20k\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n\tstatic private int binarySearch(long num, ArrayList<Long> orderedList){\n\t\tint lowerBorder = -1;\n\t\tint upperBorder = orderedList.size();\n\t\tint mid;\n\n\t\twhile(upperBorder - lowerBorder >1) {\n\t\t\tmid = (upperBorder + lowerBorder)/2;\n\t\t\tif(orderedList.get(mid)<=num) {\n\t\t\t\tlowerBorder = mid;\n\t\t\t}else {\n\t\t\t\tupperBorder = mid;\n\t\t\t}\n\t\t}\n\t\treturn lowerBorder;\n\t}\n\n\t//a\u3068b\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\n\tpublic static int gcd(int a, int b) {\n        return b == 0 ? a: gcd(b, a % b);\n\t}\n\n}\n",
        "choices": [
            "Internal error",
            "No abnormally found",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "623af3c8-09b3-4612-8cba-1fec5521370a"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint k = sc.nextInt();\n\t\tsc.close();\n\n\t\tint k2 = k / 2;\n\t\tSystem.out.println(k2 * (k - k2));\n\t}\n}\n",
        "choices": [
            "No abnormally found",
            "Memory Limit Exceeded",
            "Time Limit Exceeded",
            "Runtime Error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "8f0e2c0a-eab6-4507-9bc2-d22154c4323f"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        PrintWriter out = new PrintWriter(System.out);\n        Scanner sc = new Scanner(System.in);\n        Task task = new Task();\n        task.solve(sc, out);\n        out.flush();\n        sc.close();\n    }\n\n    static class Task {\n        public void solve(Scanner sc, PrintWriter out) {\n            int N = nint(sc);\n            int M = nint(sc);\n            int Q = nint(sc);\n            List<Integer[]> LineList = new ArrayList<>();\n            for (int i = 0; i < M; i++) {\n                int l = nint(sc);\n                int r = nint(sc);\n                Integer[] lr = {l, r};\n                LineList.add(lr);\n            }\n\n            List<Integer[]> QuestionList = new ArrayList<>();\n            for (int i = 0; i < Q; i++) {\n                int p = nint(sc);\n                int q = nint(sc);\n                Integer[] pq = {p, q};\n                QuestionList.add(pq);\n            }\n\n            LineList = LineList.stream()\n                    .sorted(Comparator.comparing(x -> x[1]))\n                    .collect(Collectors.toList());\n\n            for (int i = 0; i < Q; i++) {\n                Integer[] Question = QuestionList.get(i);\n                int p = Question[0];\n                int q = Question[1];\n                int count = 0;\n                for (int j = 0; j < LineList.size(); j++) {\n                    Integer[] Line = LineList.get(j);\n                    int l = Line[0];\n                    int r = Line[1];\n                    if (r > q) {\n                        break;\n                    }\n                    if (l >= p) {\n                        count++;\n                    }\n                }\n                out.println(count);\n            }\n        }\n    }\n\n\n    static int nint(Scanner sc) {\n        return Integer.parseInt(sc.next());\n    }\n\n    static long nlong(Scanner sc) {\n        return Long.parseLong(sc.next());\n    }\n\n    static double ndouble(Scanner sc) {\n        return Double.parseDouble(sc.next());\n    }\n\n    static float nfloat(Scanner sc) {\n        return Float.parseFloat(sc.next());\n    }\n\n    static String nstr(Scanner sc) {\n        return sc.next();\n    }\n\n    static long[] longLine(Scanner sc, int size) {\n        long[] lLine = new long[size];\n        for (int i = 0; i < size; i++) {\n            lLine[i] = nlong(sc);\n        }\n        return lLine;\n    }\n\n    static int[] intLine(Scanner sc, int size) {\n        int[] iLine = new int[size];\n        for (int i = 0; i < size; i++) {\n            iLine[i] = nint(sc);\n        }\n        return iLine;\n    }\n\n    static String[] strLine(Scanner sc, int size) {\n        String[] strLine = new String[size];\n        for (int i = 0; i < size; i++) {\n            strLine[i] = nstr(sc);\n        }\n        return strLine;\n    }\n\n    static long maxFromList(List<Long> longList) {\n        return longList.stream().max(Comparator.naturalOrder()).get();\n    }\n\n    static long minFromList(List<Long> longList) {\n        return longList.stream().min(Comparator.naturalOrder()).get();\n    }\n\n    public static int sumDigits(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static long sumDigits(long n) {\n        long sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    static List<Integer> getIntegerList(Scanner sc, int size) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            list.add(nint(sc));\n        }\n        return list;\n    }\n\n    static List<Long> getLongList(Scanner sc, int size) {\n        List<Long> list = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            list.add(nlong(sc));\n        }\n        return list;\n    }\n}\n",
        "choices": [
            "Compile Error",
            "Time Limit Exceeded",
            "Runtime Error",
            "No abnormally found"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "b294ca4d-f50a-474a-962f-7800fd976745"
    },
    {
        "question": "Question: Given a code snippet below, which behavior most likely to occur when execute it?\nimport java.util.*;\n\nclass Main{\n  \n  public static void main(String[] args){\n    \n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n    int arr[] = new int[n];\n    for(int i = 0;i <= n;i++){\n      arr[i] = sc.nextInt();\n    }\n    \n    Arrays.sort(arr);\n    \n    int x = 0;\n    for(int i = 0;i < n-1;i++){\n      x += arr[i];\n    }\n    if(arr[n-1]>x){\n      System.out.println(\"Yes\");\n    }\n    else{\n      System.out.println(\"No\");\n    }\n\n  }\n\n}\n",
        "choices": [
            "No abnormally found",
            "Time Limit Exceeded",
            "Internal error",
            "Runtime Error"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Java Programming",
        "task_id": "99032322-72be-4dc2-9f84-d9c0379928be"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.\n\nIncomplete Solution:\nclass Solution:\n  def canPartition(self, nums: List[int]) -> bool:\n    summ = sum(nums)\n    if summ & 1:\n      return False\n    _______________\n    return self.knapsack_(nums, summ // 2)\n\n  def knapsack_(self, nums: List[int], subsetSum: int) -> bool:\n    dp = [False] * (subsetSum + 1)\n    dp[0] = True\n\n    for num in nums:\n      for i in range(subsetSum, num - 1, -1):\n        dp[i] = dp[i] or dp[i - num]\n\n    return dp[subsetSum]",
        "choices": [
            "    return self.knapsack_(nums, summ // 2)",
            "    return self.knapsack_(nums, summ - summ % 2)",
            "    return self.knapsack_(nums, summ >> 1)",
            "    return self.knapsack_(nums, summ / 2)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "32fb8844-a7ac-4534-b53d-5deef93e480c"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0. Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order. A full binary tree is a binary tree where each node has exactly 0 or 2 children.\n\nIncomplete Solution:\nclass Solution:\n  @functools.lru_cache(None)\n  def allPossibleFBT(self, n: int) -> List[Optional[TreeNode]]:\n    if n % 2 == 0:\n      return []\n    if n == 1:\n      return [TreeNode(0)]\n\n    ans = []\n\n    for leftCount in range(n):\n      _______________\n      rightCount = n - 1 - leftCount\n      for left in self.allPossibleFBT(leftCount):\n        for right in self.allPossibleFBT(rightCount):\n          ans.append(TreeNode(0))\n          ans[-1].left = left\n          ans[-1].right = right\n\n    return ans",
        "choices": [
            "      rightCount = n - (leftCount + 1)",
            "      rightCount = (n - 1) - leftCount",
            "      rightCount = n - 1 - leftCount",
            "      rightCount = n - leftCount - 1"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "c5eb6388-f3ed-4057-bc90-ad9e304610f6"
    },
    {
        "question": "Question: Look at the problem below, the solution is missing a part, which option is the most likely to complete the solution and achieve the desired goal?\n\nProblem description: You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor: You are also given numCarpets and carpetLen. You have numCarpets black carpets, each of length carpetLen tiles. Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another. Return the minimum number of white tiles still visible.\n\nIncomplete Solution:\nclass Solution:\n  def minimumWhiteTiles(self, floor: str, numCarpets: int, carpetLen: int) -> int:\n    n = len(floor)\n    dp = [[0] * (numCarpets + 1) for _ in range(n + 1)]\n\n    for i in reversed(range(n)):\n      dp[i][0] = int(floor[i]) + dp[i + 1][0]\n\n    for i in reversed(range(n)):\n      for j in range(1, numCarpets + 1):\n        _______________\n        cover = dp[i + carpetLen][j - 1] if i + carpetLen < n else 0\n        skip = int(floor[i]) + dp[i + 1][j]\n        dp[i][j] = min(cover, skip)\n\n    return dp[0][numCarpets]",
        "choices": [
            "        cover = dp[i + carpetLen][j - 1] if i <= n - carpetLen else 0",
            "        cover = dp[i + carpetLen][j - 1] if i + carpetLen < n else 0",
            "        cover = dp[min(i + carpetLen, n)][j - 1]",
            "        cover = dp[i + carpetLen][j - 1] if i + carpetLen <= n else float('inf')"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Dynamic Programming",
        "task_id": "00307742-6dc6-4374-9018-b1f0b5569ce7"
    },
    {
        "question": "Question: Consider a machine with a byte addressable main memory of 220 bytes, block size of 16 bytes and a direct mapped cache having 212 cache lines. Let the addresses of two consecutive bytes in main memory be (E201F)16 and (E2020)16. What are the tag and cache line address (in hex) for main memory address (E201F)16?",
        "choices": [
            "E, 201",
            "F, 201",
            "E, E20",
            "2, 01F"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "d7e7ade4-9d4a-46b4-887e-baa0db01203a"
    },
    {
        "question": "Question: n instruction set of a processor has 125 signals which can be divided into 5 groups of mutually exclusive signals as follows:Group 1 : 20 signals, Group 2 : 70 signals, Group 3 : 2 signals, Group 4 : 10 signals, Group 5 : 23 signals.\u00a0How many bits of the control words can be saved by using vertical microprogramming over horizontal microprogramming?",
        "choices": [
            "0",
            "103",
            "22",
            "55"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "90be4609-d68b-4eee-a919-870e2b6bc71c"
    },
    {
        "question": "Question: In _____ method, the word is written to the block in both the cache and main memory, in parallel.",
        "choices": [
            "Write through",
            "Write back",
            "Write protected",
            "Direct mapping"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "207137c1-356e-4a0d-8acd-51c80b31b502"
    },
    {
        "question": "Question: More than one word are put in one cache block to",
        "choices": [
            "exploit the temporal locality of reference in a program",
            "exploit the spatial locality of reference in a program",
            "reduce the miss penalty",
            "none of these"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Computer Organization",
        "task_id": "389815e9-8d5e-47ee-9c69-1f4e7844f135"
    },
    {
        "question": "Question: What is the key advantage of the Spiral model for large and complex projects?",
        "choices": [
            "Sequential and linear development",
            "Emphasis on comprehensive documentation",
            "Flexibility to accommodate changes",
            "Systematic risk identification and mitigation"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Design Principles",
        "task_id": "577ff165-d5f0-467a-9199-c26cdee8a077"
    },
    {
        "question": "Question: What is the primary goal of Gray Box Testing?",
        "choices": [
            "To focus on security testing",
            "To validate the user interface design",
            "To identify security vulnerabilities",
            "To find defects in the software with partial knowledge of the internal code"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Software Testing",
        "task_id": "0bd57b76-e3fd-4cb3-9a49-0493e6ba6446"
    },
    {
        "question": "Question: What will be the auxiliary space complexity of the following code?\n#include<bits/stdc++.h> \nusing namespace std; \n\u00a0\nvoid func(char* str2, char* str1) \n{ \n\tint m = strlen(str2); \n\tint n = strlen(str1); \n\tfor (int i = 0; i <= n - m; i++) \n        { \n\t\tint j; \n\u00a0\n\t\tfor (j = 0; j < m; j++) \n\t\t\tif (str1[i + j] != str2[j]) \n\t\t\t\tbreak; \n\u00a0\n\t\tif (j == m) \n\t\t\tcout << i << endl; \n\t} \n} \n\u00a0\nint main() \n{ \n\tchar str1[] = \"1253234\"; \n\tchar str2[] = \"323\"; \n\tfunc(str2, str1); \n\treturn 0; \n}",
        "choices": [
            "O(n)",
            "O(1)",
            "O(log n)",
            "O(m)"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "da97c41d-28e1-4916-9aab-615e39e85977"
    },
    {
        "question": "Question: State the complexity of algorithm given below.\n\tint function(vector<int> arr)\n\tint len=arr.length();\n\tif(len==0)\n\treturn;\n\ttemp=arr[len-1];\n\tarr.pop_back();\n\treturn temp;",
        "choices": [
            "o(n)",
            "O(logn)",
            "O(1)",
            "O(n logn)"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithm Complexity",
        "task_id": "9b382744-e1ff-4d12-a1ae-25a66e28a29c"
    },
    {
        "question": "Question: A Priority-Queue is implemented as a Max-Heap. Initially, it has 5 elements. The level-order traversal of the heap is given below: 10, 8, 5, 3, 2 Two new elements \u201d1\u2018 and \u201d7\u2018 are inserted in the heap in that order. The level-order traversal of the heap after the insertion of the elements is:",
        "choices": [
            "10, 8, 7, 5, 3, 2, 1",
            "10, 8, 7, 2, 3, 1, 5",
            "10, 8, 7, 1, 2, 3, 5",
            "10, 8, 7, 3, 2, 1, 5"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Data Structures",
        "task_id": "42435ac2-ba43-4788-9351-acf767032a4d"
    },
    {
        "question": "Question: The worst case running times of Insertion sort, Merge sort and Quick sort, respectively, are:",
        "choices": [
            "\u0398(n log n), \u0398(n log n) and \u0398(n2)",
            "\u0398(n2), \u0398(n2) and \u0398(n Log n)",
            "\u0398(n2), \u0398(n log n) and \u0398(n log n)",
            "\u0398(n2), \u0398(n log n) and \u0398(n2)"
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "eb106844-22bd-4176-8dad-9025c49fb0c3"
    },
    {
        "question": "Question: What is the complexity of the swap() member function of the queue STL in C++?",
        "choices": [
            "O(1)",
            "O(n)",
            "O(log n)",
            "O(n log n)"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "42400ffd-51ed-43db-ab47-315c89efecb8"
    },
    {
        "question": "Question: Look at the below series:\r\r1 = 1,  2 = 5,   3 = 13,  4 = ?,  5 = 61\r\n\r\nChoose the correct value for \"?\" from the below options:",
        "choices": [
            "39",
            "29",
            "34",
            "36"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "c4857f3e-1de1-4da4-b807-7d45d3debc4b"
    },
    {
        "question": "Question: Which of the following statements is true for Branch - and - Bound search?",
        "choices": [
            "Underestimates of remaining distance may cause deviation from optimal path.",
            "Overestimates can\\'t cause right path to be overlooked.",
            "Dynamic programming principle can be used to discard redundant partial paths.",
            "All of the above"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "b78b4e5a-14bd-4475-9ba6-62a21b0ff4d5"
    },
    {
        "question": "Question: Which method is used to access elements in an array?",
        "choices": [
            "Sequential",
            "Random",
            "Logarithmic",
            "Alternative"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "13e76bc8-f3f7-4ad4-bdd1-676c0d910f32"
    },
    {
        "question": "Question: The number of elements that can be sorted in [Tex]\\\\Theta(logn)[/Tex] time using heap sort is  \r\n(A) [Tex]\\\\Theta(1)[/Tex]\r\n(B) [Tex]\\\\Theta(\\\\sqrt{logn})[/Tex]\r\n(C) [Tex]\\\\Theta(Log n/(Log Log n))[/Tex]\r\n(d) [Tex]\\\\Theta(Log n)[/Tex]",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "ee99ad3f-f330-40dd-985f-10ae55929c2a"
    },
    {
        "question": "Question: Consider the following statements:i.   First-in-first out types of computations are efficiently supported by STACKS.ii.  Implementing LISTS on linked lists is more efficient than implementing LISTS on an array for almost all the basic LIST operations.iii. Implementing QUEUES on a circular array is more efficient than implementing QUEUES on a linear array with two indices.iv.  Last-in-first-out type of computations are efficiently supported by QUEUES.Which of the following is correct?",
        "choices": [
            "(ii) is true",
            "(i) and (ii) are true",
            "(iii) is true",
            "(ii) and (iv) are true"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "6ea390ba-84c1-414c-adb1-f1273372dd98"
    },
    {
        "question": "Question: When searching for the key value 60 in a binary search tree, nodes containing the key values 10, 20, 40, 50, 70 80, 90 are traversed, not necessarily in the order given. How many different orders are possible in which these key values can occur on the search path from the root to the node containing the value 60?",
        "choices": [
            "35",
            "64",
            "128",
            "5040"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Algorithms",
        "task_id": "e058904b-5833-4ca3-adfa-34d7fde98034"
    },
    {
        "question": "Question: __________ rules used to limit the volume of log information that has to be handled and processed in the event of system failure involving the loss of volatile information.",
        "choices": [
            "Write-ahead log",
            "Check-pointing",
            "Log buffer",
            "Thomas"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "ccf496ce-defe-4ac8-8ed9-cd43fcd24443"
    },
    {
        "question": "Question: Consider the following table : Faculty (facName, dept, office, rank, dateHired)\r\r  facName dept office rank dateHired   Ravi Art A101 Professor 1975   Murali Math M201 Assistant 2000   Narayanan Art A101 Associate 1992   Lakshmi Math M201 Professor 1982   Mohan CSC C101 Professor 1980   Lakshmi Math M201 Professor 1982   Sreeni Math M203 Associate 1990   Tanuja CSC C101 Instructor 2001   Ganesh CSC C105 Associate 1995  \r\r(Assume that no faculty member within a single department has same name. Each faculty member has only one office identified in office). 3NF refers to third normal form and BCNF refers to Boyee-Codd Normal Form\r\rThen Faculty is",
        "choices": [
            "Not in 3NF, in BCNF",
            "In 3NF, not in BCNF",
            "In 3NF, in BCNF",
            "Not in 3NF, not in BCNF"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "935d7a27-1bca-4127-9b07-1fcaa415132a"
    },
    {
        "question": "Question: The Relation\rVendor Order (V_no, V_ord_no, V_name, Qty_sup, unit_price) is in 2NF because:",
        "choices": [
            "Non_key attribute V_name is dependent on V_no which is part of composite key",
            "Non_key attribute V_name is dependent on Qty_sup",
            "Key attribute Qty_sup is dependent on primary_key unit price",
            "Key attribute V_ord_no is dependent on primary_key unit price"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "3357edc1-0fd4-4b13-bce2-0932bd675a44"
    },
    {
        "question": "Question: Which type of index does not alter the physical order of the table's rows and is typically faster to update than a clustered index?",
        "choices": [
            "Clustered index",
            "Non-clustered index",
            "Unique index",
            "Composite index"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "104b26d9-e146-4a4a-a5c1-7b2b8d055bd1"
    },
    {
        "question": "Question: Which of the following relational calculus expressions is not safe?",
        "choices": [
            "A",
            "B",
            "C",
            "D"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "92123186-1b98-47ea-8566-6cda8a99c96a"
    },
    {
        "question": "Question: Let R1 (a, b, c) and R2 (x, y, z) be two relations in which a is the foreign key of R1 that refers to the primary key of R2 . Consider following four options.\r(a)Insert into R 1     \r(b)Insert into R 2\r(c)Delete from R 1     \r(d)Delete from R 2\rWhich of the following is correct about the referential integrity constraint with respect to above?",
        "choices": [
            "Operations (a) and (b) will cause violation.",
            "Operations (b) and (c) will cause violation.",
            "Operations (c) and (d) will cause violation.",
            "Operations (d) and (a) will cause violation."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "9229f33d-a8d6-4163-926d-06aca07113d7"
    },
    {
        "question": "Question: An index is clustered, if",
        "choices": [
            "it is on a set of fields that form a candidate key.",
            "it is on a set of fields that include the primary key.",
            "the data records of the file are organized in the same order as the data entries of the index.",
            "the data records of the file are organized not in the same order as the data entries of the index."
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "68d9f4e5-9a47-4bff-a743-50521ed46537"
    },
    {
        "question": "Question: What is the equivalent serial schedule for the following transactions?\r\r\nT1          T2          T3\r\n                       R(Y)\r\n                       R(Z)\r\nR(X)\r\nW(X) \r\n                       W(Y)\r\n                       W(Z)\r\n           W(Z)\r\nR(Y)\r\nW(Y) \r\n           R(Y)\r\n           W(Y)\r\n           R(X)\r\n           W(X)",
        "choices": [
            "T1 \u2212 T2 \u2212 T3",
            "T3 \u2212 T1 \u2212 T2",
            "T2 \u2212 T1 \u2212 T3",
            "T1 \u2212 T3 \u2212 T2"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "b2f06a54-504e-4969-be1c-39d1590a7600"
    },
    {
        "question": "Question: Which of the following is true ?\rI.   Implementation of self-join is possible in SQL with table alias.\rII.  Outer-join operation is basic operation in relational algebra.\rIII. Natural join and outer join operations are equivalent.",
        "choices": [
            "I and II are correct.",
            "II and III are correct.",
            "Only III is correct.",
            "Only I is correct."
        ],
        "groundtruth": "D",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "6f5f1933-6a99-471f-8ea5-554f6d0cb1bb"
    },
    {
        "question": "Question: A database table T1 has 2000 records and occupies 80 disk blocks. Another table T2 has 400 records and occupies 20 disk blocks. These two tables have to be joined as per a specified join condition that needs to be evaluated for every pair of records from these two tables. The memory buffer space available can hold exactly one block of records for T1 and one block of records for T2 simultaneously at any point in time. No index is available on either table. If Nested-loop join algorithm is employed to perform the join, with the most appropriate choice of table to be used in outer loop, the number of block accesses required for reading the data are",
        "choices": [
            "800000",
            "40080",
            "32020",
            "100"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "a3d6d1fa-7564-47e0-bc03-2f251f720320"
    },
    {
        "question": "Question: From the following instance of a relation scheme R (A, B, C), we can conclude that :\r   A B C   1 1 1   1 1 0   2 3 2   2 3 2",
        "choices": [
            "A functionally determines B and B function\u00adally determines C",
            "A functionally determines B and B does not functionally determine C",
            "B does not functionally determine C",
            "A does not functionally determine B and B does not functionally determine C"
        ],
        "groundtruth": "C",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "92d040d5-a2f0-4243-900f-f24650d6d619"
    },
    {
        "question": "Question: Table A\r\nId   Name    Age\r\n----------------\r\n12   Arun    60\r\n15   Shreya  24\r\n99   Rohit   11\r\n\r\n\r\nTable B\r\nId   Name   Age\r\n----------------\r\n15   Shreya  24\r\n25   Hari    40\r\n98   Rohit   20\r\n99   Rohit   11\r\n\r\n\r\nTable C\r\nId   Phone  Area\r\n-----------------\r\n10   2200   02  \r\n99   2100   01\n\r\rConsider the above tables A, B and C. How many tuples does the result of the following SQL query contains?\r\r\nSELECT A.id \r\nFROM   A \r\nWHERE  A.age > ALL (SELECT B.age \r\n                    FROM   B \r\n                    WHERE  B. name = \"arun\")",
        "choices": [
            "4",
            "3",
            "0",
            "1"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Database Management Systems",
        "task_id": "c415e8d4-16e6-466a-bcbb-6f3fa2eeda42"
    },
    {
        "question": "Question: What will be the output of the following C++ code?\n#include <iostream>  \nusing namespace std;\nclass A{\npublic:\n\tint a;\n\tA(){\n\t\tcout<<\"Constructor called\";\n\t}\n};\nint main(int argc, char const *argv[])\n{\n\tA *a1 = (A*)malloc(sizeof(A));\n\treturn 0;\n}",
        "choices": [
            "Constructor called",
            "Nothing printed",
            "Error",
            "Segmentation fault"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "C++ Programming",
        "task_id": "1c25472b-951b-4fad-9d84-85a4e4da688a"
    },
    {
        "question": "Question: What would be the output of the following code (in editor window)?\na=1:5\t;\tc=a.^2",
        "choices": [
            "[1\t25]",
            "[1\t2\t3\t4\t5]",
            "[25\t16\t9\t4\t1]",
            "[1\t4\t9\t16\t25]"
        ],
        "groundtruth": "B",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "Matlab",
        "task_id": "0d811503-fdb1-4ebd-91a4-70f9e8e600b3"
    },
    {
        "question": "Question: What will be the output of the following PHP code?\n<?phpprint \"echo hello world\";?>",
        "choices": [
            "echo hello world",
            "hello world",
            "nothing",
            "error"
        ],
        "groundtruth": "A",
        "permutation": [
            0,
            1,
            2,
            3
        ],
        "label": "PHP",
        "task_id": "83049755-b4da-42ec-97b8-ee8edb9b12a3"
    }
]